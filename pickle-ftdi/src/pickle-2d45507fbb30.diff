diff --git a/dotconf.c b/dotconf.c
index f207db9..1130de0 100644
--- a/dotconf.c
+++ b/dotconf.c
@@ -160,6 +160,11 @@ getconf(void)
 				p.pgdi = strtoul(&line[5], NULL, 0);
 			}
 #endif /* RPI || BITBANG || FTDI || BPI */
+#if defined(FTDI)
+			else if (mystrcasestr(line, "USB_SERIAL=") == line) {
+				strncpy(p.usb_serial, &line[11], STRLEN);
+			}
+#endif /* FTDI*/
 
 #ifdef MCP23017
 			else if (mystrcasestr(line, "MCP=") == line) {
diff --git a/ftdi-bb.c b/ftdi-bb.c
index 074d857..a3334e8 100644
--- a/ftdi-bb.c
+++ b/ftdi-bb.c
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2005-2015 Darron Broad
- * Copyright (C) 2015 Gerhard Bertelsmann
+ * Copyright (C) 2016 Gerhard Bertelsmann
  * All rights reserved.
  *
  * This file is part of Pickle Microchip PIC ICSP.
@@ -28,6 +28,8 @@
 #include <ftdi.h>
 #include "ftdi-bb.h"
 
+extern struct pickle p;
+
 /*
  * File descriptor
  */
@@ -57,19 +59,19 @@ print_buffer(uint8_t *buffer, int len)
 int
 ftdi_bb_open(const char *device)
 {
-#ifdef DRYRUN
-	return 1;
-#endif
 #ifdef __linux
-	/* Initialise and find device */
+	/* Initialize and find device */
 	if (ftdi_init(&ftdi) < 0) {
 		printf("%s: ftdi_init failed [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 		ftdi_bb_fd = -1;
 		return -1;
 	}
 
-	if ((ftdi_usb_open(&ftdi, 0x0403, 0x6015) < 0) && (ftdi_usb_open(&ftdi, 0x0403, 0x6001) < 0)) {
-		printf("%s: can't open FT230X device [%s]\n", __func__, ftdi_get_error_string(&ftdi));
+	if ((ftdi_usb_open_desc(&ftdi, 0x0403, 0x6015, NULL, p.usb_serial) < 0) && (ftdi_usb_open_desc(&ftdi, 0x0403, 0x6001, NULL, p.usb_serial) < 0)) {
+		if (p.usb_serial)
+			printf("%s: can't open FT232R/FT230X device [%s] with serial ID %s\n", __func__, ftdi_get_error_string(&ftdi), p.usb_serial);
+		else
+			printf("%s: can't open FT232R/FT230X device [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 		ftdi_bb_fd = -1;
 		return -1;
 	}
@@ -95,12 +97,10 @@ ftdi_bb_open(const char *device)
 void
 ftdi_bb_close(void)
 {
-#ifdef DRYRUN
-	return;
-#endif
 #ifdef __linux
+	ftdi_disable_bitbang(&ftdi);
+	ftdi_usb_reset(&ftdi);
 	ftdi_usb_close(&ftdi);
-	ftdi_deinit(&ftdi);
 #endif
 }
 
@@ -109,88 +109,44 @@ ftdi_bb_io(struct ftdi_bb_io *io)
 {
 #ifdef __linux
 	uint8_t value;
-/*	printf("set io dir %d\n", io->dir); 
-	printf("set io pin %d\n", io->pin);
-	printf("set io bit %d\n", io->bit);
-	printf("\n");
-*/
-
-	/* pins > 16 are CBUS - asynch write */
-	if (io->pin >= 16) {
-		if ((io->dir == 0) && (io->bit == 1)) {
-			pin_state |= (1 << io->pin);
-			io->cbus_mask &= ~(1 << (io->pin - 16));
-		} else {
+	/* TODO: change mask if needed */
+	io->mask = actual_mask;
+	if (io->dir == 0) {
+		io->mask  |=  (1 << io->pin);
+		if (io->bit == 1)
+			pin_state |=  (1 << io->pin);
+		else
 			pin_state &= ~(1 << io->pin);
-			io->cbus_mask |= (1 << (io->pin - 16));
-		}
-		printf(" **** change to CBUS \n");
-#ifndef DRYRUN 
-		if (ftdi_set_bitmode(&ftdi, io->cbus_mask, BITMODE_CBUS) <= 0) {
-			printf("%s: ftdi_set_bimode failed [%s]\n", __func__, ftdi_get_error_string(&ftdi));
-			return -1;
-		}
-#endif
 	} else {
-		/* TODO: change mask if needed */
-		io->mask = actual_mask;
-/*		printf("        mask is 0x%02x pin %d bit %d pin_state 0x%02x\n",io->mask, io->pin, io->bit, pin_state); */
-		if (io->dir == 0) {
-			io->mask  |=  (1 << io->pin);
-			if (io->bit == 1) {
-				pin_state |=  (1 << io->pin);
-				// printf("set pin\n");
-			} else {
-				pin_state &= ~(1 << io->pin);
-				// printf("clr pin\n");
-			}
-		} else 
-			io->mask  &= ~(1 << io->pin);
-		
-/*		printf("        mask is 0x%02x pin %d bit %d pin_state 0x%02x\n",io->mask, io->pin, io->bit, pin_state); */
+		io->mask  &= ~(1 << io->pin);
+        }
 		
-		if ( io->mask != actual_mask ) {
-#ifndef DRYRUN
-			if (ftdi_set_bitmode(&ftdi, io->mask, BITMODE_SYNCBB) < 0) {
-
-				printf("%s: ftdi_set_bimode failed [%s]\n", __func__, ftdi_get_error_string(&ftdi));
-				return -1;
-			}
-#endif
-
-/*			printf("changed mask to 0x%02x\n",io->mask); */
-		}
-		actual_mask = io->mask;
-		value = pin_state & 0xff;
-#ifndef DRYRUN 
-		if (ftdi_write_data(&ftdi, &value, 1) < 0) {
-			printf("%s: ftdi_write_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
-			return -1;
-		}
-		if (ftdi_read_data(&ftdi, &value, 1) < 0) {
-			printf("%s: ftdi_read_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
+	if ( io->mask != actual_mask ) {
+		if (ftdi_set_bitmode(&ftdi, io->mask, BITMODE_SYNCBB) < 0) {
+			printf("%s: ftdi_set_bimode failed [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 			return -1;
 		}
-#endif
+	}
+	actual_mask = io->mask;
+	value = pin_state & 0xff;
+	if (ftdi_write_data(&ftdi, &value, 1) < 0) {
+		printf("%s: ftdi_write_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
+		return -1;
+	}
+	if (ftdi_read_data(&ftdi, &value, 1) < 0) {
+		printf("%s: ftdi_read_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
+		return -1;
 	}
 	return 1;
-#else
-	return -1
 #endif
+	return -1;
 }
 
 int
 ftdi_bb_configure(struct ftdi_bb_config *config)
 {
 #ifdef __linux
-/*	printf("clock pin: %d\n", config->clock_pin);
-	printf("clock falling: %d\n", config->clock_falling);
-	printf("data pin input: %d\n", config->data_pin_input);
-	printf("data pin output: %d\n", config->data_pin_output);
-	printf("clock delay low: %d\n", config->clock_delay_low);
-	printf("clock delay high: %d\n", config->clock_delay_high);
-	printf("\n");
-*/	clock_pin = config->clock_pin;
+	clock_pin = config->clock_pin;
 	clock_falling = config->clock_falling;
 	data_pin_input = config->data_pin_input;
 	data_pin_output = config->data_pin_output;
@@ -209,18 +165,8 @@ ftdi_bb_shift(struct ftdi_bb_shift *shift)
 	uint8_t mask;
 	uint64_t value;
 	int ret;
-/*	printf("shift direction %d\n", shift->dir);
-	printf("number bits %d\n", shift->nbits);
-	printf("value 0x%016lX\n\n", shift->bits);
-*/	value = shift->bits;
+	value = shift->bits;
 
-#if 0
-	if (value == 0xA12C2B2)
-		value++;
-#endif
-
-	/* TODO: maybe data_pin direction changed */
-	/* io struct and mask ? */
 	if (data_pin_input == data_pin_output) {
 		mask = actual_mask;
 		if (shift->dir)
@@ -228,28 +174,15 @@ ftdi_bb_shift(struct ftdi_bb_shift *shift)
 		else
 			mask |= ( 1 << data_pin_input);
 		if (mask != actual_mask) {
-#ifndef DRYRUN
 			if (ftdi_set_bitmode(&ftdi, mask, BITMODE_SYNCBB) < 0) {
 				printf("%s: ftdi set bimode failed [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 				return -1;
 			}
-/*			uint8_t temp = 0x04;
-			if (ftdi_write_data(&ftdi, &temp, 1) < 0) {
-				printf("%s: ftdi_write_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
-				return -1;
-			}
-			if (ftdi_read_data(&ftdi, &temp, 1) < 0) {
-				printf("%s: ftdi_read_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
-				return -1;
-			} */
-#endif
-/*			printf("mask changed: 0x%02x -> 0x%02x\n", actual_mask, mask); */
 			actual_mask = mask;
 		}
 	}
 
-
-	/* TODO: prepare buffer - simple delete for now (maybe wrong if MCLR or PGM set) */
+	/* prepare buffer - simple delete for now (maybe wrong if MCLR or PGM set) */
 	bzero(ftdi_buf_out, MAX_BITS_TRANSFER * 4);
 
 	for (int i = 0; i< shift->nbits; i++) {
@@ -273,14 +206,6 @@ ftdi_bb_shift(struct ftdi_bb_shift *shift)
 		index++;
 	}
 
-	/* print_buffer(ftdi_buf_out, index);
-	if (shift->dir) {
-		printf("read:\n");
-		print_buffer(ftdi_buf_in, index);
-	}
-	*/
-
-#ifndef DRYRUN 
 	if ((ret = ftdi_write_data(&ftdi, ftdi_buf_out, index )) < 0) {
 		printf("%s: ftdi_wrire_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 		return -1;
@@ -289,17 +214,14 @@ ftdi_bb_shift(struct ftdi_bb_shift *shift)
 		printf("%s: ftdi_read_error [%s]\n", __func__, ftdi_get_error_string(&ftdi));
 		return -1;
 	}
-#endif
 	value = 0;
 	int mask_value = 1;
 	if (shift->dir) {
 		for (int i = 0; i < shift->nbits; i++ ) {
-/*			printf("data 0x%02x pin 0x%02x\n", ftdi_buf_in[i*4 + 2], 1 << data_pin_input); */
 			if (ftdi_buf_in[i*4 + 2] & (1 << data_pin_input))
 				value |= mask_value;
 			mask_value = mask_value << 1;
 		}
-/*		printf("%s: value 0x%016lX\n", __func__, value); */
 	}
 	shift->bits = value;
 	return 1;
diff --git a/ftdi-bb.h b/ftdi-bb.h
index 3a4018d..17fe61e 100644
--- a/ftdi-bb.h
+++ b/ftdi-bb.h
@@ -20,6 +20,8 @@
 #ifndef _FTDI_BB_H
 #define _FTDI_BB_H
 
+#include "pickle.h"
+
 struct ftdi_bb_io {
 	uint8_t dir;
 	uint8_t pin;
@@ -45,15 +47,6 @@ struct ftdi_bb_shift {
 	uint64_t bits;
 };
 
-#if 0
-#define GPIO_BB_MAX (256)
-
-#define GPIO_BB_MAJOR (180)
-#define GPIO_BB_IO		_IOWR(GPIO_BB_MAJOR, 100, struct ftdi_bb_io *)
-#define GPIO_BB_CONFIGURE	_IOW(GPIO_BB_MAJOR,  101, struct ftdi_bb_config *)
-#define GPIO_BB_SHIFT		_IOWR(GPIO_BB_MAJOR, 102, struct ftdi_bb_shift *)
-#endif
-
 int ftdi_bb_open(const char *);
 void ftdi_bb_close(void);
 int ftdi_bb_io(struct ftdi_bb_io *);
diff --git a/pickle.c b/pickle.c
index a91b13b..1212a79 100644
--- a/pickle.c
+++ b/pickle.c
@@ -55,6 +55,10 @@ usage_pickle(void)
 		" BIT-BANG\n"
 		"\t\tLinux GPIO bit-bang.\n"
 #endif
+#ifdef FTDI
+		" FTDI BIT-BANG\n"
+		"\t\tLinux FTDI bit-bang.\n"
+#endif
 #ifdef MCP23017
 		" MCP23017\n"
 		"\t\tLinux MCP23017 I2C.\n"
diff --git a/pickle.h b/pickle.h
index bfc39d0..140e510 100644
--- a/pickle.h
+++ b/pickle.h
@@ -159,6 +159,10 @@ struct pickle {
         uint16_t pgdi;		/* CTS/PGD DATA_IN  */
         uint16_t pgm;		/* PGM OUT          */
 #endif
+#if defined(FTDI)
+	/* USB serial ID */
+	char usb_serial[STRLEN];
+#endif
 	/* Hardware operations */
 	struct pic_ops *pic;
 };
