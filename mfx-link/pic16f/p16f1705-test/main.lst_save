

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Mar 22 18:06:01 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1709
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	_dcc_hi_text,global,class=CODE,delta=2
     7                           	psect	_dcc_lo_text,global,class=CODE,delta=2
     8                           	psect	_mfx_hi_text,global,class=CODE,delta=2
     9                           	psect	_mfx_lo_text,global,class=CODE,delta=2
    10                           	psect	_mm1_hi_text,global,class=CODE,delta=2
    11                           	psect	_mm1_lo_text,global,class=CODE,delta=2
    12                           	psect	_mm2_hi_text,global,class=CODE,delta=2
    13                           	psect	_mm2_lo_text,global,class=CODE,delta=2
    14                           	psect	_slx_xx_text,global,class=CODE,delta=2
    15                           	psect	stringtext,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011C                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0197                     	;# 
   126  0199                     	;# 
   127  0199                     	;# 
   128  0199                     	;# 
   129  019A                     	;# 
   130  019A                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019C                     	;# 
   140  019D                     	;# 
   141  019D                     	;# 
   142  019D                     	;# 
   143  019E                     	;# 
   144  019E                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  019F                     	;# 
   148  019F                     	;# 
   149  019F                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  028C                     	;# 
   171  028D                     	;# 
   172  028E                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0293                     	;# 
   178  0298                     	;# 
   179  0298                     	;# 
   180  0299                     	;# 
   181  029A                     	;# 
   182  029A                     	;# 
   183  029E                     	;# 
   184  030C                     	;# 
   185  030D                     	;# 
   186  030E                     	;# 
   187  038C                     	;# 
   188  038D                     	;# 
   189  038E                     	;# 
   190  0391                     	;# 
   191  0392                     	;# 
   192  0393                     	;# 
   193  0394                     	;# 
   194  0395                     	;# 
   195  0396                     	;# 
   196  0397                     	;# 
   197  0398                     	;# 
   198  0399                     	;# 
   199  0415                     	;# 
   200  0416                     	;# 
   201  0417                     	;# 
   202  041C                     	;# 
   203  041D                     	;# 
   204  041E                     	;# 
   205  0511                     	;# 
   206  0515                     	;# 
   207  0617                     	;# 
   208  0618                     	;# 
   209  0619                     	;# 
   210  0619                     	;# 
   211  061A                     	;# 
   212  061B                     	;# 
   213  061C                     	;# 
   214  061C                     	;# 
   215  0691                     	;# 
   216  0692                     	;# 
   217  0693                     	;# 
   218  0694                     	;# 
   219  0695                     	;# 
   220  0696                     	;# 
   221  0697                     	;# 
   222  0698                     	;# 
   223  0699                     	;# 
   224  069A                     	;# 
   225  069B                     	;# 
   226  069C                     	;# 
   227  069D                     	;# 
   228  069E                     	;# 
   229  069F                     	;# 
   230  0E0F                     	;# 
   231  0E10                     	;# 
   232  0E11                     	;# 
   233  0E12                     	;# 
   234  0E13                     	;# 
   235  0E14                     	;# 
   236  0E15                     	;# 
   237  0E17                     	;# 
   238  0E20                     	;# 
   239  0E21                     	;# 
   240  0E22                     	;# 
   241  0E24                     	;# 
   242  0E25                     	;# 
   243  0E28                     	;# 
   244  0E29                     	;# 
   245  0E2A                     	;# 
   246  0E2B                     	;# 
   247  0E90                     	;# 
   248  0E91                     	;# 
   249  0E92                     	;# 
   250  0E94                     	;# 
   251  0E95                     	;# 
   252  0E9C                     	;# 
   253  0E9D                     	;# 
   254  0E9E                     	;# 
   255  0E9F                     	;# 
   256  0EA0                     	;# 
   257  0EA1                     	;# 
   258  0EA2                     	;# 
   259  0EA3                     	;# 
   260  0EA4                     	;# 
   261  0EA5                     	;# 
   262  0EA6                     	;# 
   263  0EA7                     	;# 
   264  0F0F                     	;# 
   265  0F10                     	;# 
   266  0F11                     	;# 
   267  0F12                     	;# 
   268  0F13                     	;# 
   269  0F14                     	;# 
   270  0F15                     	;# 
   271  0F16                     	;# 
   272  0F17                     	;# 
   273  0F18                     	;# 
   274  0F19                     	;# 
   275  0F1A                     	;# 
   276  0F1B                     	;# 
   277  0F1C                     	;# 
   278  0F1D                     	;# 
   279  0F1E                     	;# 
   280  0F1F                     	;# 
   281  0F20                     	;# 
   282  0F21                     	;# 
   283  0F22                     	;# 
   284  0F23                     	;# 
   285  0F24                     	;# 
   286  0F25                     	;# 
   287  0F26                     	;# 
   288  0F27                     	;# 
   289  0F28                     	;# 
   290  0F29                     	;# 
   291  0F2A                     	;# 
   292  0F2B                     	;# 
   293  0F2C                     	;# 
   294  0F2D                     	;# 
   295  0F9E                     	;# 
   296  0FE4                     	;# 
   297  0FE5                     	;# 
   298  0FE6                     	;# 
   299  0FE7                     	;# 
   300  0FE8                     	;# 
   301  0FE9                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEF                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0008                     	;# 
   316  0009                     	;# 
   317  000A                     	;# 
   318  000B                     	;# 
   319  000C                     	;# 
   320  000D                     	;# 
   321  000E                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  0111                     	;# 
   356  0112                     	;# 
   357  0113                     	;# 
   358  0114                     	;# 
   359  0115                     	;# 
   360  0116                     	;# 
   361  0117                     	;# 
   362  0118                     	;# 
   363  0119                     	;# 
   364  011C                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  018E                     	;# 
   368  0191                     	;# 
   369  0191                     	;# 
   370  0192                     	;# 
   371  0193                     	;# 
   372  0193                     	;# 
   373  0194                     	;# 
   374  0195                     	;# 
   375  0196                     	;# 
   376  0197                     	;# 
   377  0199                     	;# 
   378  0199                     	;# 
   379  0199                     	;# 
   380  019A                     	;# 
   381  019A                     	;# 
   382  019A                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019C                     	;# 
   389  019C                     	;# 
   390  019C                     	;# 
   391  019D                     	;# 
   392  019D                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019E                     	;# 
   396  019E                     	;# 
   397  019F                     	;# 
   398  019F                     	;# 
   399  019F                     	;# 
   400  019F                     	;# 
   401  019F                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  020E                     	;# 
   405  0211                     	;# 
   406  0211                     	;# 
   407  0212                     	;# 
   408  0212                     	;# 
   409  0213                     	;# 
   410  0213                     	;# 
   411  0214                     	;# 
   412  0214                     	;# 
   413  0215                     	;# 
   414  0215                     	;# 
   415  0215                     	;# 
   416  0215                     	;# 
   417  0216                     	;# 
   418  0216                     	;# 
   419  0217                     	;# 
   420  0217                     	;# 
   421  028C                     	;# 
   422  028D                     	;# 
   423  028E                     	;# 
   424  0291                     	;# 
   425  0291                     	;# 
   426  0292                     	;# 
   427  0293                     	;# 
   428  0293                     	;# 
   429  0298                     	;# 
   430  0298                     	;# 
   431  0299                     	;# 
   432  029A                     	;# 
   433  029A                     	;# 
   434  029E                     	;# 
   435  030C                     	;# 
   436  030D                     	;# 
   437  030E                     	;# 
   438  038C                     	;# 
   439  038D                     	;# 
   440  038E                     	;# 
   441  0391                     	;# 
   442  0392                     	;# 
   443  0393                     	;# 
   444  0394                     	;# 
   445  0395                     	;# 
   446  0396                     	;# 
   447  0397                     	;# 
   448  0398                     	;# 
   449  0399                     	;# 
   450  0415                     	;# 
   451  0416                     	;# 
   452  0417                     	;# 
   453  041C                     	;# 
   454  041D                     	;# 
   455  041E                     	;# 
   456  0511                     	;# 
   457  0515                     	;# 
   458  0617                     	;# 
   459  0618                     	;# 
   460  0619                     	;# 
   461  0619                     	;# 
   462  061A                     	;# 
   463  061B                     	;# 
   464  061C                     	;# 
   465  061C                     	;# 
   466  0691                     	;# 
   467  0692                     	;# 
   468  0693                     	;# 
   469  0694                     	;# 
   470  0695                     	;# 
   471  0696                     	;# 
   472  0697                     	;# 
   473  0698                     	;# 
   474  0699                     	;# 
   475  069A                     	;# 
   476  069B                     	;# 
   477  069C                     	;# 
   478  069D                     	;# 
   479  069E                     	;# 
   480  069F                     	;# 
   481  0E0F                     	;# 
   482  0E10                     	;# 
   483  0E11                     	;# 
   484  0E12                     	;# 
   485  0E13                     	;# 
   486  0E14                     	;# 
   487  0E15                     	;# 
   488  0E17                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E24                     	;# 
   493  0E25                     	;# 
   494  0E28                     	;# 
   495  0E29                     	;# 
   496  0E2A                     	;# 
   497  0E2B                     	;# 
   498  0E90                     	;# 
   499  0E91                     	;# 
   500  0E92                     	;# 
   501  0E94                     	;# 
   502  0E95                     	;# 
   503  0E9C                     	;# 
   504  0E9D                     	;# 
   505  0E9E                     	;# 
   506  0E9F                     	;# 
   507  0EA0                     	;# 
   508  0EA1                     	;# 
   509  0EA2                     	;# 
   510  0EA3                     	;# 
   511  0EA4                     	;# 
   512  0EA5                     	;# 
   513  0EA6                     	;# 
   514  0EA7                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0F24                     	;# 
   537  0F25                     	;# 
   538  0F26                     	;# 
   539  0F27                     	;# 
   540  0F28                     	;# 
   541  0F29                     	;# 
   542  0F2A                     	;# 
   543  0F2B                     	;# 
   544  0F2C                     	;# 
   545  0F2D                     	;# 
   546  0F9E                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0015                     	;# 
   577  0016                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001C                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  009F                     	;# 
   603  010C                     	;# 
   604  010D                     	;# 
   605  010E                     	;# 
   606  0111                     	;# 
   607  0112                     	;# 
   608  0113                     	;# 
   609  0114                     	;# 
   610  0115                     	;# 
   611  0116                     	;# 
   612  0117                     	;# 
   613  0118                     	;# 
   614  0119                     	;# 
   615  011C                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0194                     	;# 
   625  0195                     	;# 
   626  0196                     	;# 
   627  0197                     	;# 
   628  0199                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019E                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  019F                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020D                     	;# 
   655  020E                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0216                     	;# 
   669  0216                     	;# 
   670  0217                     	;# 
   671  0217                     	;# 
   672  028C                     	;# 
   673  028D                     	;# 
   674  028E                     	;# 
   675  0291                     	;# 
   676  0291                     	;# 
   677  0292                     	;# 
   678  0293                     	;# 
   679  0293                     	;# 
   680  0298                     	;# 
   681  0298                     	;# 
   682  0299                     	;# 
   683  029A                     	;# 
   684  029A                     	;# 
   685  029E                     	;# 
   686  030C                     	;# 
   687  030D                     	;# 
   688  030E                     	;# 
   689  038C                     	;# 
   690  038D                     	;# 
   691  038E                     	;# 
   692  0391                     	;# 
   693  0392                     	;# 
   694  0393                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0397                     	;# 
   699  0398                     	;# 
   700  0399                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0511                     	;# 
   708  0515                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0696                     	;# 
   723  0697                     	;# 
   724  0698                     	;# 
   725  0699                     	;# 
   726  069A                     	;# 
   727  069B                     	;# 
   728  069C                     	;# 
   729  069D                     	;# 
   730  069E                     	;# 
   731  069F                     	;# 
   732  0E0F                     	;# 
   733  0E10                     	;# 
   734  0E11                     	;# 
   735  0E12                     	;# 
   736  0E13                     	;# 
   737  0E14                     	;# 
   738  0E15                     	;# 
   739  0E17                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E90                     	;# 
   750  0E91                     	;# 
   751  0E92                     	;# 
   752  0E94                     	;# 
   753  0E95                     	;# 
   754  0E9C                     	;# 
   755  0E9D                     	;# 
   756  0E9E                     	;# 
   757  0E9F                     	;# 
   758  0EA0                     	;# 
   759  0EA1                     	;# 
   760  0EA2                     	;# 
   761  0EA3                     	;# 
   762  0EA4                     	;# 
   763  0EA5                     	;# 
   764  0EA6                     	;# 
   765  0EA7                     	;# 
   766  0F0F                     	;# 
   767  0F10                     	;# 
   768  0F11                     	;# 
   769  0F12                     	;# 
   770  0F13                     	;# 
   771  0F14                     	;# 
   772  0F15                     	;# 
   773  0F16                     	;# 
   774  0F17                     	;# 
   775  0F18                     	;# 
   776  0F19                     	;# 
   777  0F1A                     	;# 
   778  0F1B                     	;# 
   779  0F1C                     	;# 
   780  0F1D                     	;# 
   781  0F1E                     	;# 
   782  0F1F                     	;# 
   783  0F20                     	;# 
   784  0F21                     	;# 
   785  0F22                     	;# 
   786  0F23                     	;# 
   787  0F24                     	;# 
   788  0F25                     	;# 
   789  0F26                     	;# 
   790  0F27                     	;# 
   791  0F28                     	;# 
   792  0F29                     	;# 
   793  0F2A                     	;# 
   794  0F2B                     	;# 
   795  0F2C                     	;# 
   796  0F2D                     	;# 
   797  0F9E                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  0011                     	;# 
   825  0012                     	;# 
   826  0013                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0016                     	;# 
   830  0017                     	;# 
   831  0018                     	;# 
   832  0019                     	;# 
   833  001A                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  008C                     	;# 
   837  008D                     	;# 
   838  008E                     	;# 
   839  0091                     	;# 
   840  0092                     	;# 
   841  0093                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0098                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  009F                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0111                     	;# 
   858  0112                     	;# 
   859  0113                     	;# 
   860  0114                     	;# 
   861  0115                     	;# 
   862  0116                     	;# 
   863  0117                     	;# 
   864  0118                     	;# 
   865  0119                     	;# 
   866  011C                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0197                     	;# 
   879  0199                     	;# 
   880  0199                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019A                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019D                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019E                     	;# 
   898  019E                     	;# 
   899  019F                     	;# 
   900  019F                     	;# 
   901  019F                     	;# 
   902  019F                     	;# 
   903  019F                     	;# 
   904  020C                     	;# 
   905  020D                     	;# 
   906  020E                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  028C                     	;# 
   924  028D                     	;# 
   925  028E                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0293                     	;# 
   931  0298                     	;# 
   932  0298                     	;# 
   933  0299                     	;# 
   934  029A                     	;# 
   935  029A                     	;# 
   936  029E                     	;# 
   937  030C                     	;# 
   938  030D                     	;# 
   939  030E                     	;# 
   940  038C                     	;# 
   941  038D                     	;# 
   942  038E                     	;# 
   943  0391                     	;# 
   944  0392                     	;# 
   945  0393                     	;# 
   946  0394                     	;# 
   947  0395                     	;# 
   948  0396                     	;# 
   949  0397                     	;# 
   950  0398                     	;# 
   951  0399                     	;# 
   952  0415                     	;# 
   953  0416                     	;# 
   954  0417                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  0511                     	;# 
   959  0515                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  0691                     	;# 
   969  0692                     	;# 
   970  0693                     	;# 
   971  0694                     	;# 
   972  0695                     	;# 
   973  0696                     	;# 
   974  0697                     	;# 
   975  0698                     	;# 
   976  0699                     	;# 
   977  069A                     	;# 
   978  069B                     	;# 
   979  069C                     	;# 
   980  069D                     	;# 
   981  069E                     	;# 
   982  069F                     	;# 
   983  0E0F                     	;# 
   984  0E10                     	;# 
   985  0E11                     	;# 
   986  0E12                     	;# 
   987  0E13                     	;# 
   988  0E14                     	;# 
   989  0E15                     	;# 
   990  0E17                     	;# 
   991  0E20                     	;# 
   992  0E21                     	;# 
   993  0E22                     	;# 
   994  0E24                     	;# 
   995  0E25                     	;# 
   996  0E28                     	;# 
   997  0E29                     	;# 
   998  0E2A                     	;# 
   999  0E2B                     	;# 
  1000  0E90                     	;# 
  1001  0E91                     	;# 
  1002  0E92                     	;# 
  1003  0E94                     	;# 
  1004  0E95                     	;# 
  1005  0E9C                     	;# 
  1006  0E9D                     	;# 
  1007  0E9E                     	;# 
  1008  0E9F                     	;# 
  1009  0EA0                     	;# 
  1010  0EA1                     	;# 
  1011  0EA2                     	;# 
  1012  0EA3                     	;# 
  1013  0EA4                     	;# 
  1014  0EA5                     	;# 
  1015  0EA6                     	;# 
  1016  0EA7                     	;# 
  1017  0F0F                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0F20                     	;# 
  1035  0F21                     	;# 
  1036  0F22                     	;# 
  1037  0F23                     	;# 
  1038  0F24                     	;# 
  1039  0F25                     	;# 
  1040  0F26                     	;# 
  1041  0F27                     	;# 
  1042  0F28                     	;# 
  1043  0F29                     	;# 
  1044  0F2A                     	;# 
  1045  0F2B                     	;# 
  1046  0F2C                     	;# 
  1047  0F2D                     	;# 
  1048  0F9E                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0013                     	;# 
  1078  0015                     	;# 
  1079  0016                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001C                     	;# 
  1087  008C                     	;# 
  1088  008D                     	;# 
  1089  008E                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0093                     	;# 
  1093  0095                     	;# 
  1094  0096                     	;# 
  1095  0097                     	;# 
  1096  0098                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  009F                     	;# 
  1105  010C                     	;# 
  1106  010D                     	;# 
  1107  010E                     	;# 
  1108  0111                     	;# 
  1109  0112                     	;# 
  1110  0113                     	;# 
  1111  0114                     	;# 
  1112  0115                     	;# 
  1113  0116                     	;# 
  1114  0117                     	;# 
  1115  0118                     	;# 
  1116  0119                     	;# 
  1117  011C                     	;# 
  1118  018C                     	;# 
  1119  018D                     	;# 
  1120  018E                     	;# 
  1121  0191                     	;# 
  1122  0191                     	;# 
  1123  0192                     	;# 
  1124  0193                     	;# 
  1125  0193                     	;# 
  1126  0194                     	;# 
  1127  0195                     	;# 
  1128  0196                     	;# 
  1129  0197                     	;# 
  1130  0199                     	;# 
  1131  0199                     	;# 
  1132  0199                     	;# 
  1133  019A                     	;# 
  1134  019A                     	;# 
  1135  019A                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019C                     	;# 
  1142  019C                     	;# 
  1143  019C                     	;# 
  1144  019D                     	;# 
  1145  019D                     	;# 
  1146  019D                     	;# 
  1147  019E                     	;# 
  1148  019E                     	;# 
  1149  019E                     	;# 
  1150  019F                     	;# 
  1151  019F                     	;# 
  1152  019F                     	;# 
  1153  019F                     	;# 
  1154  019F                     	;# 
  1155  020C                     	;# 
  1156  020D                     	;# 
  1157  020E                     	;# 
  1158  0211                     	;# 
  1159  0211                     	;# 
  1160  0212                     	;# 
  1161  0212                     	;# 
  1162  0213                     	;# 
  1163  0213                     	;# 
  1164  0214                     	;# 
  1165  0214                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0215                     	;# 
  1170  0216                     	;# 
  1171  0216                     	;# 
  1172  0217                     	;# 
  1173  0217                     	;# 
  1174  028C                     	;# 
  1175  028D                     	;# 
  1176  028E                     	;# 
  1177  0291                     	;# 
  1178  0291                     	;# 
  1179  0292                     	;# 
  1180  0293                     	;# 
  1181  0293                     	;# 
  1182  0298                     	;# 
  1183  0298                     	;# 
  1184  0299                     	;# 
  1185  029A                     	;# 
  1186  029A                     	;# 
  1187  029E                     	;# 
  1188  030C                     	;# 
  1189  030D                     	;# 
  1190  030E                     	;# 
  1191  038C                     	;# 
  1192  038D                     	;# 
  1193  038E                     	;# 
  1194  0391                     	;# 
  1195  0392                     	;# 
  1196  0393                     	;# 
  1197  0394                     	;# 
  1198  0395                     	;# 
  1199  0396                     	;# 
  1200  0397                     	;# 
  1201  0398                     	;# 
  1202  0399                     	;# 
  1203  0415                     	;# 
  1204  0416                     	;# 
  1205  0417                     	;# 
  1206  041C                     	;# 
  1207  041D                     	;# 
  1208  041E                     	;# 
  1209  0511                     	;# 
  1210  0515                     	;# 
  1211  0617                     	;# 
  1212  0618                     	;# 
  1213  0619                     	;# 
  1214  0619                     	;# 
  1215  061A                     	;# 
  1216  061B                     	;# 
  1217  061C                     	;# 
  1218  061C                     	;# 
  1219  0691                     	;# 
  1220  0692                     	;# 
  1221  0693                     	;# 
  1222  0694                     	;# 
  1223  0695                     	;# 
  1224  0696                     	;# 
  1225  0697                     	;# 
  1226  0698                     	;# 
  1227  0699                     	;# 
  1228  069A                     	;# 
  1229  069B                     	;# 
  1230  069C                     	;# 
  1231  069D                     	;# 
  1232  069E                     	;# 
  1233  069F                     	;# 
  1234  0E0F                     	;# 
  1235  0E10                     	;# 
  1236  0E11                     	;# 
  1237  0E12                     	;# 
  1238  0E13                     	;# 
  1239  0E14                     	;# 
  1240  0E15                     	;# 
  1241  0E17                     	;# 
  1242  0E20                     	;# 
  1243  0E21                     	;# 
  1244  0E22                     	;# 
  1245  0E24                     	;# 
  1246  0E25                     	;# 
  1247  0E28                     	;# 
  1248  0E29                     	;# 
  1249  0E2A                     	;# 
  1250  0E2B                     	;# 
  1251  0E90                     	;# 
  1252  0E91                     	;# 
  1253  0E92                     	;# 
  1254  0E94                     	;# 
  1255  0E95                     	;# 
  1256  0E9C                     	;# 
  1257  0E9D                     	;# 
  1258  0E9E                     	;# 
  1259  0E9F                     	;# 
  1260  0EA0                     	;# 
  1261  0EA1                     	;# 
  1262  0EA2                     	;# 
  1263  0EA3                     	;# 
  1264  0EA4                     	;# 
  1265  0EA5                     	;# 
  1266  0EA6                     	;# 
  1267  0EA7                     	;# 
  1268  0F0F                     	;# 
  1269  0F10                     	;# 
  1270  0F11                     	;# 
  1271  0F12                     	;# 
  1272  0F13                     	;# 
  1273  0F14                     	;# 
  1274  0F15                     	;# 
  1275  0F16                     	;# 
  1276  0F17                     	;# 
  1277  0F18                     	;# 
  1278  0F19                     	;# 
  1279  0F1A                     	;# 
  1280  0F1B                     	;# 
  1281  0F1C                     	;# 
  1282  0F1D                     	;# 
  1283  0F1E                     	;# 
  1284  0F1F                     	;# 
  1285  0F20                     	;# 
  1286  0F21                     	;# 
  1287  0F22                     	;# 
  1288  0F23                     	;# 
  1289  0F24                     	;# 
  1290  0F25                     	;# 
  1291  0F26                     	;# 
  1292  0F27                     	;# 
  1293  0F28                     	;# 
  1294  0F29                     	;# 
  1295  0F2A                     	;# 
  1296  0F2B                     	;# 
  1297  0F2C                     	;# 
  1298  0F2D                     	;# 
  1299  0F9E                     	;# 
  1300  0FE4                     	;# 
  1301  0FE5                     	;# 
  1302  0FE6                     	;# 
  1303  0FE7                     	;# 
  1304  0FE8                     	;# 
  1305  0FE9                     	;# 
  1306  0FEA                     	;# 
  1307  0FEB                     	;# 
  1308  0FED                     	;# 
  1309  0FEE                     	;# 
  1310  0FEF                     	;# 
  1311                           
  1312                           	psect	idataCOMMON
  1313  0557                     __pidataCOMMON:	
  1314                           
  1315                           ;initializer for _pulse_high
  1316  0557  3419               	retlw	25
  1317  0558  3400               	retlw	0
  1318                           
  1319                           	psect	idataBANK0
  1320  0553                     __pidataBANK0:	
  1321                           
  1322                           ;initializer for _pulse_low
  1323  0553  344B               	retlw	75
  1324  0554  3400               	retlw	0
  1325                           
  1326                           ;initializer for _sData
  1327  0555  3446               	retlw	low (STR_3| (0+32768))
  1328  0556  3490               	retlw	high (STR_3| (0+32768))
  1329  1004                     _dcc_hi_absaddr	set	4100
  1330  1000                     _dcc_lo_absaddr	set	4096
  1331  101C                     _mfx_hi_absaddr	set	4124
  1332  1018                     _mfx_lo_absaddr	set	4120
  1333  100C                     _mm1_hi_absaddr	set	4108
  1334  1008                     _mm1_lo_absaddr	set	4104
  1335  1014                     _mm2_hi_absaddr	set	4116
  1336  1010                     _mm2_lo_absaddr	set	4112
  1337  1020                     _slx_xx_absaddr	set	4128
  1338  1004                     _dcc_hi_absaddr	set	4100
  1339                           
  1340                           	psect	_dcc_hi_text
  1341  1004                     __p_dcc_hi_text:	
  1342  1004                     _dcc_hi:	
  1343  1004  3401               	retlw	1
  1344  1005  3403               	retlw	3
  1345  1006  3474               	retlw	116
  1346  1007  3474               	retlw	116
  1347  1008                     __end_of_dcc_hi:	
  1348  1000                     _dcc_lo_absaddr	set	4096
  1349                           
  1350                           	psect	_dcc_lo_text
  1351  1000                     __p_dcc_lo_text:	
  1352  1000                     _dcc_lo:	
  1353  1000  3401               	retlw	1
  1354  1001  3403               	retlw	3
  1355  1002  343A               	retlw	58
  1356  1003  343A               	retlw	58
  1357  1004                     __end_of_dcc_lo:	
  1358  101C                     _mfx_hi_absaddr	set	4124
  1359                           
  1360                           	psect	_mfx_hi_text
  1361  101C                     __p_mfx_hi_text:	
  1362  101C                     _mfx_hi:	
  1363  101C  3401               	retlw	1
  1364  101D  3403               	retlw	3
  1365  101E  3464               	retlw	100
  1366  101F  3464               	retlw	100
  1367  1020                     __end_of_mfx_hi:	
  1368  1018                     _mfx_lo_absaddr	set	4120
  1369                           
  1370                           	psect	_mfx_lo_text
  1371  1018                     __p_mfx_lo_text:	
  1372  1018                     _mfx_lo:	
  1373  1018  3401               	retlw	1
  1374  1019  3403               	retlw	3
  1375  101A  3432               	retlw	50
  1376  101B  3432               	retlw	50
  1377  101C                     __end_of_mfx_lo:	
  1378  100C                     _mm1_hi_absaddr	set	4108
  1379                           
  1380                           	psect	_mm1_hi_text
  1381  100C                     __p_mm1_hi_text:	
  1382  100C                     _mm1_hi:	
  1383  100C  3401               	retlw	1
  1384  100D  3402               	retlw	2
  1385  100E  34B6               	retlw	182
  1386  100F  341A               	retlw	26
  1387  1010                     __end_of_mm1_hi:	
  1388  1008                     _mm1_lo_absaddr	set	4104
  1389                           
  1390                           	psect	_mm1_lo_text
  1391  1008                     __p_mm1_lo_text:	
  1392  1008                     _mm1_lo:	
  1393  1008  3401               	retlw	1
  1394  1009  3401               	retlw	1
  1395  100A  341A               	retlw	26
  1396  100B  34B6               	retlw	182
  1397  100C                     __end_of_mm1_lo:	
  1398  1014                     _mm2_hi_absaddr	set	4116
  1399                           
  1400                           	psect	_mm2_hi_text
  1401  1014                     __p_mm2_hi_text:	
  1402  1014                     _mm2_hi:	
  1403  1014  3401               	retlw	1
  1404  1015  3402               	retlw	2
  1405  1016  345B               	retlw	91
  1406  1017  340D               	retlw	13
  1407  1018                     __end_of_mm2_hi:	
  1408  1010                     _mm2_lo_absaddr	set	4112
  1409                           
  1410                           	psect	_mm2_lo_text
  1411  1010                     __p_mm2_lo_text:	
  1412  1010                     _mm2_lo:	
  1413  1010  3401               	retlw	1
  1414  1011  3401               	retlw	1
  1415  1012  340D               	retlw	13
  1416  1013  345B               	retlw	91
  1417  1014                     __end_of_mm2_lo:	
  1418  1020                     _slx_xx_absaddr	set	4128
  1419                           
  1420                           	psect	_slx_xx_text
  1421  1020                     __p_slx_xx_text:	
  1422  1020                     _slx_xx:	
  1423  1020  3403               	retlw	3
  1424  1021  3403               	retlw	3
  1425  1022  3428               	retlw	40
  1426  1023  340A               	retlw	10
  1427  1024                     __end_of_slx_xx:	
  1428  0018                     _T1CON	set	24
  1429  001C                     _T2CON	set	28
  1430  0015                     _TMR0	set	21
  1431  0017                     _TMR1H	set	23
  1432  0016                     _TMR1L	set	22
  1433  001A                     _TMR2	set	26
  1434  008A                     _CCP1IF	set	138
  1435  005F                     _GIE	set	95
  1436  005E                     _PEIE	set	94
  1437  008D                     _RCIF	set	141
  1438  008B                     _SSP1IF	set	139
  1439  005D                     _TMR0IE	set	93
  1440  005A                     _TMR0IF	set	90
  1441  00CF                     _TMR1GE	set	207
  1442  0088                     _TMR1IF	set	136
  1443  008C                     _TXIF	set	140
  1444  009D                     _ADCON0	set	157
  1445  009E                     _ADCON1	set	158
  1446  009F                     _ADCON2	set	159
  1447  009C                     _ADRESH	set	156
  1448  009B                     _ADRESL	set	155
  1449  0099                     _OSCCON	set	153
  1450  04E9                     _ADGO	set	1257
  1451  048A                     _CCP1IE	set	1162
  1452  04A9                     _PS1	set	1193
  1453  04AB                     _PSA	set	1195
  1454  048D                     _RCIE	set	1165
  1455  04AD                     _TMR0CS	set	1197
  1456  0460                     _TRISA0	set	1120
  1457  0462                     _TRISA2	set	1122
  1458  0464                     _TRISA4	set	1124
  1459  0465                     _TRISA5	set	1125
  1460  046C                     _TRISB4	set	1132
  1461  046D                     _TRISB5	set	1133
  1462  046E                     _TRISB6	set	1134
  1463  0470                     _TRISC0	set	1136
  1464  0471                     _TRISC1	set	1137
  1465  0472                     _TRISC2	set	1138
  1466  0473                     _TRISC3	set	1139
  1467  0474                     _TRISC4	set	1140
  1468  0475                     _TRISC5	set	1141
  1469  048C                     _TXIE	set	1164
  1470  0111                     _CM1CON0	set	273
  1471  0112                     _CM1CON1	set	274
  1472  0113                     _CM2CON0	set	275
  1473  0114                     _CM2CON1	set	276
  1474  086C                     _LATB4	set	2156
  1475  0873                     _LATC3	set	2163
  1476  0874                     _LATC4	set	2164
  1477  0875                     _LATC5	set	2165
  1478  018C                     _ANSELA	set	396
  1479  018D                     _ANSELB	set	397
  1480  018E                     _ANSELC	set	398
  1481  0199                     _RC1REG	set	409
  1482  019B                     _SPBRG	set	411
  1483  019A                     _TX1REG	set	410
  1484  019A                     _TXREG1	set	410
  1485  0CFB                     _BRG16	set	3323
  1486  0CF2                     _BRGH	set	3314
  1487  0CEC                     _CREN	set	3308
  1488  0CEE                     _RX9	set	3310
  1489  0CEF                     _SPEN	set	3311
  1490  0CF4                     _SYNC	set	3316
  1491  0CF1                     _TRMT	set	3313
  1492  0CF6                     _TX9	set	3318
  1493  0CF0                     _TX9D	set	3312
  1494  0CF5                     _TXEN	set	3317
  1495  0212                     _SSP1ADD	set	530
  1496  0215                     _SSP1CON1	set	533
  1497  0216                     _SSP1CON2	set	534
  1498  0217                     _SSP1CON3	set	535
  1499  0214                     _SSP1STAT	set	532
  1500  0211                     _SSPBUF	set	529
  1501  10B5                     _ACKDT	set	4277
  1502  10B4                     _ACKEN	set	4276
  1503  10B2                     _PEN	set	4274
  1504  10B1                     _RSEN	set	4273
  1505  10B0                     _SEN	set	4272
  1506  10AF                     _WCOL	set	4271
  1507  0291                     _CCPR1	set	657
  1508  0293                     _CCP1CON	set	659
  1509  0292                     _CCPR1H	set	658
  1510  0291                     _CCPR1L	set	657
  1511  1498                     _CCP1M0	set	5272
  1512  069D                     _COG1ASD0	set	1693
  1513  069E                     _COG1ASD1	set	1694
  1514  0694                     _COG1BLKF	set	1684
  1515  0693                     _COG1BLKR	set	1683
  1516  0697                     _COG1CON0	set	1687
  1517  0698                     _COG1CON1	set	1688
  1518  0696                     _COG1DBF	set	1686
  1519  0695                     _COG1DBR	set	1685
  1520  069B                     _COG1FIS	set	1691
  1521  069C                     _COG1FSIM	set	1692
  1522  0692                     _COG1PHF	set	1682
  1523  0691                     _COG1PHR	set	1681
  1524  0699                     _COG1RIS	set	1689
  1525  069A                     _COG1RSIM	set	1690
  1526  069F                     _COG1STR	set	1695
  1527  0E0F                     _PPSLOCK	set	3599
  1528  0E24                     _RXPPS	set	3620
  1529  0E20                     _SSPCLKPPS	set	3616
  1530  0E21                     _SSPDATPPS	set	3617
  1531  0E94                     _RA4PPS	set	3732
  1532  0E95                     _RA5PPS	set	3733
  1533  0E9D                     _RB5PPS	set	3741
  1534  0E9E                     _RB6PPS	set	3742
  1535  0EA2                     _RC2PPS	set	3746
  1536  0EA4                     _RC4PPS	set	3748
  1537  0F12                     _CLC1SEL0	set	3858
  1538  0F13                     _CLC1SEL1	set	3859
  1539                           
  1540                           	psect	stringtext
  1541  1024                     __pstringtext:	
  1542  1024                     STR_1:	
  1543  1024  3442               	retlw	66	;'B'
  1544  1025  346F               	retlw	111	;'o'
  1545  1026  346F               	retlw	111	;'o'
  1546  1027  3473               	retlw	115	;'s'
  1547  1028  3474               	retlw	116	;'t'
  1548  1029  3465               	retlw	101	;'e'
  1549  102A  3472               	retlw	114	;'r'
  1550  102B  3420               	retlw	32	;' '
  1551  102C  344D               	retlw	77	;'M'
  1552  102D  3461               	retlw	97	;'a'
  1553  102E  3478               	retlw	120	;'x'
  1554  102F  343D               	retlw	61	;'='
  1555  1030  3438               	retlw	56	;'8'
  1556  1031  342E               	retlw	46	;'.'
  1557  1032  3430               	retlw	48	;'0'
  1558  1033  3441               	retlw	65	;'A'
  1559  1034  3400               	retlw	0
  1560  1035  3400               	retlw	0
  1561  1036                     STR_2:	
  1562  1036  3420               	retlw	32	;' '
  1563  1037  3420               	retlw	32	;' '
  1564  1038  344F               	retlw	79	;'O'
  1565  1039  346E               	retlw	110	;'n'
  1566  103A  3420               	retlw	32	;' '
  1567  103B  3420               	retlw	32	;' '
  1568  103C  3420               	retlw	32	;' '
  1569  103D  3420               	retlw	32	;' '
  1570  103E  3420               	retlw	32	;' '
  1571  103F  3420               	retlw	32	;' '
  1572  1040  3430               	retlw	48	;'0'
  1573  1041  342E               	retlw	46	;'.'
  1574  1042  3430               	retlw	48	;'0'
  1575  1043  3425               	retlw	37	;'%'
  1576  1044  3400               	retlw	0
  1577  1045  3400               	retlw	0
  1578  1046                     STR_3:	
  1579  1046  3420               	retlw	32	;' '
  1580  1047  3444               	retlw	68	;'D'
  1581  1048  3461               	retlw	97	;'a'
  1582  1049  3474               	retlw	116	;'t'
  1583  104A  3461               	retlw	97	;'a'
  1584  104B  343A               	retlw	58	;':'
  1585  104C  3420               	retlw	32	;' '
  1586  104D  3400               	retlw	0
  1587                           
  1588                           ; #config settings
  1589  0000                     
  1590                           	psect	cinit
  1591  0093                     start_initialization:	
  1592  0093                     __initialization:	
  1593                           
  1594                           ; Initialize objects allocated to COMMON
  1595  0093  3185  2557  3180   	fcall	__pidataCOMMON	;fetch initializer
  1596  0096  00FA               	movwf	__pdataCOMMON& (0+127)
  1597  0097  3185  2558  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1598  009A  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
  1599                           
  1600                           ; Initialize objects allocated to BANK0
  1601  009B  3185  2553  3180   	fcall	__pidataBANK0	;fetch initializer
  1602  009E  00DD               	movwf	__pdataBANK0& (0+127)
  1603  009F  3185  2554  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1604  00A2  00DE               	movwf	(__pdataBANK0+1)& (0+127)
  1605  00A3  3185  2555  3180   	fcall	__pidataBANK0+2	;fetch initializer
  1606  00A6  00DF               	movwf	(__pdataBANK0+2)& (0+127)
  1607  00A7  3185  2556  3180   	fcall	__pidataBANK0+3	;fetch initializer
  1608  00AA  00E0               	movwf	(__pdataBANK0+3)& (0+127)
  1609                           
  1610                           ; Clear objects allocated to COMMON
  1611  00AB  01F6               	clrf	__pbssCOMMON& (0+127)
  1612  00AC  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1613  00AD  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1614  00AE  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1615                           
  1616                           ; Clear objects allocated to BANK0
  1617  00AF  3020               	movlw	low __pbssBANK0
  1618  00B0  0084               	movwf	4
  1619  00B1  3000               	movlw	high __pbssBANK0
  1620  00B2  0085               	movwf	5
  1621  00B3  3025               	movlw	37
  1622  00B4  3185  2543  3180   	fcall	clear_ram0
  1623                           
  1624                           ; Clear objects allocated to BANK1
  1625  00B7  30A0               	movlw	low __pbssBANK1
  1626  00B8  0084               	movwf	4
  1627  00B9  3000               	movlw	high __pbssBANK1
  1628  00BA  0085               	movwf	5
  1629  00BB  3022               	movlw	34
  1630  00BC  3185  2543         	fcall	clear_ram0
  1631  00BE                     end_of_initialization:	
  1632                           ;End of C runtime variable initialization code
  1633                           
  1634  00BE                     __end_of__initialization:	
  1635  00BE  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1636  00BF  0020               	movlb	0
  1637  00C0  3180  28C2         	ljmp	_main	;jump to C main() function
  1638                           
  1639                           	psect	bssCOMMON
  1640  0076                     __pbssCOMMON:	
  1641  0076                     _adc_poti:	
  1642  0076                     	ds	2
  1643  0078                     _c:	
  1644  0078                     	ds	1
  1645  0079                     _timer0_counter:	
  1646  0079                     	ds	1
  1647                           
  1648                           	psect	dataCOMMON
  1649  007A                     __pdataCOMMON:	
  1650  007A                     _pulse_high:	
  1651  007A                     	ds	2
  1652                           
  1653                           	psect	bssBANK0
  1654  0020                     __pbssBANK0:	
  1655  0020                     _adc_sense:	
  1656  0020                     	ds	2
  1657  0022                     _complete:	
  1658  0022                     	ds	1
  1659  0023                     _tx_fifo:	
  1660  0023                     	ds	34
  1661                           
  1662                           	psect	dataBANK0
  1663  005D                     __pdataBANK0:	
  1664  005D                     _pulse_low:	
  1665  005D                     	ds	2
  1666  005F                     _sData:	
  1667  005F                     	ds	2
  1668                           
  1669                           	psect	bssBANK1
  1670  00A0                     __pbssBANK1:	
  1671  00A0                     _rx_fifo:	
  1672  00A0                     	ds	34
  1673                           
  1674                           	psect	clrtext
  1675  0543                     clear_ram0:	
  1676                           ;	Called with FSR0 containing the base address, and
  1677                           ;	WREG with the size to clear
  1678                           
  1679  0543  0064               	clrwdt	;clear the watchdog before getting into this loop
  1680  0544                     clrloop0:	
  1681  0544  0180               	clrf	0	;clear RAM location pointed to by FSR
  1682  0545  3101               	addfsr 0,1
  1683  0546  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1684  0547  2D44               	goto	clrloop0	;have we reached the end yet?
  1685  0548  3400               	retlw	0	;all done for this memory range, return
  1686                           
  1687                           	psect	cstackCOMMON
  1688  0070                     __pcstackCOMMON:	
  1689  0070                     ?_putc:	
  1690  0070                     ??_putc:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_getc:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ??_getc:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_getchar_fifo:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_hex_to_byte:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_LCD_init:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0070                     ?_nibble_to_hex:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0070                     ?_ISR:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0070                     ?_pps_init:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0070                     ?_system_init:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0070                     ?_i2c_init:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0070                     ?_ad_init:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0070                     ?_uart_init:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?_timer0_init:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ?_timer1_init:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_cog_init:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0070                     ?_command_parser:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_main:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_i2c_wait:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_i2c_start:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ?_i2c_stop:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_i2c_write:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_hex_to_nibble:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759                           
  1760                           ; 1 bytes @ 0x0
  1761  0070                     	ds	1
  1762  0071                     putc@c:	
  1763  0071                     getc@tail:	
  1764                           ; 1 bytes @ 0x1
  1765                           
  1766                           
  1767                           ; 1 bytes @ 0x1
  1768  0071                     	ds	1
  1769  0072                     putc@head:	
  1770                           
  1771                           ; 1 bytes @ 0x2
  1772  0072                     	ds	1
  1773  0073                     ??_ISR:	
  1774                           
  1775                           ; 1 bytes @ 0x3
  1776  0073                     	ds	3
  1777                           
  1778                           	psect	cstackBANK0
  1779  0045                     __pcstackBANK0:	
  1780  0045                     ??_getchar_fifo:	
  1781  0045                     ?_putchar_fifo:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0045                     ??_nibble_to_hex:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  0045                     ??_pps_init:	
  1788                           ; 1 bytes @ 0x0
  1789                           
  1790  0045                     ??_system_init:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  0045                     ??_i2c_init:	
  1794                           ; 1 bytes @ 0x0
  1795                           
  1796  0045                     ??_ad_init:	
  1797                           ; 1 bytes @ 0x0
  1798                           
  1799  0045                     ??_uart_init:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0045                     ??_timer0_init:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0045                     ??_timer1_init:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0045                     ??_cog_init:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0045                     ?_delay_ms:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0045                     ??_i2c_wait:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0045                     ??_i2c_start:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0045                     ??_i2c_stop:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0045                     ??_i2c_write:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  0045                     ??_hex_to_nibble:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  0045                     ?___wmul:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0045                     i2c_write@data:	
  1833                           ; 2 bytes @ 0x0
  1834                           
  1835  0045                     putchar_fifo@fifo:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  0045                     hex_to_nibble@c:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841  0045                     delay_ms@ms:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0045                     ___wmul@multiplier:	
  1845                           ; 2 bytes @ 0x0
  1846                           
  1847                           
  1848                           ; 2 bytes @ 0x0
  1849  0045                     	ds	1
  1850  0046                     ??_putchar_fifo:	
  1851  0046                     ?_I2C_PCF8574_Write:	
  1852                           ; 1 bytes @ 0x1
  1853                           
  1854  0046                     I2C_PCF8574_Write@value:	
  1855                           ; 1 bytes @ 0x1
  1856                           
  1857  0046                     nibble_to_hex@c:	
  1858                           ; 1 bytes @ 0x1
  1859                           
  1860                           
  1861                           ; 1 bytes @ 0x1
  1862  0046                     	ds	1
  1863  0047                     ??_delay_ms:	
  1864  0047                     ??_I2C_PCF8574_Write:	
  1865                           ; 1 bytes @ 0x2
  1866                           
  1867  0047                     getchar_fifo@c:	
  1868                           ; 1 bytes @ 0x2
  1869                           
  1870  0047                     nibble_to_hex@nibble:	
  1871                           ; 1 bytes @ 0x2
  1872                           
  1873  0047                     delay_ms@u:	
  1874                           ; 1 bytes @ 0x2
  1875                           
  1876  0047                     ___wmul@multiplicand:	
  1877                           ; 2 bytes @ 0x2
  1878                           
  1879                           
  1880                           ; 2 bytes @ 0x2
  1881  0047                     	ds	1
  1882  0048                     I2C_PCF8574_Write@dummy:	
  1883  0048                     putchar_fifo@c:	
  1884                           ; 1 bytes @ 0x3
  1885                           
  1886  0048                     getchar_fifo@tail:	
  1887                           ; 1 bytes @ 0x3
  1888                           
  1889                           
  1890                           ; 1 bytes @ 0x3
  1891  0048                     	ds	1
  1892  0049                     ??___wmul:	
  1893  0049                     I2C_PCF8574_Write@addr:	
  1894                           ; 1 bytes @ 0x4
  1895                           
  1896  0049                     putchar_fifo@head:	
  1897                           ; 1 bytes @ 0x4
  1898                           
  1899  0049                     getchar_fifo@fifo:	
  1900                           ; 1 bytes @ 0x4
  1901                           
  1902  0049                     ___wmul@product:	
  1903                           ; 1 bytes @ 0x4
  1904                           
  1905                           
  1906                           ; 2 bytes @ 0x4
  1907  0049                     	ds	1
  1908  004A                     ??_hex_to_byte:	
  1909  004A                     I2C_PCF8574_Write@s:	
  1910                           ; 1 bytes @ 0x5
  1911                           
  1912                           
  1913                           ; 1 bytes @ 0x5
  1914  004A                     	ds	1
  1915  004B                     ?_LCD_putcmd:	
  1916  004B                     ?_LCD_putch:	
  1917                           ; 1 bytes @ 0x6
  1918                           
  1919  004B                     LCD_putcmd@data:	
  1920                           ; 1 bytes @ 0x6
  1921                           
  1922  004B                     LCD_putch@data:	
  1923                           ; 1 bytes @ 0x6
  1924                           
  1925                           
  1926                           ; 1 bytes @ 0x6
  1927  004B                     	ds	1
  1928  004C                     ??_LCD_putch:	
  1929  004C                     LCD_putcmd@cmdtype:	
  1930                           ; 1 bytes @ 0x7
  1931                           
  1932  004C                     hex_to_byte@fifo:	
  1933                           ; 1 bytes @ 0x7
  1934                           
  1935                           
  1936                           ; 1 bytes @ 0x7
  1937  004C                     	ds	1
  1938  004D                     ??_LCD_putcmd:	
  1939  004D                     hex_to_byte@c:	
  1940                           ; 1 bytes @ 0x8
  1941                           
  1942                           
  1943                           ; 1 bytes @ 0x8
  1944  004D                     	ds	1
  1945  004E                     LCD_putch@addr:	
  1946  004E                     hex_to_byte@n:	
  1947                           ; 1 bytes @ 0x9
  1948                           
  1949                           
  1950                           ; 1 bytes @ 0x9
  1951  004E                     	ds	1
  1952  004F                     ??_command_parser:	
  1953  004F                     LCD_putcmd@addr:	
  1954                           ; 1 bytes @ 0xA
  1955                           
  1956  004F                     LCD_putch@lcddata:	
  1957                           ; 1 bytes @ 0xA
  1958                           
  1959                           
  1960                           ; 1 bytes @ 0xA
  1961  004F                     	ds	1
  1962  0050                     ?_LCD_puts:	
  1963  0050                     LCD_putcmd@lcddata:	
  1964                           ; 1 bytes @ 0xB
  1965                           
  1966  0050                     LCD_puts@s:	
  1967                           ; 1 bytes @ 0xB
  1968                           
  1969                           
  1970                           ; 2 bytes @ 0xB
  1971  0050                     	ds	1
  1972  0051                     ??_LCD_init:	
  1973  0051                     ?_LCD_goto:	
  1974                           ; 1 bytes @ 0xC
  1975                           
  1976  0051                     command_parser@c:	
  1977                           ; 1 bytes @ 0xC
  1978                           
  1979  0051                     LCD_goto@row:	
  1980                           ; 1 bytes @ 0xC
  1981                           
  1982                           
  1983                           ; 1 bytes @ 0xC
  1984  0051                     	ds	1
  1985  0052                     ??_LCD_puts:	
  1986  0052                     LCD_init@addr:	
  1987                           ; 1 bytes @ 0xD
  1988                           
  1989  0052                     LCD_goto@column:	
  1990                           ; 1 bytes @ 0xD
  1991                           
  1992                           
  1993                           ; 1 bytes @ 0xD
  1994  0052                     	ds	1
  1995  0053                     ??_LCD_goto:	
  1996  0053                     LCD_puts@i:	
  1997                           ; 1 bytes @ 0xE
  1998                           
  1999                           
  2000                           ; 2 bytes @ 0xE
  2001  0053                     	ds	1
  2002  0054                     LCD_goto@addr:	
  2003                           
  2004                           ; 1 bytes @ 0xF
  2005  0054                     	ds	1
  2006  0055                     LCD_puts@addr:	
  2007                           
  2008                           ; 1 bytes @ 0x10
  2009  0055                     	ds	1
  2010  0056                     ??_main:	
  2011                           
  2012                           ; 1 bytes @ 0x11
  2013  0056                     	ds	2
  2014  0058                     main@ad_value:	
  2015                           
  2016                           ; 2 bytes @ 0x13
  2017  0058                     	ds	2
  2018  005A                     main@c:	
  2019                           
  2020                           ; 1 bytes @ 0x15
  2021  005A                     	ds	1
  2022  005B                     main@counter:	
  2023                           
  2024                           ; 1 bytes @ 0x16
  2025  005B                     	ds	1
  2026  005C                     main@temp:	
  2027                           
  2028                           ; 1 bytes @ 0x17
  2029  005C                     	ds	1
  2030                           
  2031                           	psect	maintext
  2032  00C2                     __pmaintext:	
  2033 ;;
  2034 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2035 ;;
  2036 ;; *************** function _main *****************
  2037 ;; Defined at:
  2038 ;;		line 332 in file "main.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  ad_value        2   19[BANK0 ] unsigned int 
  2043 ;;  temp            1   23[BANK0 ] unsigned char 
  2044 ;;  counter         1   22[BANK0 ] unsigned char 
  2045 ;;  c               1   21[BANK0 ] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : B1F/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2056 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2058 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2059 ;;Total ram usage:        7 bytes
  2060 ;; Hardware stack levels required when called:    7
  2061 ;; This function calls:
  2062 ;;		_LCD_goto
  2063 ;;		_LCD_init
  2064 ;;		_LCD_putch
  2065 ;;		_LCD_putcmd
  2066 ;;		_LCD_puts
  2067 ;;		___wmul
  2068 ;;		_ad_init
  2069 ;;		_cog_init
  2070 ;;		_command_parser
  2071 ;;		_delay_ms
  2072 ;;		_getchar_fifo
  2073 ;;		_i2c_init
  2074 ;;		_nibble_to_hex
  2075 ;;		_pps_init
  2076 ;;		_putchar_fifo
  2077 ;;		_system_init
  2078 ;;		_timer0_init
  2079 ;;		_timer1_init
  2080 ;;		_uart_init
  2081 ;; This function is called by:
  2082 ;;		Startup code after reset
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function _main
  2088  00C2                     _main:	
  2089                           
  2090                           ;main.c: 333: uint8_t counter = 0;
  2091                           
  2092                           ;incstack = 0
  2093                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2094  00C2  0020               	movlb	0	; select bank0
  2095  00C3  01DB               	clrf	main@counter
  2096                           
  2097                           ;main.c: 334: uint8_t temp, c;
  2098                           ;main.c: 335: uint16_t ad_value;
  2099                           ;main.c: 337: pps_init();
  2100  00C4  3183  23D4  3180   	fcall	_pps_init
  2101                           
  2102                           ;main.c: 338: system_init();
  2103  00C7  3183  23AC  3180   	fcall	_system_init
  2104                           
  2105                           ;main.c: 339: uart_init();
  2106  00CA  3184  24FF  3180   	fcall	_uart_init
  2107                           
  2108                           ;main.c: 340: i2c_init();
  2109  00CD  3185  251D  3180   	fcall	_i2c_init
  2110                           
  2111                           ;main.c: 341: ad_init();
  2112  00D0  3185  253A  3180   	fcall	_ad_init
  2113                           
  2114                           ;main.c: 342: timer0_init();
  2115  00D3  3185  2531  3180   	fcall	_timer0_init
  2116                           
  2117                           ;main.c: 343: timer1_init();
  2118  00D6  3184  24EF  3180   	fcall	_timer1_init
  2119                           
  2120                           ;main.c: 344: cog_init();
  2121  00D9  3184  24C8  3180   	fcall	_cog_init
  2122                           
  2123                           ;main.c: 347: tx_fifo.head = 0;
  2124  00DC  0020               	movlb	0	; select bank0
  2125  00DD  01A3               	clrf	_tx_fifo
  2126                           
  2127                           ;main.c: 348: tx_fifo.tail = 0;
  2128  00DE  01A4               	clrf	_tx_fifo+1
  2129                           
  2130                           ;main.c: 349: rx_fifo.head = 0;
  2131  00DF  0021               	movlb	1	; select bank1
  2132  00E0  01A0               	clrf	_rx_fifo^(0+128)
  2133                           
  2134                           ;main.c: 350: rx_fifo.tail = 0;
  2135  00E1  01A1               	clrf	(_rx_fifo^(0+128)+1)
  2136                           
  2137                           ;main.c: 352: LATB4 = 1;
  2138  00E2  0022               	movlb	2	; select bank2
  2139  00E3  160D               	bsf	13,4	;volatile
  2140                           
  2141                           ;main.c: 353: GIE = 1;
  2142  00E4  178B               	bsf	11,7	;volatile
  2143                           
  2144                           ;main.c: 354: LCD_init(0x27);
  2145  00E5  3027               	movlw	39
  2146  00E6  3181  2178  3180   	fcall	_LCD_init
  2147  00E9                     l2456:	
  2148                           ;main.c: 356: while (1) {
  2149                           
  2150                           
  2151                           ;main.c: 358: if (complete) {
  2152  00E9  0020               	movlb	0	; select bank0
  2153  00EA  0822               	movf	_complete,w	;volatile
  2154  00EB  1903               	btfsc	3,2
  2155  00EC  2908               	goto	l2464
  2156                           
  2157                           ;main.c: 359: complete = 0;
  2158  00ED  01A2               	clrf	_complete	;volatile
  2159                           
  2160                           ;main.c: 360: command_parser();
  2161  00EE  3181  21E6  3180   	fcall	_command_parser
  2162  00F1                     l324:	
  2163                           ;main.c: 361: while ((c = getchar_fifo(&rx_fifo)) != 0)
  2164                           
  2165  00F1  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  2166  00F2  3183  2355  3180   	fcall	_getchar_fifo
  2167  00F5  0020               	movlb	0	; select bank0
  2168  00F6  00D6               	movwf	??_main
  2169  00F7  0856               	movf	??_main,w
  2170  00F8  00DA               	movwf	main@c
  2171  00F9  085A               	movf	main@c,w
  2172  00FA  1903               	btfsc	3,2
  2173  00FB  2906               	goto	l326
  2174                           
  2175                           ;main.c: 362: putchar_fifo(c, &tx_fifo);
  2176  00FC  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  2177  00FD  0020               	movlb	0	; select bank0
  2178  00FE  00D6               	movwf	??_main
  2179  00FF  0856               	movf	??_main,w
  2180  0100  00C5               	movwf	putchar_fifo@fifo
  2181  0101  085A               	movf	main@c,w
  2182  0102  3183  2381  3180   	fcall	_putchar_fifo
  2183  0105  28F1               	goto	l324
  2184  0106                     l326:	
  2185                           
  2186                           ;main.c: 363: TXIE = 1;
  2187  0106  0021               	movlb	1	; select bank1
  2188  0107  1611               	bsf	17,4	;volatile
  2189  0108                     l2464:	
  2190                           
  2191                           ;main.c: 364: }
  2192                           ;main.c: 366: if (counter == 0) {
  2193  0108  0020               	movlb	0	; select bank0
  2194  0109  085B               	movf	main@counter,w
  2195  010A  1D03               	btfss	3,2
  2196  010B  296A               	goto	l2488
  2197                           
  2198                           ;main.c: 369: GIE = 1;
  2199  010C  178B               	bsf	11,7	;volatile
  2200                           
  2201                           ;main.c: 370: ad_value = adc_sense * 14;
  2202  010D  0821               	movf	_adc_sense+1,w	;volatile
  2203  010E  00C6               	movwf	___wmul@multiplier+1
  2204  010F  0820               	movf	_adc_sense,w	;volatile
  2205  0110  00C5               	movwf	___wmul@multiplier
  2206  0111  300E               	movlw	14
  2207  0112  00C7               	movwf	___wmul@multiplicand
  2208  0113  3000               	movlw	0
  2209  0114  00C8               	movwf	___wmul@multiplicand+1
  2210  0115  3184  2476  3180   	fcall	___wmul
  2211  0118  0020               	movlb	0	; select bank0
  2212  0119  0846               	movf	?___wmul+1,w
  2213  011A  00D9               	movwf	main@ad_value+1
  2214  011B  0845               	movf	?___wmul,w
  2215  011C  00D8               	movwf	main@ad_value
  2216                           
  2217                           ;main.c: 371: temp = adc_poti;
  2218  011D  0876               	movf	_adc_poti,w	;volatile
  2219  011E  00D6               	movwf	??_main
  2220  011F  0856               	movf	??_main,w
  2221  0120  00DC               	movwf	main@temp
  2222                           
  2223                           ;main.c: 372: GIE = 1;
  2224  0121  178B               	bsf	11,7	;volatile
  2225                           
  2226                           ;main.c: 373: LCD_putcmd(0x27, 0x01, 1);
  2227  0122  01CB               	clrf	LCD_putcmd@data
  2228  0123  0ACB               	incf	LCD_putcmd@data,f
  2229  0124  01CC               	clrf	LCD_putcmd@cmdtype
  2230  0125  0ACC               	incf	LCD_putcmd@cmdtype,f
  2231  0126  3027               	movlw	39
  2232  0127  3182  22A0  3180   	fcall	_LCD_putcmd
  2233                           
  2234                           ;main.c: 374: LCD_puts(0x27, "Booster Max=8.0A\0");
  2235  012A  3024               	movlw	low (STR_1| (0+32768))
  2236  012B  0020               	movlb	0	; select bank0
  2237  012C  00D0               	movwf	LCD_puts@s
  2238  012D  3090               	movlw	high (STR_1| (0+32768))
  2239  012E  00D1               	movwf	LCD_puts@s+1
  2240  012F  3027               	movlw	39
  2241  0130  3184  243C  3180   	fcall	_LCD_puts
  2242                           
  2243                           ;main.c: 375: LCD_goto(0x27, 2, 1);
  2244  0133  3002               	movlw	2
  2245  0134  0020               	movlb	0	; select bank0
  2246  0135  00D6               	movwf	??_main
  2247  0136  0856               	movf	??_main,w
  2248  0137  00D1               	movwf	LCD_goto@row
  2249  0138  01D2               	clrf	LCD_goto@column
  2250  0139  0AD2               	incf	LCD_goto@column,f
  2251  013A  3027               	movlw	39
  2252  013B  3182  2252  3180   	fcall	_LCD_goto
  2253                           
  2254                           ;main.c: 376: LCD_putch(0x27, nibble_to_hex(temp >> 4));
  2255  013E  0020               	movlb	0	; select bank0
  2256  013F  085C               	movf	main@temp,w
  2257  0140  00D6               	movwf	??_main
  2258  0141  3004               	movlw	4
  2259  0142                     u1355:	
  2260  0142  36D6               	lsrf	??_main,f
  2261  0143  0B89               	decfsz	9,f
  2262  0144  2942               	goto	u1355
  2263  0145  0856               	movf	??_main,w
  2264  0146  3184  24DD  3180   	fcall	_nibble_to_hex
  2265  0149  0020               	movlb	0	; select bank0
  2266  014A  00D7               	movwf	??_main+1
  2267  014B  0857               	movf	??_main+1,w
  2268  014C  00CB               	movwf	LCD_putch@data
  2269  014D  3027               	movlw	39
  2270  014E  3182  22E7  3180   	fcall	_LCD_putch
  2271                           
  2272                           ;main.c: 377: LCD_putch(0x27, nibble_to_hex(temp));
  2273  0151  0020               	movlb	0	; select bank0
  2274  0152  085C               	movf	main@temp,w
  2275  0153  3184  24DD  3180   	fcall	_nibble_to_hex
  2276  0156  0020               	movlb	0	; select bank0
  2277  0157  00D6               	movwf	??_main
  2278  0158  0856               	movf	??_main,w
  2279  0159  00CB               	movwf	LCD_putch@data
  2280  015A  3027               	movlw	39
  2281  015B  3182  22E7  3180   	fcall	_LCD_putch
  2282                           
  2283                           ;main.c: 378: LCD_puts(0x27, "  On      0.0%\0");
  2284  015E  3036               	movlw	low (STR_2| (0+32768))
  2285  015F  0020               	movlb	0	; select bank0
  2286  0160  00D0               	movwf	LCD_puts@s
  2287  0161  3090               	movlw	high (STR_2| (0+32768))
  2288  0162  00D1               	movwf	LCD_puts@s+1
  2289  0163  3027               	movlw	39
  2290  0164  3184  243C  3180   	fcall	_LCD_puts
  2291                           
  2292                           ;main.c: 382: LATC5 ^= 1;
  2293  0167  0022               	movlb	2	; select bank2
  2294  0168  3020               	movlw	32
  2295  0169  068E               	xorwf	14,f
  2296  016A                     l2488:	
  2297                           
  2298                           ;main.c: 383: }
  2299                           ;main.c: 384: delay_ms(4);
  2300  016A  3004               	movlw	4
  2301  016B  0020               	movlb	0	; select bank0
  2302  016C  00C5               	movwf	delay_ms@ms
  2303  016D  3000               	movlw	0
  2304  016E  00C6               	movwf	delay_ms@ms+1
  2305  016F  3184  24AD  3180   	fcall	_delay_ms
  2306                           
  2307                           ;main.c: 386: counter++;
  2308  0172  3001               	movlw	1
  2309  0173  0020               	movlb	0	; select bank0
  2310  0174  00D6               	movwf	??_main
  2311  0175  0856               	movf	??_main,w
  2312  0176  07DB               	addwf	main@counter,f
  2313  0177  28E9               	goto	l2456
  2314  0178                     __end_of_main:	
  2315                           
  2316                           	psect	text1
  2317  04FF                     __ptext1:	
  2318 ;; *************** function _uart_init *****************
  2319 ;; Defined at:
  2320 ;;		line 191 in file "main.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2338 ;;Total ram usage:        0 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    2
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _uart_init
  2350  04FF                     _uart_init:	
  2351                           
  2352                           ;main.c: 192: TX9 = 1;
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _uart_init: [wreg]
  2356  04FF  0023               	movlb	3	; select bank3
  2357  0500  171E               	bsf	30,6	;volatile
  2358                           
  2359                           ;main.c: 193: TX9D = 1;
  2360  0501  141E               	bsf	30,0	;volatile
  2361                           
  2362                           ;main.c: 194: TXEN = 1;
  2363  0502  169E               	bsf	30,5	;volatile
  2364                           
  2365                           ;main.c: 195: SYNC = 0;
  2366  0503  121E               	bcf	30,4	;volatile
  2367                           
  2368                           ;main.c: 196: BRGH = 1;
  2369  0504  151E               	bsf	30,2	;volatile
  2370                           
  2371                           ;main.c: 197: SPEN = 1;
  2372  0505  179D               	bsf	29,7	;volatile
  2373                           
  2374                           ;main.c: 198: RX9 = 0;
  2375  0506  131D               	bcf	29,6	;volatile
  2376                           
  2377                           ;main.c: 199: CREN = 1;
  2378  0507  161D               	bsf	29,4	;volatile
  2379                           
  2380                           ;main.c: 200: BRG16 = 0;
  2381  0508  119F               	bcf	31,3	;volatile
  2382                           
  2383                           ;main.c: 201: SPBRG = ( (((32000000 / 115200) / 8) - 1) / 2 );
  2384  0509  3010               	movlw	16
  2385  050A  009B               	movwf	27	;volatile
  2386                           
  2387                           ;main.c: 202: RCIE = 1;
  2388  050B  0021               	movlb	1	; select bank1
  2389  050C  1691               	bsf	17,5	;volatile
  2390  050D  0008               	return
  2391  050E                     __end_of_uart_init:	
  2392                           
  2393                           	psect	text2
  2394  04EF                     __ptext2:	
  2395 ;; *************** function _timer1_init *****************
  2396 ;; Defined at:
  2397 ;;		line 213 in file "main.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    2
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _timer1_init
  2427  04EF                     _timer1_init:	
  2428                           
  2429                           ;main.c: 214: T1CON = 0b00110001;
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _timer1_init: [wreg+status,2]
  2433  04EF  3031               	movlw	49
  2434  04F0  0020               	movlb	0	; select bank0
  2435  04F1  0098               	movwf	24	;volatile
  2436                           
  2437                           ;main.c: 218: TMR1GE = 0;
  2438  04F2  1399               	bcf	25,7	;volatile
  2439                           
  2440                           ;main.c: 219: TMR1H = 0;
  2441  04F3  0197               	clrf	23	;volatile
  2442                           
  2443                           ;main.c: 220: TMR1L = 0;
  2444  04F4  0196               	clrf	22	;volatile
  2445                           
  2446                           ;main.c: 221: CCP1CON = 0b00001000;
  2447  04F5  3008               	movlw	8
  2448  04F6  0025               	movlb	5	; select bank5
  2449  04F7  0093               	movwf	19	;volatile
  2450                           
  2451                           ;main.c: 224: CCPR1H = 0xFF;
  2452  04F8  30FF               	movlw	255
  2453  04F9  0092               	movwf	18	;volatile
  2454                           
  2455                           ;main.c: 225: CCPR1L = 0xFF;
  2456  04FA  30FF               	movlw	255
  2457  04FB  0091               	movwf	17	;volatile
  2458                           
  2459                           ;main.c: 227: CCP1IE = 1;
  2460  04FC  0021               	movlb	1	; select bank1
  2461  04FD  1511               	bsf	17,2	;volatile
  2462  04FE  0008               	return
  2463  04FF                     __end_of_timer1_init:	
  2464                           
  2465                           	psect	text3
  2466  0531                     __ptext3:	
  2467 ;; *************** function _timer0_init *****************
  2468 ;; Defined at:
  2469 ;;		line 205 in file "main.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;		None
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  1    wreg      void 
  2476 ;; Registers used:
  2477 ;;		wreg
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2487 ;;Total ram usage:        0 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    2
  2490 ;; This function calls:
  2491 ;;		Nothing
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _timer0_init
  2499  0531                     _timer0_init:	
  2500                           
  2501                           ;main.c: 206: TMR0CS = 0;
  2502                           
  2503                           ;incstack = 0
  2504                           ; Regs used in _timer0_init: [wreg]
  2505  0531  0021               	movlb	1	; select bank1
  2506  0532  1295               	bcf	21,5	;volatile
  2507                           
  2508                           ;main.c: 207: PSA = 0;
  2509  0533  1195               	bcf	21,3	;volatile
  2510                           
  2511                           ;main.c: 208: PS1 = 1;
  2512  0534  1495               	bsf	21,1	;volatile
  2513                           
  2514                           ;main.c: 209: TMR0 = (255 - (250-1));
  2515  0535  3006               	movlw	6
  2516  0536  0020               	movlb	0	; select bank0
  2517  0537  0095               	movwf	21	;volatile
  2518                           
  2519                           ;main.c: 210: TMR0IE = 1;
  2520  0538  168B               	bsf	11,5	;volatile
  2521  0539  0008               	return
  2522  053A                     __end_of_timer0_init:	
  2523                           
  2524                           	psect	text4
  2525  03AC                     __ptext4:	
  2526 ;; *************** function _system_init *****************
  2527 ;; Defined at:
  2528 ;;		line 125 in file "main.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2546 ;;Total ram usage:        0 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    2
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_main
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           
  2557                           ;psect for function _system_init
  2558  03AC                     _system_init:	
  2559                           
  2560                           ;main.c: 127: OSCCON = 0b11110000;
  2561                           
  2562                           ;incstack = 0
  2563                           ; Regs used in _system_init: [wreg+status,2]
  2564  03AC  30F0               	movlw	240
  2565  03AD  0021               	movlb	1	; select bank1
  2566  03AE  0099               	movwf	25	;volatile
  2567                           
  2568                           ;main.c: 131: ANSELA = 0;
  2569  03AF  0023               	movlb	3	; select bank3
  2570  03B0  018C               	clrf	12	;volatile
  2571                           
  2572                           ;main.c: 132: ANSELB = 0;
  2573  03B1  018D               	clrf	13	;volatile
  2574                           
  2575                           ;main.c: 133: ANSELC = 0;
  2576  03B2  018E               	clrf	14	;volatile
  2577                           
  2578                           ;main.c: 134: ADCON0 = 0;
  2579  03B3  0021               	movlb	1	; select bank1
  2580  03B4  019D               	clrf	29	;volatile
  2581                           
  2582                           ;main.c: 135: ADCON1 = 0;
  2583  03B5  019E               	clrf	30	;volatile
  2584                           
  2585                           ;main.c: 136: ADCON2 = 0;
  2586  03B6  019F               	clrf	31	;volatile
  2587                           
  2588                           ;main.c: 137: CM1CON0 = 0;
  2589  03B7  0022               	movlb	2	; select bank2
  2590  03B8  0191               	clrf	17	;volatile
  2591                           
  2592                           ;main.c: 138: CM1CON1 = 0;
  2593  03B9  0192               	clrf	18	;volatile
  2594                           
  2595                           ;main.c: 139: CM2CON0 = 0;
  2596  03BA  0193               	clrf	19	;volatile
  2597                           
  2598                           ;main.c: 140: CM2CON1 = 0;
  2599  03BB  0194               	clrf	20	;volatile
  2600                           
  2601                           ;main.c: 143: TRISA0 = 0;
  2602  03BC  0021               	movlb	1	; select bank1
  2603  03BD  100C               	bcf	12,0	;volatile
  2604                           
  2605                           ;main.c: 145: TRISA4 = 1;
  2606  03BE  160C               	bsf	12,4	;volatile
  2607                           
  2608                           ;main.c: 146: TRISA5 = 1;
  2609  03BF  168C               	bsf	12,5	;volatile
  2610                           
  2611                           ;main.c: 147: TRISC0 = 0;
  2612  03C0  100E               	bcf	14,0	;volatile
  2613                           
  2614                           ;main.c: 149: TRISC1 = 1;
  2615  03C1  148E               	bsf	14,1	;volatile
  2616                           
  2617                           ;main.c: 150: TRISC2 = 0;
  2618  03C2  110E               	bcf	14,2	;volatile
  2619                           
  2620                           ;main.c: 152: TRISA2 = 1;
  2621  03C3  150C               	bsf	12,2	;volatile
  2622                           
  2623                           ;main.c: 153: TRISB5 = 0;
  2624  03C4  128D               	bcf	13,5	;volatile
  2625                           
  2626                           ;main.c: 154: TRISB6 = 0;
  2627  03C5  130D               	bcf	13,6	;volatile
  2628                           
  2629                           ;main.c: 155: TRISC0 = 1;
  2630  03C6  140E               	bsf	14,0	;volatile
  2631                           
  2632                           ;main.c: 156: TRISC3 = 0;
  2633  03C7  118E               	bcf	14,3	;volatile
  2634                           
  2635                           ;main.c: 157: TRISC4 = 0;
  2636  03C8  120E               	bcf	14,4	;volatile
  2637                           
  2638                           ;main.c: 158: TRISB4 = 0;
  2639  03C9  120D               	bcf	13,4	;volatile
  2640                           
  2641                           ;main.c: 159: TRISC5 = 0;
  2642  03CA  128E               	bcf	14,5	;volatile
  2643                           
  2644                           ;main.c: 162: SSP1IF = 0;
  2645  03CB  0020               	movlb	0	; select bank0
  2646  03CC  1191               	bcf	17,3	;volatile
  2647                           
  2648                           ;main.c: 163: TMR1IF = 0;
  2649  03CD  1011               	bcf	17,0	;volatile
  2650                           
  2651                           ;main.c: 164: CCP1IF = 0;
  2652  03CE  1111               	bcf	17,2	;volatile
  2653                           
  2654                           ;main.c: 166: CCP1IE = 1;
  2655  03CF  0021               	movlb	1	; select bank1
  2656  03D0  1511               	bsf	17,2	;volatile
  2657                           
  2658                           ;main.c: 167: PEIE = 1;
  2659  03D1  170B               	bsf	11,6	;volatile
  2660                           
  2661                           ;main.c: 168: GIE = 1;
  2662  03D2  178B               	bsf	11,7	;volatile
  2663  03D3  0008               	return
  2664  03D4                     __end_of_system_init:	
  2665                           
  2666                           	psect	text5
  2667  03D4                     __ptext5:	
  2668 ;; *************** function _pps_init *****************
  2669 ;; Defined at:
  2670 ;;		line 100 in file "main.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2688 ;;Total ram usage:        0 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    2
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _pps_init
  2700  03D4                     _pps_init:	
  2701                           
  2702                           ;main.c: 101: PPSLOCK = 0x55;
  2703                           
  2704                           ;incstack = 0
  2705                           ; Regs used in _pps_init: [wreg+status,2]
  2706  03D4  3055               	movlw	85
  2707  03D5  003C               	movlb	28	; select bank28
  2708  03D6  008F               	movwf	15	;volatile
  2709                           
  2710                           ;main.c: 102: PPSLOCK = 0xaa;
  2711  03D7  30AA               	movlw	170
  2712  03D8  008F               	movwf	15	;volatile
  2713                           
  2714                           ;main.c: 103: PPSLOCK = 0;
  2715  03D9  018F               	clrf	15	;volatile
  2716                           
  2717                           ;main.c: 105: SSPCLKPPS = 0x05;
  2718  03DA  3005               	movlw	5
  2719  03DB  00A0               	movwf	32	;volatile
  2720                           
  2721                           ;main.c: 106: RA5PPS = 0b10000;
  2722  03DC  3010               	movlw	16
  2723  03DD  003D               	movlb	29	; select bank29
  2724  03DE  0095               	movwf	21	;volatile
  2725                           
  2726                           ;main.c: 107: SSPDATPPS = 0x04;
  2727  03DF  3004               	movlw	4
  2728  03E0  003C               	movlb	28	; select bank28
  2729  03E1  00A1               	movwf	33	;volatile
  2730                           
  2731                           ;main.c: 108: RA4PPS = 0b10001;
  2732  03E2  3011               	movlw	17
  2733  03E3  003D               	movlb	29	; select bank29
  2734  03E4  0094               	movwf	20	;volatile
  2735                           
  2736                           ;main.c: 110: RXPPS = 0b10001;
  2737  03E5  3011               	movlw	17
  2738  03E6  003C               	movlb	28	; select bank28
  2739  03E7  00A4               	movwf	36	;volatile
  2740                           
  2741                           ;main.c: 111: RC2PPS = 0b10100;
  2742  03E8  3014               	movlw	20
  2743  03E9  003D               	movlb	29	; select bank29
  2744  03EA  00A2               	movwf	34	;volatile
  2745                           
  2746                           ;main.c: 116: RC4PPS = 0b01100;
  2747  03EB  300C               	movlw	12
  2748  03EC  00A4               	movwf	36	;volatile
  2749                           
  2750                           ;main.c: 117: RB5PPS = 0b01001;
  2751  03ED  3009               	movlw	9
  2752  03EE  009D               	movwf	29	;volatile
  2753                           
  2754                           ;main.c: 118: RB6PPS = 0b01000;
  2755  03EF  3008               	movlw	8
  2756  03F0  009E               	movwf	30	;volatile
  2757                           
  2758                           ;main.c: 120: PPSLOCK = 0x55;
  2759  03F1  3055               	movlw	85
  2760  03F2  003C               	movlb	28	; select bank28
  2761  03F3  008F               	movwf	15	;volatile
  2762                           
  2763                           ;main.c: 121: PPSLOCK = 0xaa;
  2764  03F4  30AA               	movlw	170
  2765  03F5  008F               	movwf	15	;volatile
  2766                           
  2767                           ;main.c: 122: PPSLOCK = 1;
  2768  03F6  3001               	movlw	1
  2769  03F7  008F               	movwf	15	;volatile
  2770  03F8  0008               	return
  2771  03F9                     __end_of_pps_init:	
  2772                           
  2773                           	psect	text6
  2774  04DD                     __ptext6:	
  2775 ;; *************** function _nibble_to_hex *****************
  2776 ;; Defined at:
  2777 ;;		line 14 in file "utils.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  c               1    wreg     unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  c               1    1[BANK0 ] unsigned char 
  2782 ;;  nibble          1    2[BANK0 ] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      unsigned char 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;Total ram usage:        3 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    2
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _nibble_to_hex
  2808  04DD                     _nibble_to_hex:	
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _nibble_to_hex: [wreg+status,2+status,0]
  2812                           ;nibble_to_hex@c stored from wreg
  2813  04DD  0020               	movlb	0	; select bank0
  2814  04DE  00C6               	movwf	nibble_to_hex@c
  2815                           
  2816                           ;utils.c: 15: char nibble;
  2817                           ;utils.c: 16: nibble = (c & 0x0f) + '0';
  2818  04DF  0846               	movf	nibble_to_hex@c,w
  2819  04E0  390F               	andlw	15
  2820  04E1  3E30               	addlw	48
  2821  04E2  00C5               	movwf	??_nibble_to_hex
  2822  04E3  0845               	movf	??_nibble_to_hex,w
  2823  04E4  00C7               	movwf	nibble_to_hex@nibble
  2824                           
  2825                           ;utils.c: 17: if (nibble >= 0x3a)
  2826  04E5  303A               	movlw	58
  2827  04E6  0247               	subwf	nibble_to_hex@nibble,w
  2828  04E7  1C03               	skipc
  2829  04E8  2CED               	goto	l2404
  2830                           
  2831                           ;utils.c: 18: nibble += 7;
  2832  04E9  3007               	movlw	7
  2833  04EA  00C5               	movwf	??_nibble_to_hex
  2834  04EB  0845               	movf	??_nibble_to_hex,w
  2835  04EC  07C7               	addwf	nibble_to_hex@nibble,f
  2836  04ED                     l2404:	
  2837                           
  2838                           ;utils.c: 19: return (nibble);
  2839  04ED  0847               	movf	nibble_to_hex@nibble,w
  2840  04EE  0008               	return
  2841  04EF                     __end_of_nibble_to_hex:	
  2842                           
  2843                           	psect	text7
  2844  051D                     __ptext7:	
  2845 ;; *************** function _i2c_init *****************
  2846 ;; Defined at:
  2847 ;;		line 171 in file "main.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2865 ;;Total ram usage:        0 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    2
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           
  2876                           ;psect for function _i2c_init
  2877  051D                     _i2c_init:	
  2878                           
  2879                           ;main.c: 173: SSP1CON1 = 0b00101000;
  2880                           
  2881                           ;incstack = 0
  2882                           ; Regs used in _i2c_init: [wreg+status,2]
  2883  051D  3028               	movlw	40
  2884  051E  0024               	movlb	4	; select bank4
  2885  051F  0095               	movwf	21	;volatile
  2886                           
  2887                           ;main.c: 174: SSP1CON2 = 0x00;
  2888  0520  0196               	clrf	22	;volatile
  2889                           
  2890                           ;main.c: 175: SSP1CON3 = 0x00;
  2891  0521  0197               	clrf	23	;volatile
  2892                           
  2893                           ;main.c: 178: SSP1ADD = ( (((32000000 / 100000) / 2) - 1) / 2);
  2894  0522  304F               	movlw	79
  2895  0523  0092               	movwf	18	;volatile
  2896                           
  2897                           ;main.c: 180: SSP1STAT = 0b11000000;
  2898  0524  30C0               	movlw	192
  2899  0525  0094               	movwf	20	;volatile
  2900  0526  0008               	return
  2901  0527                     __end_of_i2c_init:	
  2902                           
  2903                           	psect	text8
  2904  01E6                     __ptext8:	
  2905 ;; *************** function _command_parser *****************
  2906 ;; Defined at:
  2907 ;;		line 297 in file "main.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  c               1   12[BANK0 ] unsigned char 
  2912 ;;  tmp             1    0        unsigned char 
  2913 ;;  cn              1    0        unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2927 ;;Total ram usage:        3 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    4
  2930 ;; This function calls:
  2931 ;;		_getchar_fifo
  2932 ;;		_hex_to_byte
  2933 ;;		_putchar_fifo
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _command_parser
  2941  01E6                     _command_parser:	
  2942                           
  2943                           ;main.c: 298: char c, cn;
  2944                           ;main.c: 299: uint8_t tmp;
  2945                           ;main.c: 301: if (c = getchar_fifo(&rx_fifo)) {
  2946                           
  2947                           ;incstack = 0
  2948                           ; Regs used in _command_parser: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2949  01E6  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  2950  01E7  3183  2355  3181   	fcall	_getchar_fifo
  2951  01EA  0020               	movlb	0	; select bank0
  2952  01EB  00CF               	movwf	??_command_parser
  2953  01EC  084F               	movf	??_command_parser,w
  2954  01ED  00D1               	movwf	command_parser@c
  2955  01EE  0851               	movf	command_parser@c,w
  2956  01EF  1903               	btfsc	3,2
  2957  01F0  0008               	return
  2958  01F1  2A3A               	goto	l2366
  2959  01F2                     l2344:	
  2960                           ;main.c: 303: case 'F':
  2961                           
  2962                           ;main.c: 302: switch (c) {
  2963                           
  2964                           
  2965                           ;main.c: 304: putchar_fifo('*', &tx_fifo);
  2966  01F2  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  2967  01F3  00CF               	movwf	??_command_parser
  2968  01F4  084F               	movf	??_command_parser,w
  2969  01F5  00C5               	movwf	putchar_fifo@fifo
  2970  01F6  302A               	movlw	42
  2971  01F7  3183  2381  3181   	fcall	_putchar_fifo
  2972                           
  2973                           ;main.c: 305: pulse_high = 13;
  2974  01FA  300D               	movlw	13
  2975  01FB  00FA               	movwf	_pulse_high	;volatile
  2976  01FC  3000               	movlw	0
  2977  01FD  00FB               	movwf	_pulse_high+1	;volatile
  2978                           
  2979                           ;main.c: 306: pulse_low = 13;
  2980  01FE  300D               	movlw	13
  2981  01FF  2A17               	goto	L2
  2982  0200                     l2350:	
  2983                           ;main.c: 308: case 'M':
  2984                           
  2985                           ;main.c: 307: break;
  2986                           
  2987                           
  2988                           ;main.c: 309: putchar_fifo('*', &tx_fifo);
  2989  0200  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  2990  0201  00CF               	movwf	??_command_parser
  2991  0202  084F               	movf	??_command_parser,w
  2992  0203  00C5               	movwf	putchar_fifo@fifo
  2993  0204  302A               	movlw	42
  2994  0205  3183  2381  3181   	fcall	_putchar_fifo
  2995                           
  2996                           ;main.c: 310: pulse_high = 13;
  2997  0208  300D               	movlw	13
  2998  0209  2A13               	goto	L4
  2999  020A                     l2356:	
  3000                           ;main.c: 313: case 'S':
  3001                           
  3002                           ;main.c: 312: break;
  3003                           
  3004                           ;main.c: 311: pulse_low = 26;
  3005                           
  3006                           
  3007                           ;main.c: 314: putchar_fifo('*', &tx_fifo);
  3008  020A  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  3009  020B  00CF               	movwf	??_command_parser
  3010  020C  084F               	movf	??_command_parser,w
  3011  020D  00C5               	movwf	putchar_fifo@fifo
  3012  020E  302A               	movlw	42
  3013  020F  3183  2381  3181   	fcall	_putchar_fifo
  3014                           
  3015                           ;main.c: 315: pulse_high = 26;
  3016  0212  301A               	movlw	26
  3017  0213                     L4:	
  3018  0213  00FA               	movwf	_pulse_high	;volatile
  3019  0214  3000               	movlw	0
  3020  0215  00FB               	movwf	_pulse_high+1	;volatile
  3021                           
  3022                           ;main.c: 316: pulse_low = 26;
  3023  0216  301A               	movlw	26
  3024  0217                     L2:	
  3025  0217  0020               	movlb	0	; select bank0
  3026  0218  00DD               	movwf	_pulse_low	;volatile
  3027  0219  3000               	movlw	0
  3028  021A  2A38               	goto	L3
  3029  021B                     l2362:	
  3030                           ;main.c: 318: case 'T':
  3031                           
  3032                           ;main.c: 317: break;
  3033                           
  3034                           
  3035                           ;main.c: 319: putchar_fifo('*', &tx_fifo);
  3036  021B  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  3037  021C  00CF               	movwf	??_command_parser
  3038  021D  084F               	movf	??_command_parser,w
  3039  021E  00C5               	movwf	putchar_fifo@fifo
  3040  021F  302A               	movlw	42
  3041  0220  3183  2381  3181   	fcall	_putchar_fifo
  3042                           
  3043                           ;main.c: 320: pulse_high = hex_to_byte(&rx_fifo);
  3044  0223  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  3045  0224  3183  2323  3181   	fcall	_hex_to_byte
  3046  0227  0020               	movlb	0	; select bank0
  3047  0228  00CF               	movwf	??_command_parser
  3048  0229  01D0               	clrf	??_command_parser+1
  3049  022A  084F               	movf	??_command_parser,w
  3050  022B  00FA               	movwf	_pulse_high	;volatile
  3051  022C  0850               	movf	??_command_parser+1,w
  3052  022D  00FB               	movwf	_pulse_high+1	;volatile
  3053                           
  3054                           ;main.c: 321: pulse_low = hex_to_byte(&rx_fifo);
  3055  022E  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  3056  022F  3183  2323  3181   	fcall	_hex_to_byte
  3057  0232  0020               	movlb	0	; select bank0
  3058  0233  00CF               	movwf	??_command_parser
  3059  0234  01D0               	clrf	??_command_parser+1
  3060  0235  084F               	movf	??_command_parser,w
  3061  0236  00DD               	movwf	_pulse_low	;volatile
  3062  0237  0850               	movf	??_command_parser+1,w
  3063  0238                     L3:	
  3064  0238  00DE               	movwf	_pulse_low+1	;volatile
  3065                           
  3066                           ;main.c: 325: }
  3067                           
  3068                           ;main.c: 324: break;
  3069                           
  3070                           ;main.c: 323: default:
  3071                           
  3072                           ;main.c: 322: break;
  3073  0239  2A48               	goto	l2368
  3074  023A                     l2366:	
  3075  023A  0851               	movf	command_parser@c,w
  3076                           
  3077                           ; Switch size 1, requested type "space"
  3078                           ; Number of cases is 4, Range of values is 70 to 84
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; simple_byte           13     7 (average)
  3082                           ; direct_byte           39     9 (fixed)
  3083                           ; jumptable            263     9 (fixed)
  3084                           ;	Chosen strategy is simple_byte
  3085  023B  3A46               	xorlw	70	; case 70
  3086  023C  1903               	skipnz
  3087  023D  29F2               	goto	l2344
  3088  023E  3A0B               	xorlw	11	; case 77
  3089  023F  1903               	skipnz
  3090  0240  2A00               	goto	l2350
  3091  0241  3A1E               	xorlw	30	; case 83
  3092  0242  1903               	skipnz
  3093  0243  2A0A               	goto	l2356
  3094  0244  3A07               	xorlw	7	; case 84
  3095  0245  1903               	skipnz
  3096  0246  2A1B               	goto	l2362
  3097  0247  2A48               	goto	l2368
  3098  0248                     l2368:	
  3099                           
  3100                           ;main.c: 326: putchar_fifo(c, &tx_fifo);
  3101  0248  3023               	movlw	(low (_tx_fifo| 0))& (0+255)
  3102  0249  00CF               	movwf	??_command_parser
  3103  024A  084F               	movf	??_command_parser,w
  3104  024B  00C5               	movwf	putchar_fifo@fifo
  3105  024C  0851               	movf	command_parser@c,w
  3106  024D  3183  2381         	fcall	_putchar_fifo
  3107                           
  3108                           ;main.c: 328: TXIE = 1;
  3109  024F  0021               	movlb	1	; select bank1
  3110  0250  1611               	bsf	17,4	;volatile
  3111  0251  0008               	return
  3112  0252                     __end_of_command_parser:	
  3113                           
  3114                           	psect	text9
  3115  0381                     __ptext9:	
  3116 ;; *************** function _putchar_fifo *****************
  3117 ;; Defined at:
  3118 ;;		line 85 in file "usart.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  c               1    wreg     unsigned char 
  3121 ;;  fifo            1    0[BANK0 ] PTR struct serial_buffer
  3122 ;;		 -> tx_fifo(34), 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  c               1    3[BANK0 ] unsigned char 
  3125 ;;  head            1    4[BANK0 ] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      unsigned char 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3138 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3139 ;;Total ram usage:        5 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    2
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_command_parser
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           
  3151                           ;psect for function _putchar_fifo
  3152  0381                     _putchar_fifo:	
  3153                           
  3154                           ;incstack = 0
  3155                           ; Regs used in _putchar_fifo: [wreg+fsr1l+fsr1h+status,2+status,0]
  3156                           ;putchar_fifo@c stored from wreg
  3157  0381  0020               	movlb	0	; select bank0
  3158  0382  00C8               	movwf	putchar_fifo@c
  3159                           
  3160                           ;usart.c: 86: unsigned char head;
  3161                           ;usart.c: 87: head = fifo->head;
  3162  0383  0845               	movf	putchar_fifo@fifo,w
  3163  0384  0086               	movwf	6
  3164  0385  0187               	clrf	7
  3165  0386  0801               	movf	1,w
  3166  0387  00C6               	movwf	??_putchar_fifo
  3167  0388  0846               	movf	??_putchar_fifo,w
  3168  0389  00C9               	movwf	putchar_fifo@head
  3169                           
  3170                           ;usart.c: 88: head++;
  3171  038A  3001               	movlw	1
  3172  038B  00C6               	movwf	??_putchar_fifo
  3173  038C  0846               	movf	??_putchar_fifo,w
  3174  038D  07C9               	addwf	putchar_fifo@head,f
  3175                           
  3176                           ;usart.c: 89: head &= (32 -1);
  3177  038E  301F               	movlw	31
  3178  038F  00C6               	movwf	??_putchar_fifo
  3179  0390  0846               	movf	??_putchar_fifo,w
  3180  0391  05C9               	andwf	putchar_fifo@head,f
  3181                           
  3182                           ;usart.c: 90: if (head != fifo->tail) {
  3183  0392  0A45               	incf	putchar_fifo@fifo,w
  3184  0393  0086               	movwf	6
  3185  0394  0187               	clrf	7
  3186  0395  0801               	movf	1,w
  3187  0396  0649               	xorwf	putchar_fifo@head,w
  3188  0397  1903               	skipnz
  3189  0398  0008               	return
  3190                           
  3191                           ;usart.c: 91: fifo->head = head;
  3192  0399  0849               	movf	putchar_fifo@head,w
  3193  039A  00C6               	movwf	??_putchar_fifo
  3194  039B  0845               	movf	putchar_fifo@fifo,w
  3195  039C  0086               	movwf	6
  3196  039D  0187               	clrf	7
  3197  039E  0846               	movf	??_putchar_fifo,w
  3198  039F  0081               	movwf	1
  3199                           
  3200                           ;usart.c: 92: fifo->data[head] = c;
  3201  03A0  0848               	movf	putchar_fifo@c,w
  3202  03A1  00C6               	movwf	??_putchar_fifo
  3203  03A2  0849               	movf	putchar_fifo@head,w
  3204  03A3  3E02               	addlw	2
  3205  03A4  0745               	addwf	putchar_fifo@fifo,w
  3206  03A5  00C7               	movwf	??_putchar_fifo+1
  3207  03A6  0847               	movf	??_putchar_fifo+1,w
  3208  03A7  0086               	movwf	6
  3209  03A8  0187               	clrf	7
  3210  03A9  0846               	movf	??_putchar_fifo,w
  3211  03AA  0081               	movwf	1
  3212                           
  3213                           ;usart.c: 93: return 1;
  3214                           ;	Return value of _putchar_fifo is never used
  3215  03AB  0008               	return
  3216  03AC                     __end_of_putchar_fifo:	
  3217                           ;usart.c: 94: };
  3218                           ;usart.c: 95: return 0;
  3219                           ;	Return value of _putchar_fifo is never used
  3220                           
  3221                           
  3222                           	psect	text10
  3223  0323                     __ptext10:	
  3224 ;; *************** function _hex_to_byte *****************
  3225 ;; Defined at:
  3226 ;;		line 30 in file "utils.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  fifo            1    wreg     PTR struct serial_buffer
  3229 ;;		 -> rx_fifo(34), 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  fifo            1    7[BANK0 ] PTR struct serial_buffer
  3232 ;;		 -> rx_fifo(34), 
  3233 ;;  n               1    9[BANK0 ] unsigned char 
  3234 ;;  c               1    8[BANK0 ] unsigned char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      unsigned char 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3248 ;;Total ram usage:        5 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    3
  3251 ;; This function calls:
  3252 ;;		_getchar_fifo
  3253 ;;		_hex_to_nibble
  3254 ;; This function is called by:
  3255 ;;		_command_parser
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _hex_to_byte
  3261  0323                     _hex_to_byte:	
  3262                           
  3263                           ;utils.c: 31: uint8_t n;
  3264                           ;utils.c: 32: char c;
  3265                           ;utils.c: 34: if (c = getchar_fifo(&rx_fifo))
  3266                           
  3267                           ;incstack = 0
  3268                           ; Regs used in _hex_to_byte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3269  0323  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  3270  0324  3183  2355  3183   	fcall	_getchar_fifo
  3271  0327  0020               	movlb	0	; select bank0
  3272  0328  00CA               	movwf	??_hex_to_byte
  3273  0329  084A               	movf	??_hex_to_byte,w
  3274  032A  00CD               	movwf	hex_to_byte@c
  3275  032B  084D               	movf	hex_to_byte@c,w
  3276  032C  1903               	btfsc	3,2
  3277  032D  2B36               	goto	l2156
  3278                           
  3279                           ;utils.c: 35: n = hex_to_nibble(c);
  3280  032E  084D               	movf	hex_to_byte@c,w
  3281  032F  3184  2492  3183   	fcall	_hex_to_nibble
  3282  0332  0020               	movlb	0	; select bank0
  3283  0333  00CA               	movwf	??_hex_to_byte
  3284  0334  084A               	movf	??_hex_to_byte,w
  3285  0335  00CE               	movwf	hex_to_byte@n
  3286  0336                     l2156:	
  3287                           
  3288                           ;utils.c: 36: n = n << 4;
  3289  0336  084E               	movf	hex_to_byte@n,w
  3290  0337  00CA               	movwf	??_hex_to_byte
  3291  0338  3003               	movlw	3
  3292  0339                     u1185:	
  3293  0339  35CA               	lslf	??_hex_to_byte,f
  3294  033A  3EFF               	addlw	-1
  3295  033B  1D03               	skipz
  3296  033C  2B39               	goto	u1185
  3297  033D  354A               	lslf	??_hex_to_byte,w
  3298  033E  00CB               	movwf	??_hex_to_byte+1
  3299  033F  084B               	movf	??_hex_to_byte+1,w
  3300  0340  00CE               	movwf	hex_to_byte@n
  3301                           
  3302                           ;utils.c: 37: if (c = getchar_fifo(&rx_fifo))
  3303  0341  30A0               	movlw	(low (_rx_fifo| 0))& (0+255)
  3304  0342  3183  2355  3183   	fcall	_getchar_fifo
  3305  0345  0020               	movlb	0	; select bank0
  3306  0346  00CA               	movwf	??_hex_to_byte
  3307  0347  084A               	movf	??_hex_to_byte,w
  3308  0348  00CD               	movwf	hex_to_byte@c
  3309  0349  084D               	movf	hex_to_byte@c,w
  3310  034A  1903               	btfsc	3,2
  3311  034B  2B53               	goto	l2162
  3312                           
  3313                           ;utils.c: 38: n += hex_to_nibble(c);
  3314  034C  084D               	movf	hex_to_byte@c,w
  3315  034D  3184  2492         	fcall	_hex_to_nibble
  3316  034F  0020               	movlb	0	; select bank0
  3317  0350  00CA               	movwf	??_hex_to_byte
  3318  0351  084A               	movf	??_hex_to_byte,w
  3319  0352  07CE               	addwf	hex_to_byte@n,f
  3320  0353                     l2162:	
  3321                           
  3322                           ;utils.c: 39: return n;
  3323  0353  084E               	movf	hex_to_byte@n,w
  3324  0354  0008               	return
  3325  0355                     __end_of_hex_to_byte:	
  3326                           
  3327                           	psect	text11
  3328  0492                     __ptext11:	
  3329 ;; *************** function _hex_to_nibble *****************
  3330 ;; Defined at:
  3331 ;;		line 22 in file "utils.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  c               1    wreg     unsigned char 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  c               1    0[BANK0 ] unsigned char 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      unsigned char 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3349 ;;Total ram usage:        1 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    2
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_hex_to_byte
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _hex_to_nibble
  3361  0492                     _hex_to_nibble:	
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _hex_to_nibble: [wreg+status,2+status,0]
  3365                           ;hex_to_nibble@c stored from wreg
  3366  0492  0020               	movlb	0	; select bank0
  3367  0493  00C5               	movwf	hex_to_nibble@c
  3368                           
  3369                           ;utils.c: 23: if (c >= '0' && c <= '9')
  3370  0494  3030               	movlw	48
  3371  0495  0245               	subwf	hex_to_nibble@c,w
  3372  0496  1C03               	skipc
  3373  0497  2C9F               	goto	l2128
  3374  0498  303A               	movlw	58
  3375  0499  0245               	subwf	hex_to_nibble@c,w
  3376  049A  1803               	skipnc
  3377  049B  2C9F               	goto	l2128
  3378                           
  3379                           ;utils.c: 24: return c - '0';
  3380  049C  0845               	movf	hex_to_nibble@c,w
  3381  049D  3ED0               	addlw	208
  3382  049E  0008               	return
  3383  049F                     l2128:	
  3384                           
  3385                           ;utils.c: 25: if (c >= 'A' && c <= 'F')
  3386  049F  3041               	movlw	65
  3387  04A0  0245               	subwf	hex_to_nibble@c,w
  3388  04A1  1C03               	skipc
  3389  04A2  2CAA               	goto	l2136
  3390  04A3  3047               	movlw	71
  3391  04A4  0245               	subwf	hex_to_nibble@c,w
  3392  04A5  1803               	skipnc
  3393  04A6  2CAA               	goto	l2136
  3394                           
  3395                           ;utils.c: 26: return c - 'A' + 10;
  3396  04A7  0845               	movf	hex_to_nibble@c,w
  3397  04A8  3EC9               	addlw	201
  3398  04A9  0008               	return
  3399  04AA                     l2136:	
  3400                           
  3401                           ;utils.c: 27: return c - 'a' + 10;
  3402  04AA  0845               	movf	hex_to_nibble@c,w
  3403  04AB  3EA9               	addlw	169
  3404  04AC  0008               	return
  3405  04AD                     __end_of_hex_to_nibble:	
  3406                           
  3407                           	psect	text12
  3408  0355                     __ptext12:	
  3409 ;; *************** function _getchar_fifo *****************
  3410 ;; Defined at:
  3411 ;;		line 110 in file "usart.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  fifo            1    wreg     PTR struct serial_buffer
  3414 ;;		 -> rx_fifo(34), 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  fifo            1    4[BANK0 ] PTR struct serial_buffer
  3417 ;;		 -> rx_fifo(34), 
  3418 ;;  tail            1    3[BANK0 ] unsigned char 
  3419 ;;  c               1    2[BANK0 ] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      unsigned char 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3433 ;;Total ram usage:        5 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    2
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_command_parser
  3440 ;;		_main
  3441 ;;		_hex_to_byte
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _getchar_fifo
  3447  0355                     _getchar_fifo:	
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _getchar_fifo: [wreg+fsr1l+fsr1h+status,2+status,0]
  3451                           ;getchar_fifo@fifo stored from wreg
  3452  0355  0020               	movlb	0	; select bank0
  3453  0356  00C9               	movwf	getchar_fifo@fifo
  3454                           
  3455                           ;usart.c: 111: unsigned char tail;
  3456                           ;usart.c: 112: char c;
  3457                           ;usart.c: 113: tail = fifo->tail;
  3458  0357  0849               	movf	getchar_fifo@fifo,w
  3459  0358  0086               	movwf	6
  3460  0359  0187               	clrf	7
  3461  035A  3F41               	moviw [1]fsr1
  3462  035B  00C8               	movwf	getchar_fifo@tail
  3463                           
  3464                           ;usart.c: 114: if (tail != fifo->head) {
  3465  035C  0849               	movf	getchar_fifo@fifo,w
  3466  035D  0086               	movwf	6
  3467  035E  0187               	clrf	7
  3468  035F  0801               	movf	1,w
  3469  0360  0648               	xorwf	getchar_fifo@tail,w
  3470  0361  1903               	skipnz
  3471  0362  2B7F               	goto	l2102
  3472                           
  3473                           ;usart.c: 115: tail++;
  3474  0363  3001               	movlw	1
  3475  0364  00C5               	movwf	??_getchar_fifo
  3476  0365  0845               	movf	??_getchar_fifo,w
  3477  0366  07C8               	addwf	getchar_fifo@tail,f
  3478                           
  3479                           ;usart.c: 116: tail &= (32 -1);
  3480  0367  301F               	movlw	31
  3481  0368  00C5               	movwf	??_getchar_fifo
  3482  0369  0845               	movf	??_getchar_fifo,w
  3483  036A  05C8               	andwf	getchar_fifo@tail,f
  3484                           
  3485                           ;usart.c: 117: fifo->tail = tail;
  3486  036B  0848               	movf	getchar_fifo@tail,w
  3487  036C  00C5               	movwf	??_getchar_fifo
  3488  036D  0A49               	incf	getchar_fifo@fifo,w
  3489  036E  0086               	movwf	6
  3490  036F  0187               	clrf	7
  3491  0370  0845               	movf	??_getchar_fifo,w
  3492  0371  0081               	movwf	1
  3493                           
  3494                           ;usart.c: 118: c = fifo->data[tail];
  3495  0372  0848               	movf	getchar_fifo@tail,w
  3496  0373  3E02               	addlw	2
  3497  0374  0749               	addwf	getchar_fifo@fifo,w
  3498  0375  00C5               	movwf	??_getchar_fifo
  3499  0376  0845               	movf	??_getchar_fifo,w
  3500  0377  0086               	movwf	6
  3501  0378  0187               	clrf	7
  3502  0379  0801               	movf	1,w
  3503  037A  00C6               	movwf	??_getchar_fifo+1
  3504  037B  0846               	movf	??_getchar_fifo+1,w
  3505  037C  00C7               	movwf	getchar_fifo@c
  3506                           
  3507                           ;usart.c: 119: return c;
  3508  037D  0847               	movf	getchar_fifo@c,w
  3509  037E  0008               	return
  3510  037F                     l2102:	
  3511                           
  3512                           ;usart.c: 120: }
  3513                           ;usart.c: 121: return 0;
  3514  037F  3000               	movlw	0
  3515  0380  0008               	return
  3516  0381                     __end_of_getchar_fifo:	
  3517                           
  3518                           	psect	text13
  3519  04C8                     __ptext13:	
  3520 ;; *************** function _cog_init *****************
  3521 ;; Defined at:
  3522 ;;		line 246 in file "main.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;Total ram usage:        0 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _cog_init
  3552  04C8                     _cog_init:	
  3553                           
  3554                           ;main.c: 247: COG1CON0 = 0;
  3555                           
  3556                           ;incstack = 0
  3557                           ; Regs used in _cog_init: [wreg+status,2]
  3558  04C8  002D               	movlb	13	; select bank13
  3559  04C9  0197               	clrf	23	;volatile
  3560                           
  3561                           ;main.c: 248: COG1CON1 = 0;
  3562  04CA  0198               	clrf	24	;volatile
  3563                           
  3564                           ;main.c: 250: COG1RIS = 0b00010000;
  3565  04CB  3010               	movlw	16
  3566  04CC  0099               	movwf	25	;volatile
  3567                           
  3568                           ;main.c: 251: COG1RSIM = 0x0;
  3569  04CD  019A               	clrf	26	;volatile
  3570                           
  3571                           ;main.c: 252: COG1FIS = 0b00010000;
  3572  04CE  3010               	movlw	16
  3573  04CF  009B               	movwf	27	;volatile
  3574                           
  3575                           ;main.c: 253: COG1FSIM = 0x0;
  3576  04D0  019C               	clrf	28	;volatile
  3577                           
  3578                           ;main.c: 255: COG1ASD0 = 0;
  3579  04D1  019D               	clrf	29	;volatile
  3580                           
  3581                           ;main.c: 256: COG1ASD1 = 0;
  3582  04D2  019E               	clrf	30	;volatile
  3583                           
  3584                           ;main.c: 258: COG1STR = 0;
  3585  04D3  019F               	clrf	31	;volatile
  3586                           
  3587                           ;main.c: 259: COG1DBR = 0;
  3588  04D4  0195               	clrf	21	;volatile
  3589                           
  3590                           ;main.c: 260: COG1DBF = 0;
  3591  04D5  0196               	clrf	22	;volatile
  3592                           
  3593                           ;main.c: 261: COG1BLKR = 0;
  3594  04D6  0193               	clrf	19	;volatile
  3595                           
  3596                           ;main.c: 262: COG1BLKF = 0;
  3597  04D7  0194               	clrf	20	;volatile
  3598                           
  3599                           ;main.c: 263: COG1PHR = 0;
  3600  04D8  0191               	clrf	17	;volatile
  3601                           
  3602                           ;main.c: 264: COG1PHF = 0;
  3603  04D9  0192               	clrf	18	;volatile
  3604                           
  3605                           ;main.c: 266: COG1CON0 = 0b10001100;
  3606  04DA  308C               	movlw	140
  3607  04DB  0097               	movwf	23	;volatile
  3608  04DC  0008               	return
  3609  04DD                     __end_of_cog_init:	
  3610                           
  3611                           	psect	text14
  3612  053A                     __ptext14:	
  3613 ;; *************** function _ad_init *****************
  3614 ;; Defined at:
  3615 ;;		line 183 in file "main.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;Total ram usage:        0 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    2
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _ad_init
  3645  053A                     _ad_init:	
  3646                           
  3647                           ;main.c: 185: ANSELA = 1 << 2;
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _ad_init: [wreg]
  3651  053A  3004               	movlw	4
  3652  053B  0023               	movlb	3	; select bank3
  3653  053C  008C               	movwf	12	;volatile
  3654                           
  3655                           ;main.c: 186: ANSELC = 1 << 0;
  3656  053D  3001               	movlw	1
  3657  053E  008E               	movwf	14	;volatile
  3658                           
  3659                           ;main.c: 188: ADCON1 = 0b11100000;
  3660  053F  30E0               	movlw	224
  3661  0540  0021               	movlb	1	; select bank1
  3662  0541  009E               	movwf	30	;volatile
  3663  0542  0008               	return
  3664  0543                     __end_of_ad_init:	
  3665                           
  3666                           	psect	text15
  3667  0476                     __ptext15:	
  3668 ;; *************** function ___wmul *****************
  3669 ;; Defined at:
  3670 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3673 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  product         2    4[BANK0 ] unsigned int 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  2    0[BANK0 ] unsigned int 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3689 ;;Total ram usage:        6 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    2
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function ___wmul
  3701  0476                     ___wmul:	
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3705  0476  0020               	movlb	0	; select bank0
  3706  0477  01C9               	clrf	___wmul@product
  3707  0478  01CA               	clrf	___wmul@product+1
  3708  0479                     l2410:	
  3709  0479  1C45               	btfss	___wmul@multiplier,0
  3710  047A  2C7F               	goto	l524
  3711  047B  0847               	movf	___wmul@multiplicand,w
  3712  047C  07C9               	addwf	___wmul@product,f
  3713  047D  0848               	movf	___wmul@multiplicand+1,w
  3714  047E  3DCA               	addwfc	___wmul@product+1,f
  3715  047F                     l524:	
  3716  047F  3001               	movlw	1
  3717  0480                     u1275:	
  3718  0480  35C7               	lslf	___wmul@multiplicand,f
  3719  0481  0DC8               	rlf	___wmul@multiplicand+1,f
  3720  0482  0B89               	decfsz	9,f
  3721  0483  2C80               	goto	u1275
  3722  0484  3001               	movlw	1
  3723  0485                     u1285:	
  3724  0485  36C6               	lsrf	___wmul@multiplier+1,f
  3725  0486  0CC5               	rrf	___wmul@multiplier,f
  3726  0487  0B89               	decfsz	9,f
  3727  0488  2C85               	goto	u1285
  3728  0489  0845               	movf	___wmul@multiplier,w
  3729  048A  0446               	iorwf	___wmul@multiplier+1,w
  3730  048B  1D03               	btfss	3,2
  3731  048C  2C79               	goto	l2410
  3732  048D  084A               	movf	___wmul@product+1,w
  3733  048E  00C6               	movwf	?___wmul+1
  3734  048F  0849               	movf	___wmul@product,w
  3735  0490  00C5               	movwf	?___wmul
  3736  0491  0008               	return
  3737  0492                     __end_of___wmul:	
  3738                           
  3739                           	psect	text16
  3740  043C                     __ptext16:	
  3741 ;; *************** function _LCD_puts *****************
  3742 ;; Defined at:
  3743 ;;		line 110 in file "i2c_lcd.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;  addr            1    wreg     unsigned char 
  3746 ;;  s               2   11[BANK0 ] PTR const unsigned char 
  3747 ;;		 -> STR_2(16), STR_1(18), 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  addr            1   16[BANK0 ] unsigned char 
  3750 ;;  i               2   14[BANK0 ] int 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3760 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3761 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;Total ram usage:        6 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    6
  3767 ;; This function calls:
  3768 ;;		_LCD_putch
  3769 ;; This function is called by:
  3770 ;;		_main
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _LCD_puts
  3776  043C                     _LCD_puts:	
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3780                           ;LCD_puts@addr stored from wreg
  3781  043C  0020               	movlb	0	; select bank0
  3782  043D  00D5               	movwf	LCD_puts@addr
  3783                           
  3784                           ;i2c_lcd.c: 111: int i = 0;
  3785  043E  01D3               	clrf	LCD_puts@i
  3786  043F  01D4               	clrf	LCD_puts@i+1
  3787  0440                     l2380:	
  3788                           ;i2c_lcd.c: 112: while (*s != 0)
  3789                           
  3790  0440  0850               	movf	LCD_puts@s,w
  3791  0441  0084               	movwf	4
  3792  0442  0851               	movf	LCD_puts@s+1,w
  3793  0443  0085               	movwf	5
  3794  0444  0012               	moviw fsr0++
  3795  0445  1903               	btfsc	3,2
  3796  0446  0008               	return
  3797                           
  3798                           ;i2c_lcd.c: 113: LCD_putch(addr, *s++);
  3799  0447  0850               	movf	LCD_puts@s,w
  3800  0448  0084               	movwf	4
  3801  0449  0851               	movf	LCD_puts@s+1,w
  3802  044A  0085               	movwf	5
  3803  044B  0800               	movf	0,w	;code access
  3804  044C  00D2               	movwf	??_LCD_puts
  3805  044D  0852               	movf	??_LCD_puts,w
  3806  044E  00CB               	movwf	LCD_putch@data
  3807  044F  0855               	movf	LCD_puts@addr,w
  3808  0450  3182  22E7  3184   	fcall	_LCD_putch
  3809  0453  3001               	movlw	1
  3810  0454  0020               	movlb	0	; select bank0
  3811  0455  07D0               	addwf	LCD_puts@s,f
  3812  0456  3000               	movlw	0
  3813  0457  3DD1               	addwfc	LCD_puts@s+1,f
  3814  0458  2C40               	goto	l2380
  3815  0459                     __end_of_LCD_puts:	
  3816                           
  3817                           	psect	text17
  3818  02E7                     __ptext17:	
  3819 ;; *************** function _LCD_putch *****************
  3820 ;; Defined at:
  3821 ;;		line 61 in file "i2c_lcd.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  addr            1    wreg     unsigned char 
  3824 ;;  data            1    6[BANK0 ] unsigned char 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  addr            1    9[BANK0 ] unsigned char 
  3827 ;;  lcddata         1   10[BANK0 ] unsigned char 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0, pclath, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3837 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;Total ram usage:        5 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    5
  3844 ;; This function calls:
  3845 ;;		_I2C_PCF8574_Write
  3846 ;; This function is called by:
  3847 ;;		_main
  3848 ;;		_LCD_puts
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function _LCD_putch
  3854  02E7                     _LCD_putch:	
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _LCD_putch: [wreg+status,2+status,0+pclath+cstack]
  3858                           ;LCD_putch@addr stored from wreg
  3859  02E7  0020               	movlb	0	; select bank0
  3860  02E8  00CE               	movwf	LCD_putch@addr
  3861                           
  3862                           ;i2c_lcd.c: 62: uint8_t lcddata;
  3863                           ;i2c_lcd.c: 63: lcddata = ((data) & 0xF0) | 0x08 | 0x01;
  3864  02E9  084B               	movf	LCD_putch@data,w
  3865  02EA  39F0               	andlw	240
  3866  02EB  3809               	iorlw	9
  3867  02EC  00CC               	movwf	??_LCD_putch
  3868  02ED  084C               	movf	??_LCD_putch,w
  3869  02EE  00CF               	movwf	LCD_putch@lcddata
  3870                           
  3871                           ;i2c_lcd.c: 64: I2C_PCF8574_Write(addr, lcddata | 0x04);
  3872  02EF  084F               	movf	LCD_putch@lcddata,w
  3873  02F0  3804               	iorlw	4
  3874  02F1  00CC               	movwf	??_LCD_putch
  3875  02F2  084C               	movf	??_LCD_putch,w
  3876  02F3  00C6               	movwf	I2C_PCF8574_Write@value
  3877  02F4  084E               	movf	LCD_putch@addr,w
  3878  02F5  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  3879                           
  3880                           ;i2c_lcd.c: 65: I2C_PCF8574_Write(addr, lcddata & ~0x04);
  3881  02F8  0020               	movlb	0	; select bank0
  3882  02F9  084F               	movf	LCD_putch@lcddata,w
  3883  02FA  39FB               	andlw	251
  3884  02FB  00CC               	movwf	??_LCD_putch
  3885  02FC  084C               	movf	??_LCD_putch,w
  3886  02FD  00C6               	movwf	I2C_PCF8574_Write@value
  3887  02FE  084E               	movf	LCD_putch@addr,w
  3888  02FF  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  3889                           
  3890                           ;i2c_lcd.c: 66: lcddata = (((data) << 4) & 0xF0) | 0x08 | 0x01;
  3891  0302  0020               	movlb	0	; select bank0
  3892  0303  084B               	movf	LCD_putch@data,w
  3893  0304  00CC               	movwf	??_LCD_putch
  3894  0305  3003               	movlw	3
  3895  0306                     u1225:	
  3896  0306  35CC               	lslf	??_LCD_putch,f
  3897  0307  3EFF               	addlw	-1
  3898  0308  1D03               	skipz
  3899  0309  2B06               	goto	u1225
  3900  030A  354C               	lslf	??_LCD_putch,w
  3901  030B  39F0               	andlw	240
  3902  030C  3809               	iorlw	9
  3903  030D  00CD               	movwf	??_LCD_putch+1
  3904  030E  084D               	movf	??_LCD_putch+1,w
  3905  030F  00CF               	movwf	LCD_putch@lcddata
  3906                           
  3907                           ;i2c_lcd.c: 67: I2C_PCF8574_Write(addr, lcddata | 0x04);
  3908  0310  084F               	movf	LCD_putch@lcddata,w
  3909  0311  3804               	iorlw	4
  3910  0312  00CC               	movwf	??_LCD_putch
  3911  0313  084C               	movf	??_LCD_putch,w
  3912  0314  00C6               	movwf	I2C_PCF8574_Write@value
  3913  0315  084E               	movf	LCD_putch@addr,w
  3914  0316  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  3915                           
  3916                           ;i2c_lcd.c: 68: I2C_PCF8574_Write(addr, lcddata & ~0x04);
  3917  0319  0020               	movlb	0	; select bank0
  3918  031A  084F               	movf	LCD_putch@lcddata,w
  3919  031B  39FB               	andlw	251
  3920  031C  00CC               	movwf	??_LCD_putch
  3921  031D  084C               	movf	??_LCD_putch,w
  3922  031E  00C6               	movwf	I2C_PCF8574_Write@value
  3923  031F  084E               	movf	LCD_putch@addr,w
  3924  0320  3183  23F9         	fcall	_I2C_PCF8574_Write
  3925  0322  0008               	return
  3926  0323                     __end_of_LCD_putch:	
  3927                           
  3928                           	psect	text18
  3929  0178                     __ptext18:	
  3930 ;; *************** function _LCD_init *****************
  3931 ;; Defined at:
  3932 ;;		line 72 in file "i2c_lcd.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  addr            1    wreg     unsigned char 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;  addr            1   13[BANK0 ] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      void 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;Total ram usage:        2 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    6
  3953 ;; This function calls:
  3954 ;;		_LCD_putcmd
  3955 ;;		_delay_ms
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _LCD_init
  3963  0178                     _LCD_init:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3967                           ;LCD_init@addr stored from wreg
  3968  0178  0020               	movlb	0	; select bank0
  3969  0179  00D2               	movwf	LCD_init@addr
  3970                           
  3971                           ;i2c_lcd.c: 73: delay_ms(20);
  3972  017A  3014               	movlw	20
  3973  017B  00C5               	movwf	delay_ms@ms
  3974  017C  3000               	movlw	0
  3975  017D  00C6               	movwf	delay_ms@ms+1
  3976  017E  3184  24AD  3181   	fcall	_delay_ms
  3977                           
  3978                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x30, 0);
  3979  0181  3030               	movlw	48
  3980  0182  0020               	movlb	0	; select bank0
  3981  0183  00D1               	movwf	??_LCD_init
  3982  0184  0851               	movf	??_LCD_init,w
  3983  0185  00CB               	movwf	LCD_putcmd@data
  3984  0186  01CC               	clrf	LCD_putcmd@cmdtype
  3985  0187  0852               	movf	LCD_init@addr,w
  3986  0188  3182  22A0  3181   	fcall	_LCD_putcmd
  3987                           
  3988                           ;i2c_lcd.c: 76: delay_ms(5);
  3989  018B  3005               	movlw	5
  3990  018C  0020               	movlb	0	; select bank0
  3991  018D  00C5               	movwf	delay_ms@ms
  3992  018E  3000               	movlw	0
  3993  018F  00C6               	movwf	delay_ms@ms+1
  3994  0190  3184  24AD  3181   	fcall	_delay_ms
  3995                           
  3996                           ;i2c_lcd.c: 77: LCD_putcmd(addr, 0x30, 0);
  3997  0193  3030               	movlw	48
  3998  0194  0020               	movlb	0	; select bank0
  3999  0195  00D1               	movwf	??_LCD_init
  4000  0196  0851               	movf	??_LCD_init,w
  4001  0197  00CB               	movwf	LCD_putcmd@data
  4002  0198  01CC               	clrf	LCD_putcmd@cmdtype
  4003  0199  0852               	movf	LCD_init@addr,w
  4004  019A  3182  22A0  3181   	fcall	_LCD_putcmd
  4005                           
  4006                           ;i2c_lcd.c: 78: LCD_putcmd(addr, 0x30, 0);
  4007  019D  3030               	movlw	48
  4008  019E  0020               	movlb	0	; select bank0
  4009  019F  00D1               	movwf	??_LCD_init
  4010  01A0  0851               	movf	??_LCD_init,w
  4011  01A1  00CB               	movwf	LCD_putcmd@data
  4012  01A2  01CC               	clrf	LCD_putcmd@cmdtype
  4013  01A3  0852               	movf	LCD_init@addr,w
  4014  01A4  3182  22A0  3181   	fcall	_LCD_putcmd
  4015                           
  4016                           ;i2c_lcd.c: 79: LCD_putcmd(addr, 0x20, 0);
  4017  01A7  3020               	movlw	32
  4018  01A8  0020               	movlb	0	; select bank0
  4019  01A9  00D1               	movwf	??_LCD_init
  4020  01AA  0851               	movf	??_LCD_init,w
  4021  01AB  00CB               	movwf	LCD_putcmd@data
  4022  01AC  01CC               	clrf	LCD_putcmd@cmdtype
  4023  01AD  0852               	movf	LCD_init@addr,w
  4024  01AE  3182  22A0  3181   	fcall	_LCD_putcmd
  4025                           
  4026                           ;i2c_lcd.c: 80: LCD_putcmd(addr, 0x28, 1);
  4027  01B1  3028               	movlw	40
  4028  01B2  0020               	movlb	0	; select bank0
  4029  01B3  00D1               	movwf	??_LCD_init
  4030  01B4  0851               	movf	??_LCD_init,w
  4031  01B5  00CB               	movwf	LCD_putcmd@data
  4032  01B6  01CC               	clrf	LCD_putcmd@cmdtype
  4033  01B7  0ACC               	incf	LCD_putcmd@cmdtype,f
  4034  01B8  0852               	movf	LCD_init@addr,w
  4035  01B9  3182  22A0  3181   	fcall	_LCD_putcmd
  4036                           
  4037                           ;i2c_lcd.c: 81: LCD_putcmd(addr, 0x08, 1);
  4038  01BC  3008               	movlw	8
  4039  01BD  0020               	movlb	0	; select bank0
  4040  01BE  00D1               	movwf	??_LCD_init
  4041  01BF  0851               	movf	??_LCD_init,w
  4042  01C0  00CB               	movwf	LCD_putcmd@data
  4043  01C1  01CC               	clrf	LCD_putcmd@cmdtype
  4044  01C2  0ACC               	incf	LCD_putcmd@cmdtype,f
  4045  01C3  0852               	movf	LCD_init@addr,w
  4046  01C4  3182  22A0  3181   	fcall	_LCD_putcmd
  4047                           
  4048                           ;i2c_lcd.c: 82: LCD_putcmd(addr, 0x01, 1);
  4049  01C7  0020               	movlb	0	; select bank0
  4050  01C8  01CB               	clrf	LCD_putcmd@data
  4051  01C9  0ACB               	incf	LCD_putcmd@data,f
  4052  01CA  01CC               	clrf	LCD_putcmd@cmdtype
  4053  01CB  0ACC               	incf	LCD_putcmd@cmdtype,f
  4054  01CC  0852               	movf	LCD_init@addr,w
  4055  01CD  3182  22A0  3181   	fcall	_LCD_putcmd
  4056                           
  4057                           ;i2c_lcd.c: 83: LCD_putcmd(addr, 0x06, 1);
  4058  01D0  3006               	movlw	6
  4059  01D1  0020               	movlb	0	; select bank0
  4060  01D2  00D1               	movwf	??_LCD_init
  4061  01D3  0851               	movf	??_LCD_init,w
  4062  01D4  00CB               	movwf	LCD_putcmd@data
  4063  01D5  01CC               	clrf	LCD_putcmd@cmdtype
  4064  01D6  0ACC               	incf	LCD_putcmd@cmdtype,f
  4065  01D7  0852               	movf	LCD_init@addr,w
  4066  01D8  3182  22A0  3181   	fcall	_LCD_putcmd
  4067                           
  4068                           ;i2c_lcd.c: 84: LCD_putcmd(addr, 0x0c, 1);
  4069  01DB  300C               	movlw	12
  4070  01DC  0020               	movlb	0	; select bank0
  4071  01DD  00D1               	movwf	??_LCD_init
  4072  01DE  0851               	movf	??_LCD_init,w
  4073  01DF  00CB               	movwf	LCD_putcmd@data
  4074  01E0  01CC               	clrf	LCD_putcmd@cmdtype
  4075  01E1  0ACC               	incf	LCD_putcmd@cmdtype,f
  4076  01E2  0852               	movf	LCD_init@addr,w
  4077  01E3  3182  22A0         	fcall	_LCD_putcmd
  4078  01E5  0008               	return
  4079  01E6                     __end_of_LCD_init:	
  4080                           
  4081                           	psect	text19
  4082  0252                     __ptext19:	
  4083 ;; *************** function _LCD_goto *****************
  4084 ;; Defined at:
  4085 ;;		line 88 in file "i2c_lcd.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  addr            1    wreg     unsigned char 
  4088 ;;  row             1   12[BANK0 ] unsigned char 
  4089 ;;  column          1   13[BANK0 ] unsigned char 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  addr            1   15[BANK0 ] unsigned char 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      void 
  4094 ;; Registers used:
  4095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;Total ram usage:        4 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    6
  4108 ;; This function calls:
  4109 ;;		_LCD_putcmd
  4110 ;; This function is called by:
  4111 ;;		_main
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           
  4116                           ;psect for function _LCD_goto
  4117  0252                     _LCD_goto:	
  4118                           
  4119                           ;incstack = 0
  4120                           ; Regs used in _LCD_goto: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4121                           ;LCD_goto@addr stored from wreg
  4122  0252  0020               	movlb	0	; select bank0
  4123  0253  00D4               	movwf	LCD_goto@addr
  4124                           
  4125                           ;i2c_lcd.c: 89: switch (row) {
  4126  0254  2A90               	goto	l2396
  4127  0255                     l2384:	
  4128                           ;i2c_lcd.c: 90: case 1:
  4129                           
  4130                           
  4131                           ;i2c_lcd.c: 91: LCD_putcmd(addr, 0x80 + (column - 1), 1);
  4132  0255  0852               	movf	LCD_goto@column,w
  4133  0256  3E7F               	addlw	127
  4134  0257  00D3               	movwf	??_LCD_goto
  4135  0258  0853               	movf	??_LCD_goto,w
  4136  0259  00CB               	movwf	LCD_putcmd@data
  4137  025A  01CC               	clrf	LCD_putcmd@cmdtype
  4138  025B  0ACC               	incf	LCD_putcmd@cmdtype,f
  4139  025C  0854               	movf	LCD_goto@addr,w
  4140  025D  3182  22A0         	fcall	_LCD_putcmd
  4141                           
  4142                           ;i2c_lcd.c: 92: break;
  4143  025F  0008               	return
  4144  0260                     l2386:	
  4145                           ;i2c_lcd.c: 93: case 2:
  4146                           
  4147                           
  4148                           ;i2c_lcd.c: 94: LCD_putcmd(addr, 0xC0 + (column - 1), 1);
  4149  0260  0020               	movlb	0	; select bank0
  4150  0261  0852               	movf	LCD_goto@column,w
  4151  0262  3EBF               	addlw	191
  4152  0263  00D3               	movwf	??_LCD_goto
  4153  0264  0853               	movf	??_LCD_goto,w
  4154  0265  00CB               	movwf	LCD_putcmd@data
  4155  0266  01CC               	clrf	LCD_putcmd@cmdtype
  4156  0267  0ACC               	incf	LCD_putcmd@cmdtype,f
  4157  0268  0854               	movf	LCD_goto@addr,w
  4158  0269  3182  22A0         	fcall	_LCD_putcmd
  4159                           
  4160                           ;i2c_lcd.c: 95: break;
  4161  026B  0008               	return
  4162  026C                     l2388:	
  4163                           ;i2c_lcd.c: 96: case 3:
  4164                           
  4165                           
  4166                           ;i2c_lcd.c: 97: LCD_putcmd(addr, 0x94 + (column - 1), 1);
  4167  026C  0020               	movlb	0	; select bank0
  4168  026D  0852               	movf	LCD_goto@column,w
  4169  026E  3E93               	addlw	147
  4170  026F  00D3               	movwf	??_LCD_goto
  4171  0270  0853               	movf	??_LCD_goto,w
  4172  0271  00CB               	movwf	LCD_putcmd@data
  4173  0272  01CC               	clrf	LCD_putcmd@cmdtype
  4174  0273  0ACC               	incf	LCD_putcmd@cmdtype,f
  4175  0274  0854               	movf	LCD_goto@addr,w
  4176  0275  3182  22A0         	fcall	_LCD_putcmd
  4177                           
  4178                           ;i2c_lcd.c: 98: break;
  4179  0277  0008               	return
  4180  0278                     l2390:	
  4181                           ;i2c_lcd.c: 99: case 4:
  4182                           
  4183                           
  4184                           ;i2c_lcd.c: 100: LCD_putcmd(addr, 0xD4 + (column - 1), 1);
  4185  0278  0020               	movlb	0	; select bank0
  4186  0279  0852               	movf	LCD_goto@column,w
  4187  027A  3ED3               	addlw	211
  4188  027B  00D3               	movwf	??_LCD_goto
  4189  027C  0853               	movf	??_LCD_goto,w
  4190  027D  00CB               	movwf	LCD_putcmd@data
  4191  027E  01CC               	clrf	LCD_putcmd@cmdtype
  4192  027F  0ACC               	incf	LCD_putcmd@cmdtype,f
  4193  0280  0854               	movf	LCD_goto@addr,w
  4194  0281  3182  22A0         	fcall	_LCD_putcmd
  4195                           
  4196                           ;i2c_lcd.c: 101: break;
  4197  0283  0008               	return
  4198  0284                     l2392:	
  4199                           ;i2c_lcd.c: 102: default:
  4200                           
  4201                           
  4202                           ;i2c_lcd.c: 103: LCD_putcmd(addr, 0x80 + (column - 1), 1);
  4203  0284  0020               	movlb	0	; select bank0
  4204  0285  0852               	movf	LCD_goto@column,w
  4205  0286  3E7F               	addlw	127
  4206  0287  00D3               	movwf	??_LCD_goto
  4207  0288  0853               	movf	??_LCD_goto,w
  4208  0289  00CB               	movwf	LCD_putcmd@data
  4209  028A  01CC               	clrf	LCD_putcmd@cmdtype
  4210  028B  0ACC               	incf	LCD_putcmd@cmdtype,f
  4211  028C  0854               	movf	LCD_goto@addr,w
  4212  028D  3182  22A0         	fcall	_LCD_putcmd
  4213                           
  4214                           ;i2c_lcd.c: 105: }
  4215                           
  4216                           ;i2c_lcd.c: 104: break;
  4217  028F  0008               	return
  4218  0290                     l2396:	
  4219  0290  0020               	movlb	0	; select bank0
  4220  0291  0851               	movf	LCD_goto@row,w
  4221                           
  4222                           ; Switch size 1, requested type "space"
  4223                           ; Number of cases is 4, Range of values is 1 to 4
  4224                           ; switch strategies available:
  4225                           ; Name         Instructions Cycles
  4226                           ; simple_byte           13     7 (average)
  4227                           ; direct_byte           17     9 (fixed)
  4228                           ; jumptable            263     9 (fixed)
  4229                           ;	Chosen strategy is simple_byte
  4230  0292  3A01               	xorlw	1	; case 1
  4231  0293  1903               	skipnz
  4232  0294  2A55               	goto	l2384
  4233  0295  3A03               	xorlw	3	; case 2
  4234  0296  1903               	skipnz
  4235  0297  2A60               	goto	l2386
  4236  0298  3A01               	xorlw	1	; case 3
  4237  0299  1903               	skipnz
  4238  029A  2A6C               	goto	l2388
  4239  029B  3A07               	xorlw	7	; case 4
  4240  029C  1903               	skipnz
  4241  029D  2A78               	goto	l2390
  4242  029E  2A84               	goto	l2392
  4243  029F  0008               	return
  4244  02A0                     __end_of_LCD_goto:	
  4245                           
  4246                           	psect	text20
  4247  02A0                     __ptext20:	
  4248 ;; *************** function _LCD_putcmd *****************
  4249 ;; Defined at:
  4250 ;;		line 42 in file "i2c_lcd.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  addr            1    wreg     unsigned char 
  4253 ;;  data            1    6[BANK0 ] unsigned char 
  4254 ;;  cmdtype         1    7[BANK0 ] unsigned char 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  addr            1   10[BANK0 ] unsigned char 
  4257 ;;  lcddata         1   11[BANK0 ] unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0, pclath, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;Total ram usage:        6 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    5
  4274 ;; This function calls:
  4275 ;;		_I2C_PCF8574_Write
  4276 ;;		_delay_ms
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;;		_LCD_init
  4280 ;;		_LCD_goto
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _LCD_putcmd
  4286  02A0                     _LCD_putcmd:	
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in _LCD_putcmd: [wreg+status,2+status,0+pclath+cstack]
  4290                           ;LCD_putcmd@addr stored from wreg
  4291  02A0  0020               	movlb	0	; select bank0
  4292  02A1  00CF               	movwf	LCD_putcmd@addr
  4293                           
  4294                           ;i2c_lcd.c: 43: uint8_t lcddata;
  4295                           ;i2c_lcd.c: 46: lcddata = ((data) & 0xF0) | 0x08;
  4296  02A2  084B               	movf	LCD_putcmd@data,w
  4297  02A3  39F0               	andlw	240
  4298  02A4  3808               	iorlw	8
  4299  02A5  00CD               	movwf	??_LCD_putcmd
  4300  02A6  084D               	movf	??_LCD_putcmd,w
  4301  02A7  00D0               	movwf	LCD_putcmd@lcddata
  4302                           
  4303                           ;i2c_lcd.c: 47: I2C_PCF8574_Write(addr, lcddata | 0x04);
  4304  02A8  0850               	movf	LCD_putcmd@lcddata,w
  4305  02A9  3804               	iorlw	4
  4306  02AA  00CD               	movwf	??_LCD_putcmd
  4307  02AB  084D               	movf	??_LCD_putcmd,w
  4308  02AC  00C6               	movwf	I2C_PCF8574_Write@value
  4309  02AD  084F               	movf	LCD_putcmd@addr,w
  4310  02AE  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  4311                           
  4312                           ;i2c_lcd.c: 48: I2C_PCF8574_Write(addr, lcddata & ~0x04);
  4313  02B1  0020               	movlb	0	; select bank0
  4314  02B2  0850               	movf	LCD_putcmd@lcddata,w
  4315  02B3  39FB               	andlw	251
  4316  02B4  00CD               	movwf	??_LCD_putcmd
  4317  02B5  084D               	movf	??_LCD_putcmd,w
  4318  02B6  00C6               	movwf	I2C_PCF8574_Write@value
  4319  02B7  084F               	movf	LCD_putcmd@addr,w
  4320  02B8  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  4321                           
  4322                           ;i2c_lcd.c: 51: if (cmdtype) {
  4323  02BB  0020               	movlb	0	; select bank0
  4324  02BC  084C               	movf	LCD_putcmd@cmdtype,w
  4325  02BD  1903               	btfsc	3,2
  4326  02BE  2ADF               	goto	l2180
  4327                           
  4328                           ;i2c_lcd.c: 53: lcddata = (((data) << 4) & 0xF0) | 0x08;
  4329  02BF  084B               	movf	LCD_putcmd@data,w
  4330  02C0  00CD               	movwf	??_LCD_putcmd
  4331  02C1  3003               	movlw	3
  4332  02C2                     u1215:	
  4333  02C2  35CD               	lslf	??_LCD_putcmd,f
  4334  02C3  3EFF               	addlw	-1
  4335  02C4  1D03               	skipz
  4336  02C5  2AC2               	goto	u1215
  4337  02C6  354D               	lslf	??_LCD_putcmd,w
  4338  02C7  39F0               	andlw	240
  4339  02C8  3808               	iorlw	8
  4340  02C9  00CE               	movwf	??_LCD_putcmd+1
  4341  02CA  084E               	movf	??_LCD_putcmd+1,w
  4342  02CB  00D0               	movwf	LCD_putcmd@lcddata
  4343                           
  4344                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr, lcddata | 0x04);
  4345  02CC  0850               	movf	LCD_putcmd@lcddata,w
  4346  02CD  3804               	iorlw	4
  4347  02CE  00CD               	movwf	??_LCD_putcmd
  4348  02CF  084D               	movf	??_LCD_putcmd,w
  4349  02D0  00C6               	movwf	I2C_PCF8574_Write@value
  4350  02D1  084F               	movf	LCD_putcmd@addr,w
  4351  02D2  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  4352                           
  4353                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr, lcddata & ~0x04);
  4354  02D5  0020               	movlb	0	; select bank0
  4355  02D6  0850               	movf	LCD_putcmd@lcddata,w
  4356  02D7  39FB               	andlw	251
  4357  02D8  00CD               	movwf	??_LCD_putcmd
  4358  02D9  084D               	movf	??_LCD_putcmd,w
  4359  02DA  00C6               	movwf	I2C_PCF8574_Write@value
  4360  02DB  084F               	movf	LCD_putcmd@addr,w
  4361  02DC  3183  23F9  3182   	fcall	_I2C_PCF8574_Write
  4362  02DF                     l2180:	
  4363                           
  4364                           ;i2c_lcd.c: 56: }
  4365                           ;i2c_lcd.c: 57: delay_ms(2);
  4366  02DF  3002               	movlw	2
  4367  02E0  0020               	movlb	0	; select bank0
  4368  02E1  00C5               	movwf	delay_ms@ms
  4369  02E2  3000               	movlw	0
  4370  02E3  00C6               	movwf	delay_ms@ms+1
  4371  02E4  3184  24AD         	fcall	_delay_ms
  4372  02E6  0008               	return
  4373  02E7                     __end_of_LCD_putcmd:	
  4374                           
  4375                           	psect	text21
  4376  04AD                     __ptext21:	
  4377 ;; *************** function _delay_ms *****************
  4378 ;; Defined at:
  4379 ;;		line 278 in file "main.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  ms              2    0[BANK0 ] unsigned int 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  u               2    2[BANK0 ] unsigned int 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;Total ram usage:        4 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    2
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_main
  4404 ;;		_LCD_putcmd
  4405 ;;		_LCD_init
  4406 ;;		_ad
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function _delay_ms
  4412  04AD                     _delay_ms:	
  4413  04AD                     l2090:	
  4414                           ;main.c: 279: uint16_t u;
  4415                           ;main.c: 280: while (ms--) {
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  4419                           
  4420  04AD  3001               	movlw	1
  4421  04AE  0020               	movlb	0	; select bank0
  4422  04AF  02C5               	subwf	delay_ms@ms,f
  4423  04B0  3000               	movlw	0
  4424  04B1  3BC6               	subwfb	delay_ms@ms+1,f
  4425  04B2  0A45               	incf	delay_ms@ms,w
  4426  04B3  1903               	btfsc	3,2
  4427  04B4  0A46               	incf	delay_ms@ms+1,w
  4428  04B5  1903               	btfsc	3,2
  4429  04B6  0008               	return
  4430                           
  4431                           ;main.c: 282: for (u = 0; u < (((32000000) / 8000U) / 10U); u++) {
  4432  04B7  0020               	movlb	0	; select bank0
  4433  04B8  01C7               	clrf	delay_ms@u
  4434  04B9  01C8               	clrf	delay_ms@u+1
  4435  04BA                     L5:	
  4436  04BA  3001               	movlw	1
  4437  04BB  0248               	subwf	delay_ms@u+1,w
  4438  04BC  3090               	movlw	144
  4439  04BD  1903               	skipnz
  4440  04BE  0247               	subwf	delay_ms@u,w
  4441  04BF  1803               	btfsc	3,0
  4442  04C0  2CAD               	goto	l2090
  4443  04C1  0000               	nop	;# 
  4444  04C2  3001               	movlw	1
  4445  04C3  0020               	movlb	0	; select bank0
  4446  04C4  07C7               	addwf	delay_ms@u,f
  4447  04C5  3000               	movlw	0
  4448  04C6  3DC8               	addwfc	delay_ms@u+1,f
  4449  04C7  2CBA               	goto	L5
  4450  04C8                     __end_of_delay_ms:	
  4451                           
  4452                           	psect	text22
  4453  03F9                     __ptext22:	
  4454 ;; *************** function _I2C_PCF8574_Write *****************
  4455 ;; Defined at:
  4456 ;;		line 29 in file "i2c_lcd.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  addr            1    wreg     unsigned char 
  4459 ;;  value           1    1[BANK0 ] unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  addr            1    4[BANK0 ] unsigned char 
  4462 ;;  s               1    5[BANK0 ] char 
  4463 ;;  dummy           1    3[BANK0 ] char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      char 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, pclath, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4473 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;Total ram usage:        5 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    4
  4480 ;; This function calls:
  4481 ;;		_i2c_start
  4482 ;;		_i2c_stop
  4483 ;;		_i2c_write
  4484 ;; This function is called by:
  4485 ;;		_LCD_putcmd
  4486 ;;		_LCD_putch
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _I2C_PCF8574_Write
  4492  03F9                     _I2C_PCF8574_Write:	
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _I2C_PCF8574_Write: [wreg+status,2+status,0+pclath+cstack]
  4496                           ;I2C_PCF8574_Write@addr stored from wreg
  4497  03F9  0020               	movlb	0	; select bank0
  4498  03FA  00C9               	movwf	I2C_PCF8574_Write@addr
  4499                           
  4500                           ;i2c_lcd.c: 30: int8_t s, dummy;
  4501                           ;i2c_lcd.c: 31: i2c_start();
  4502  03FB  3185  254E  3183   	fcall	_i2c_start
  4503                           
  4504                           ;i2c_lcd.c: 32: s = i2c_write(addr << 1);
  4505  03FE  0020               	movlb	0	; select bank0
  4506  03FF  3549               	lslf	I2C_PCF8574_Write@addr,w
  4507  0400  3185  250E  3183   	fcall	_i2c_write
  4508  0403  0020               	movlb	0	; select bank0
  4509  0404  00C7               	movwf	??_I2C_PCF8574_Write
  4510  0405  0847               	movf	??_I2C_PCF8574_Write,w
  4511  0406  00CA               	movwf	I2C_PCF8574_Write@s
  4512                           
  4513                           ;i2c_lcd.c: 33: if (s < 0) {
  4514  0407  1FCA               	btfss	I2C_PCF8574_Write@s,7
  4515  0408  2C11               	goto	l2114
  4516                           
  4517                           ;i2c_lcd.c: 34: dummy = SSPBUF;
  4518  0409  0024               	movlb	4	; select bank4
  4519  040A  0811               	movf	17,w	;volatile
  4520  040B  0020               	movlb	0	; select bank0
  4521  040C  00C7               	movwf	??_I2C_PCF8574_Write
  4522  040D  0847               	movf	??_I2C_PCF8574_Write,w
  4523  040E  00C8               	movwf	I2C_PCF8574_Write@dummy
  4524                           
  4525                           ;i2c_lcd.c: 35: WCOL = 0;
  4526  040F  0024               	movlb	4	; select bank4
  4527  0410  1395               	bcf	21,7	;volatile
  4528  0411                     l2114:	
  4529                           
  4530                           ;i2c_lcd.c: 36: }
  4531                           ;i2c_lcd.c: 37: s = i2c_write(value);
  4532  0411  0020               	movlb	0	; select bank0
  4533  0412  0846               	movf	I2C_PCF8574_Write@value,w
  4534  0413  3185  250E  3183   	fcall	_i2c_write
  4535  0416  0020               	movlb	0	; select bank0
  4536  0417  00C7               	movwf	??_I2C_PCF8574_Write
  4537  0418  0847               	movf	??_I2C_PCF8574_Write,w
  4538  0419  00CA               	movwf	I2C_PCF8574_Write@s
  4539                           
  4540                           ;i2c_lcd.c: 38: i2c_stop();
  4541  041A  3185  2549         	fcall	_i2c_stop
  4542  041C  0008               	return
  4543  041D                     __end_of_I2C_PCF8574_Write:	
  4544                           ;i2c_lcd.c: 39: return s;
  4545                           ;	Return value of _I2C_PCF8574_Write is never used
  4546                           
  4547                           
  4548                           	psect	text23
  4549  050E                     __ptext23:	
  4550 ;; *************** function _i2c_write *****************
  4551 ;; Defined at:
  4552 ;;		line 46 in file "i2c.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  data            1    wreg     volatile unsigned char 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  data            1    0[BANK0 ] volatile unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      char 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;Total ram usage:        1 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    3
  4573 ;; This function calls:
  4574 ;;		_i2c_wait
  4575 ;; This function is called by:
  4576 ;;		_I2C_PCF8574_Write
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function _i2c_write
  4582  050E                     _i2c_write:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in _i2c_write: [wreg+status,2+status,0+pclath+cstack]
  4586                           ;i2c_write@data stored from wreg
  4587  050E  0020               	movlb	0	; select bank0
  4588  050F  00C5               	movwf	i2c_write@data	;volatile
  4589                           
  4590                           ;i2c.c: 47: i2c_wait();
  4591  0510  3185  2527  3185   	fcall	_i2c_wait
  4592                           
  4593                           ;i2c.c: 48: SSPBUF = data;
  4594  0513  0020               	movlb	0	; select bank0
  4595  0514  0845               	movf	i2c_write@data,w	;volatile
  4596  0515  0024               	movlb	4	; select bank4
  4597  0516  0091               	movwf	17	;volatile
  4598                           
  4599                           ;i2c.c: 49: if (WCOL)
  4600  0517  1F95               	btfss	21,7	;volatile
  4601  0518  2D1B               	goto	l2076
  4602                           
  4603                           ;i2c.c: 50: return -1;
  4604  0519  30FF               	movlw	255
  4605  051A  0008               	return
  4606  051B                     l2076:	
  4607                           
  4608                           ;i2c.c: 51: return 0;
  4609  051B  3000               	movlw	0
  4610  051C  0008               	return
  4611  051D                     __end_of_i2c_write:	
  4612                           
  4613                           	psect	text24
  4614  0549                     __ptext24:	
  4615 ;; *************** function _i2c_stop *****************
  4616 ;; Defined at:
  4617 ;;		line 29 in file "i2c.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;		None
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;		None
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  1    wreg      void 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2, status,0, pclath, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4635 ;;Total ram usage:        0 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    3
  4638 ;; This function calls:
  4639 ;;		_i2c_wait
  4640 ;; This function is called by:
  4641 ;;		_I2C_PCF8574_Write
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           
  4646                           ;psect for function _i2c_stop
  4647  0549                     _i2c_stop:	
  4648                           
  4649                           ;i2c.c: 30: i2c_wait();
  4650                           
  4651                           ;incstack = 0
  4652                           ; Regs used in _i2c_stop: [wreg+status,2+status,0+pclath+cstack]
  4653  0549  3185  2527         	fcall	_i2c_wait
  4654                           
  4655                           ;i2c.c: 31: PEN = 1;
  4656  054B  0024               	movlb	4	; select bank4
  4657  054C  1516               	bsf	22,2	;volatile
  4658  054D  0008               	return
  4659  054E                     __end_of_i2c_stop:	
  4660                           
  4661                           	psect	text25
  4662  054E                     __ptext25:	
  4663 ;; *************** function _i2c_start *****************
  4664 ;; Defined at:
  4665 ;;		line 19 in file "i2c.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, pclath, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4683 ;;Total ram usage:        0 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    3
  4686 ;; This function calls:
  4687 ;;		_i2c_wait
  4688 ;; This function is called by:
  4689 ;;		_I2C_PCF8574_Write
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function _i2c_start
  4695  054E                     _i2c_start:	
  4696                           
  4697                           ;i2c.c: 20: i2c_wait();
  4698                           
  4699                           ;incstack = 0
  4700                           ; Regs used in _i2c_start: [wreg+status,2+status,0+pclath+cstack]
  4701  054E  3185  2527         	fcall	_i2c_wait
  4702                           
  4703                           ;i2c.c: 21: SEN = 1;
  4704  0550  0024               	movlb	4	; select bank4
  4705  0551  1416               	bsf	22,0	;volatile
  4706  0552  0008               	return
  4707  0553                     __end_of_i2c_start:	
  4708                           
  4709                           	psect	text26
  4710  0527                     __ptext26:	
  4711 ;; *************** function _i2c_wait *****************
  4712 ;; Defined at:
  4713 ;;		line 12 in file "i2c.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    2
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_i2c_start
  4738 ;;		_i2c_stop
  4739 ;;		_i2c_write
  4740 ;;		_i2c_restart
  4741 ;;		_i2c_sendACK
  4742 ;;		_i2c_sendNACK
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function _i2c_wait
  4748  0527                     _i2c_wait:	
  4749  0527                     l2054:	
  4750                           ;i2c.c: 14: while (SSP1STAT & 0x05) ;
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in _i2c_wait: [wreg+status,2]
  4754                           
  4755  0527  0024               	movlb	4	; select bank4
  4756  0528  0814               	movf	20,w	;volatile
  4757  0529  3905               	andlw	5
  4758  052A  1D03               	btfss	3,2
  4759  052B  2D27               	goto	l2054
  4760  052C                     l2056:	
  4761                           ;i2c.c: 16: while (SSP1CON2 & 0x1F) ;
  4762                           
  4763  052C  0816               	movf	22,w	;volatile
  4764  052D  391F               	andlw	31
  4765  052E  1903               	btfsc	3,2
  4766  052F  0008               	return
  4767  0530  2D2C               	goto	l2056
  4768  0531                     __end_of_i2c_wait:	
  4769                           
  4770                           	psect	intentry
  4771  0004                     __pintentry:	
  4772 ;; *************** function _ISR *****************
  4773 ;; Defined at:
  4774 ;;		line 29 in file "main.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        3 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    1
  4795 ;; This function calls:
  4796 ;;		_getc
  4797 ;;		_putc
  4798 ;; This function is called by:
  4799 ;;		Interrupt level 1
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803  0004                     _ISR:	
  4804                           
  4805                           ;incstack = 0
  4806  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4807                           
  4808                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4809  0005  3180               	pagesel	$
  4810  0006  0020               	movlb	0	; select bank0
  4811  0007  087F               	movf	127,w
  4812  0008  00F5               	movwf	??_ISR+2
  4813                           
  4814                           ;main.c: 30: if (CCP1IF) {
  4815  0009  1D11               	btfss	17,2	;volatile
  4816  000A  281D               	goto	i1l1918
  4817                           
  4818                           ;main.c: 31: CCP1IF = 0;
  4819  000B  1111               	bcf	17,2	;volatile
  4820                           
  4821                           ;main.c: 32: if (CCP1M0) {
  4822  000C  0025               	movlb	5	; select bank5
  4823  000D  1C13               	btfss	19,0	;volatile
  4824  000E  2814               	goto	i1l248
  4825                           
  4826                           ;main.c: 33: CCP1M0 = 0;
  4827  000F  1013               	bcf	19,0	;volatile
  4828                           
  4829                           ;main.c: 34: CCPR1 += pulse_high;
  4830  0010  087A               	movf	_pulse_high,w	;volatile
  4831  0011  0791               	addwf	17,f	;volatile
  4832  0012  087B               	movf	_pulse_high+1,w	;volatile
  4833  0013  281C               	goto	L6
  4834  0014                     i1l248:	
  4835                           ;main.c: 35: } else {
  4836                           
  4837                           
  4838                           ;main.c: 36: CCP1M0 = 1;
  4839  0014  1413               	bsf	19,0	;volatile
  4840                           
  4841                           ;main.c: 37: CCPR1 += pulse_low;
  4842  0015  0020               	movlb	0	; select bank0
  4843  0016  085D               	movf	_pulse_low,w	;volatile
  4844  0017  0025               	movlb	5	; select bank5
  4845  0018  0791               	addwf	17,f	;volatile
  4846  0019  0020               	movlb	0	; select bank0
  4847  001A  085E               	movf	_pulse_low+1,w	;volatile
  4848  001B  0025               	movlb	5	; select bank5
  4849  001C                     L6:	
  4850  001C  3D92               	addwfc	18,f	;volatile
  4851  001D                     i1l1918:	
  4852                           
  4853                           ;main.c: 38: }
  4854                           ;main.c: 39: }
  4855                           ;main.c: 41: if (RCIF) {
  4856  001D  0020               	movlb	0	; select bank0
  4857  001E  1E91               	btfss	17,5	;volatile
  4858  001F  2830               	goto	i1l1928
  4859                           
  4860                           ;main.c: 42: RCIF = 0;
  4861  0020  1291               	bcf	17,5	;volatile
  4862                           
  4863                           ;main.c: 43: putc(RC1REG);
  4864  0021  0023               	movlb	3	; select bank3
  4865  0022  0819               	movf	25,w	;volatile
  4866  0023  3184  241D  3180   	fcall	_putc
  4867                           
  4868                           ;main.c: 44: if (RC1REG == 0x0d)
  4869  0026  300D               	movlw	13
  4870  0027  0023               	movlb	3	; select bank3
  4871  0028  0619               	xorwf	25,w	;volatile
  4872  0029  1D03               	btfss	3,2
  4873  002A  2830               	goto	i1l1928
  4874                           
  4875                           ;main.c: 45: complete = 1;
  4876  002B  3001               	movlw	1
  4877  002C  00F3               	movwf	??_ISR
  4878  002D  0873               	movf	??_ISR,w
  4879  002E  0020               	movlb	0	; select bank0
  4880  002F  00A2               	movwf	_complete	;volatile
  4881  0030                     i1l1928:	
  4882                           
  4883                           ;main.c: 46: }
  4884                           ;main.c: 48: if (TXIF) {
  4885  0030  0020               	movlb	0	; select bank0
  4886  0031  1E11               	btfss	17,4	;volatile
  4887  0032  2843               	goto	i1l252
  4888                           
  4889                           ;main.c: 49: TXIF = 0;
  4890  0033  1211               	bcf	17,4	;volatile
  4891                           
  4892                           ;main.c: 50: if (c = getc())
  4893  0034  3184  2459  3180   	fcall	_getc
  4894  0037  00F3               	movwf	??_ISR
  4895  0038  0873               	movf	??_ISR,w
  4896  0039  00F8               	movwf	_c	;volatile
  4897  003A  0878               	movf	_c,w	;volatile
  4898  003B  1903               	btfsc	3,2
  4899  003C  2841               	goto	i1l253
  4900                           
  4901                           ;main.c: 51: TX1REG = c;
  4902  003D  0878               	movf	_c,w	;volatile
  4903  003E  0023               	movlb	3	; select bank3
  4904  003F  009A               	movwf	26	;volatile
  4905  0040  2843               	goto	i1l252
  4906  0041                     i1l253:	
  4907                           
  4908                           ;main.c: 52: else
  4909                           ;main.c: 53: TXIE = 0;
  4910  0041  0021               	movlb	1	; select bank1
  4911  0042  1211               	bcf	17,4	;volatile
  4912  0043                     i1l252:	
  4913                           
  4914                           ;main.c: 54: }
  4915                           ;main.c: 56: if (TMR0IF && TMR0IE) {
  4916  0043  190B               	btfsc	11,2	;volatile
  4917  0044  1E8B               	btfss	11,5	;volatile
  4918  0045  288C               	goto	i1l264
  4919                           
  4920                           ;main.c: 57: LATC3 = 1;
  4921  0046  0022               	movlb	2	; select bank2
  4922  0047  158E               	bsf	14,3	;volatile
  4923                           
  4924                           ;main.c: 58: TMR0IF = 0;
  4925  0048  110B               	bcf	11,2	;volatile
  4926                           
  4927                           ;main.c: 59: TMR0 = (255 - (250-1));
  4928  0049  3006               	movlw	6
  4929  004A  0020               	movlb	0	; select bank0
  4930  004B  0095               	movwf	21	;volatile
  4931                           
  4932                           ;main.c: 60: LATC4 ^= 1;
  4933  004C  0022               	movlb	2	; select bank2
  4934  004D  3010               	movlw	16
  4935  004E  068E               	xorwf	14,f
  4936                           
  4937                           ;main.c: 62: timer0_counter++;
  4938  004F  3001               	movlw	1
  4939  0050  00F3               	movwf	??_ISR
  4940  0051  0873               	movf	??_ISR,w
  4941  0052  07F9               	addwf	_timer0_counter,f	;volatile
  4942                           
  4943                           ;main.c: 65: if (timer0_counter & 0x02) {
  4944  0053  1CF9               	btfss	_timer0_counter,1	;volatile
  4945  0054  286E               	goto	i1l256
  4946                           
  4947                           ;main.c: 66: if (timer0_counter & 0x01) {
  4948  0055  1C79               	btfss	_timer0_counter,0	;volatile
  4949  0056  2859               	goto	i1l257
  4950                           
  4951                           ;main.c: 67: ADCON0 = (2 << 2) | 1;
  4952  0057  3009               	movlw	9
  4953  0058  2871               	goto	L7
  4954  0059                     i1l257:	
  4955                           ;main.c: 70: } else if (!ADGO) {
  4956                           
  4957                           ;main.c: 68: ADGO = 1;
  4958                           
  4959  0059  0021               	movlb	1	; select bank1
  4960  005A  189D               	btfsc	29,1	;volatile
  4961  005B  288A               	goto	i1l1964
  4962                           
  4963                           ;main.c: 72: adc_poti += ADRESL;
  4964  005C  081B               	movf	27,w	;volatile
  4965  005D  00F3               	movwf	??_ISR
  4966  005E  01F4               	clrf	??_ISR+1
  4967  005F  0873               	movf	??_ISR,w
  4968  0060  07F6               	addwf	_adc_poti,f	;volatile
  4969  0061  0874               	movf	??_ISR+1,w
  4970  0062  3DF7               	addwfc	_adc_poti+1,f	;volatile
  4971                           
  4972                           ;main.c: 73: adc_poti = adc_poti >> 1;
  4973  0063  0877               	movf	_adc_poti+1,w	;volatile
  4974  0064  00F4               	movwf	??_ISR+1
  4975  0065  0876               	movf	_adc_poti,w	;volatile
  4976  0066  00F3               	movwf	??_ISR
  4977  0067  36F4               	lsrf	??_ISR+1,f
  4978  0068  0CF3               	rrf	??_ISR,f
  4979  0069  0873               	movf	??_ISR,w
  4980  006A  00F6               	movwf	_adc_poti	;volatile
  4981  006B  0874               	movf	??_ISR+1,w
  4982  006C  00F7               	movwf	_adc_poti+1	;volatile
  4983                           
  4984                           ;main.c: 74: }
  4985                           ;main.c: 75: } else {
  4986  006D  288A               	goto	i1l1964
  4987  006E                     i1l256:	
  4988                           
  4989                           ;main.c: 76: if (timer0_counter & 0x01) {
  4990  006E  1C79               	btfss	_timer0_counter,0	;volatile
  4991  006F  2875               	goto	i1l261
  4992                           
  4993                           ;main.c: 77: ADCON0 = (4 << 2) | 1;
  4994  0070  3011               	movlw	17
  4995  0071                     L7:	
  4996  0071  0021               	movlb	1	; select bank1
  4997  0072  009D               	movwf	29	;volatile
  4998                           
  4999                           ;main.c: 78: ADGO = 1;
  5000  0073  149D               	bsf	29,1	;volatile
  5001                           
  5002                           ;main.c: 80: } else if (!ADGO) {
  5003  0074  288A               	goto	i1l1964
  5004  0075                     i1l261:	
  5005  0075  0021               	movlb	1	; select bank1
  5006  0076  189D               	btfsc	29,1	;volatile
  5007  0077  288A               	goto	i1l1964
  5008                           
  5009                           ;main.c: 82: adc_sense += ADRESL;
  5010  0078  081B               	movf	27,w	;volatile
  5011  0079  00F3               	movwf	??_ISR
  5012  007A  01F4               	clrf	??_ISR+1
  5013  007B  0873               	movf	??_ISR,w
  5014  007C  0020               	movlb	0	; select bank0
  5015  007D  07A0               	addwf	_adc_sense,f	;volatile
  5016  007E  0874               	movf	??_ISR+1,w
  5017  007F  3DA1               	addwfc	_adc_sense+1,f	;volatile
  5018                           
  5019                           ;main.c: 83: adc_sense = adc_poti >> 1;
  5020  0080  0877               	movf	_adc_poti+1,w	;volatile
  5021  0081  00F4               	movwf	??_ISR+1
  5022  0082  0876               	movf	_adc_poti,w	;volatile
  5023  0083  00F3               	movwf	??_ISR
  5024  0084  36F4               	lsrf	??_ISR+1,f
  5025  0085  0CF3               	rrf	??_ISR,f
  5026  0086  0873               	movf	??_ISR,w
  5027  0087  00A0               	movwf	_adc_sense	;volatile
  5028  0088  0874               	movf	??_ISR+1,w
  5029  0089  00A1               	movwf	_adc_sense+1	;volatile
  5030  008A                     i1l1964:	
  5031                           
  5032                           ;main.c: 84: }
  5033                           ;main.c: 85: }
  5034                           ;main.c: 86: LATC3 = 0;
  5035  008A  0022               	movlb	2	; select bank2
  5036  008B  118E               	bcf	14,3	;volatile
  5037  008C                     i1l264:	
  5038  008C  0875               	movf	??_ISR+2,w
  5039  008D  0020               	movlb	0	; select bank0
  5040  008E  00FF               	movwf	127
  5041  008F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5042  0090  0009               	retfie
  5043  0091                     __end_of_ISR:	
  5044                           
  5045                           	psect	text28
  5046  041D                     __ptext28:	
  5047 ;; *************** function _putc *****************
  5048 ;; Defined at:
  5049 ;;		line 99 in file "usart.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  c               1    wreg     unsigned char 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  c               1    1[COMMON] unsigned char 
  5054 ;;  head            1    2[COMMON] unsigned char 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      void 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;Total ram usage:        3 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_ISR
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _putc
  5079  041D                     _putc:	
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _putc: [wreg+fsr1l+fsr1h+status,2+status,0]
  5083                           ;putc@c stored from wreg
  5084  041D  00F1               	movwf	putc@c
  5085                           
  5086                           ;usart.c: 100: unsigned char head;
  5087                           ;usart.c: 101: head = rx_fifo.head;
  5088  041E  0021               	movlb	1	; select bank1
  5089  041F  0820               	movf	_rx_fifo^(0+128),w
  5090  0420  00F0               	movwf	??_putc
  5091  0421  0870               	movf	??_putc,w
  5092  0422  00F2               	movwf	putc@head
  5093                           
  5094                           ;usart.c: 102: head++;
  5095  0423  3001               	movlw	1
  5096  0424  00F0               	movwf	??_putc
  5097  0425  0870               	movf	??_putc,w
  5098  0426  07F2               	addwf	putc@head,f
  5099                           
  5100                           ;usart.c: 103: head &= (32 -1);
  5101  0427  301F               	movlw	31
  5102  0428  00F0               	movwf	??_putc
  5103  0429  0870               	movf	??_putc,w
  5104  042A  05F2               	andwf	putc@head,f
  5105                           
  5106                           ;usart.c: 104: if (head != rx_fifo.tail) {
  5107  042B  0821               	movf	(_rx_fifo^(0+128)+1),w
  5108  042C  0672               	xorwf	putc@head,w
  5109  042D  1903               	skipnz
  5110  042E  0008               	return
  5111                           
  5112                           ;usart.c: 105: rx_fifo.head = head;
  5113  042F  0872               	movf	putc@head,w
  5114  0430  00F0               	movwf	??_putc
  5115  0431  0870               	movf	??_putc,w
  5116  0432  00A0               	movwf	_rx_fifo^(0+128)
  5117                           
  5118                           ;usart.c: 106: rx_fifo.data[head] = c;
  5119  0433  0871               	movf	putc@c,w
  5120  0434  00F0               	movwf	??_putc
  5121  0435  0872               	movf	putc@head,w
  5122  0436  3EA2               	addlw	(low ((_rx_fifo| 0+2)))& (0+255)
  5123  0437  0086               	movwf	6
  5124  0438  0187               	clrf	7
  5125  0439  0870               	movf	??_putc,w
  5126  043A  0081               	movwf	1
  5127  043B  0008               	return
  5128  043C                     __end_of_putc:	
  5129                           
  5130                           	psect	text29
  5131  0459                     __ptext29:	
  5132 ;; *************** function _getc *****************
  5133 ;; Defined at:
  5134 ;;		line 125 in file "usart.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  tail            1    1[COMMON] unsigned char 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      unsigned char 
  5141 ;; Registers used:
  5142 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;Total ram usage:        2 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_ISR
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _getc
  5163  0459                     _getc:	
  5164                           
  5165                           ;usart.c: 126: unsigned char tail;
  5166                           ;usart.c: 127: tail = tx_fifo.tail;
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _getc: [wreg+fsr1l+fsr1h+status,2+status,0]
  5170  0459  0020               	movlb	0	; select bank0
  5171  045A  0824               	movf	_tx_fifo+1,w
  5172  045B  00F0               	movwf	??_getc
  5173  045C  0870               	movf	??_getc,w
  5174  045D  00F1               	movwf	getc@tail
  5175                           
  5176                           ;usart.c: 128: if (tail != tx_fifo.head) {
  5177  045E  0823               	movf	_tx_fifo,w
  5178  045F  0671               	xorwf	getc@tail,w
  5179  0460  1903               	skipnz
  5180  0461  2C74               	goto	i1l1676
  5181                           
  5182                           ;usart.c: 129: tail++;
  5183  0462  3001               	movlw	1
  5184  0463  00F0               	movwf	??_getc
  5185  0464  0870               	movf	??_getc,w
  5186  0465  07F1               	addwf	getc@tail,f
  5187                           
  5188                           ;usart.c: 130: tail &= (32 -1);
  5189  0466  301F               	movlw	31
  5190  0467  00F0               	movwf	??_getc
  5191  0468  0870               	movf	??_getc,w
  5192  0469  05F1               	andwf	getc@tail,f
  5193                           
  5194                           ;usart.c: 131: tx_fifo.tail = tail;
  5195  046A  0871               	movf	getc@tail,w
  5196  046B  00F0               	movwf	??_getc
  5197  046C  0870               	movf	??_getc,w
  5198  046D  00A4               	movwf	_tx_fifo+1
  5199                           
  5200                           ;usart.c: 132: return tx_fifo.data[tail];
  5201  046E  0871               	movf	getc@tail,w
  5202  046F  3E25               	addlw	(low ((_tx_fifo| 0+2)))& (0+255)
  5203  0470  0086               	movwf	6
  5204  0471  0187               	clrf	7
  5205  0472  0801               	movf	1,w
  5206  0473  0008               	return
  5207  0474                     i1l1676:	
  5208                           
  5209                           ;usart.c: 133: }
  5210                           ;usart.c: 134: return 0;
  5211  0474  3000               	movlw	0
  5212  0475  0008               	return
  5213  0476                     __end_of_getc:	
  5214  007E                     btemp	set	126	;btemp
  5215  007E                     int$flags	set	126
  5216  007E                     wtemp	set	126
  5217  007E                     wtemp0	set	126
  5218  0080                     wtemp1	set	128
  5219  0082                     wtemp2	set	130
  5220  0084                     wtemp3	set	132
  5221  0086                     wtemp4	set	134
  5222  0088                     wtemp5	set	136
  5223  007F                     wtemp6	set	127
  5224  007E                     ttemp	set	126
  5225  007E                     ttemp0	set	126
  5226  0081                     ttemp1	set	129
  5227  0084                     ttemp2	set	132
  5228  0087                     ttemp3	set	135
  5229  007F                     ttemp4	set	127
  5230  007E                     ltemp	set	126
  5231  007E                     ltemp0	set	126
  5232  0082                     ltemp1	set	130
  5233  0086                     ltemp2	set	134
  5234  0080                     ltemp3	set	128


Data Sizes:
    Strings     42
    Constant    0
    Data        6
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     24      65
    BANK1            80      0      34
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    hex_to_byte@fifo	PTR struct serial_buffer size(1) Largest target is 34
		 -> rx_fifo(BANK1[34]), 

    getchar_fifo@fifo	PTR struct serial_buffer size(1) Largest target is 34
		 -> rx_fifo(BANK1[34]), 

    putchar_fifo@fifo	PTR struct serial_buffer size(1) Largest target is 34
		 -> tx_fifo(BANK0[34]), 

    sData	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), 

    LCD_puts@s	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[16]), STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_putc

Critical Paths under _main in BANK0

    _main->_LCD_puts
    _command_parser->_hex_to_byte
    _hex_to_byte->_getchar_fifo
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_init->_LCD_putcmd
    _LCD_goto->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_i2c_write

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   17731
                                             17 BANK0      7     7      0
                           _LCD_goto
                           _LCD_init
                          _LCD_putch
                         _LCD_putcmd
                           _LCD_puts
                             ___wmul
                            _ad_init
                           _cog_init
                     _command_parser
                           _delay_ms
                       _getchar_fifo
                           _i2c_init
                      _nibble_to_hex
                           _pps_init
                       _putchar_fifo
                        _system_init
                        _timer0_init
                        _timer1_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pps_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nibble_to_hex                                        3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _command_parser                                       5     5      0    1888
                                             10 BANK0      3     3      0
                       _getchar_fifo
                        _hex_to_byte
                       _putchar_fifo
 ---------------------------------------------------------------------------------
 (1) _putchar_fifo                                         5     4      1     647
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _hex_to_byte                                          5     5      0     796
                                              5 BANK0      5     5      0
                       _getchar_fifo
                      _hex_to_nibble
 ---------------------------------------------------------------------------------
 (3) _hex_to_nibble                                        1     1      0     217
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getchar_fifo                                         5     5      0     380
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _cog_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ad_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             6     4      2    1400
                                             11 BANK0      6     4      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (2) _LCD_putch                                            5     4      1    1171
                                              6 BANK0      5     4      1
                  _I2C_PCF8574_Write
                      _nibble_to_hex (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    4084
                                             12 BANK0      2     2      0
                         _LCD_putcmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_goto                                             4     2      2    3852
                                             12 BANK0      4     2      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (1) _LCD_putcmd                                           6     4      2    3381
                                              6 BANK0      6     4      2
                  _I2C_PCF8574_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             4     2      2     424
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _I2C_PCF8574_Write                                    5     4      1     660
                                              1 BANK0      5     4      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) _i2c_write                                            1     1      0      31
                                              0 BANK0      1     1      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (5) _i2c_wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  3     3      0     160
                                              3 COMMON     3     3      0
                               _getc
                               _putc
 ---------------------------------------------------------------------------------
 (7) _putc                                                 3     3      0      91
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) _getc                                                 2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_goto
     _LCD_putcmd
       _I2C_PCF8574_Write
         _i2c_start
           _i2c_wait
         _i2c_stop
           _i2c_wait
         _i2c_write
           _i2c_wait
       _delay_ms
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _i2c_start
           _i2c_wait
         _i2c_stop
           _i2c_wait
         _i2c_write
           _i2c_wait
       _delay_ms
     _delay_ms
   _LCD_putch
     _I2C_PCF8574_Write
       _i2c_start
         _i2c_wait
       _i2c_stop
         _i2c_wait
       _i2c_write
         _i2c_wait
     _nibble_to_hex (ARG)
   _LCD_putcmd
     _I2C_PCF8574_Write
       _i2c_start
         _i2c_wait
       _i2c_stop
         _i2c_wait
       _i2c_write
         _i2c_wait
     _delay_ms
   _LCD_puts
     _LCD_putch
       _I2C_PCF8574_Write
         _i2c_start
           _i2c_wait
         _i2c_stop
           _i2c_wait
         _i2c_write
           _i2c_wait
       _nibble_to_hex (ARG)
   ___wmul
   _ad_init
   _cog_init
   _command_parser
     _getchar_fifo
     _hex_to_byte
       _getchar_fifo
       _hex_to_nibble
     _putchar_fifo
   _delay_ms
   _getchar_fifo
   _i2c_init
   _nibble_to_hex
   _pps_init
   _putchar_fifo
   _system_init
   _timer0_init
   _timer1_init
   _uart_init

 _ISR (ROOT)
   _getc
   _putc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      41       5       81.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      22       7       42.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      6F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      6F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Mar 22 18:06:01 2018

                         _c 0078         ___wmul@multiplicand 0047         __end_of_system_init 03D4  
               __CFG_LVP$ON 0000                         l324 00F1                         l326 0106  
                       l524 047F                         _GIE 005F                         _PS1 04A9  
                       _PEN 10B2                         _ISR 0004                         _SEN 10B0  
                       _PSA 04AB                         _RX9 0CEE                         _TX9 0CF6  
           ?_command_parser 0070                         wreg 0009                 ?_LCD_putcmd 004B  
            __p_mfx_hi_text 101C              __p_mfx_lo_text 1018                        ?_ISR 0070  
              ?_hex_to_byte 0070                _putchar_fifo 0381                        l2102 037F  
                      l2114 0411                        l2054 0527                        l2056 052C  
                      l2136 04AA                        l2128 049F                        l2090 04AD  
                      l2410 0479                        l2162 0353                        l2076 051B  
                      l2180 02DF                        l2156 0336                        l2404 04ED  
                      l2350 0200                        l2344 01F2                        l2362 021B  
                      l2380 0440                        l2356 020A                        l2390 0278  
                      l2366 023A                        l2392 0284                        l2384 0255  
                      l2368 0248                        l2464 0108                        l2456 00E9  
                      l2386 0260                        l2388 026C                        l2396 0290  
                      l2488 016A                        _ADGO 04E9                        STR_1 1024  
                      STR_2 1036                        STR_3 1046                        _BRGH 0CF2  
                      _CREN 0CEC                        u1215 02C2                        u1225 0306  
                      u1185 0339            getchar_fifo@fifo 0049                        u1275 0480  
                      u1355 0142                        u1285 0485                 main@counter 005B  
                      _PEIE 005E                        _RCIE 048D                        _RCIF 008D  
          getchar_fifo@tail 0048                        _TMR0 0015                        _TMR2 001A  
                      _WCOL 10AF                        _SPEN 0CEF                        _RSEN 10B1  
                      _TX9D 0CF0                        _TRMT 0CF1                        _TXIE 048C  
                      _TXEN 0CF5                        _TXIF 008C                        _SYNC 0CF4  
          LCD_putch@lcddata 004F                        _getc 0459                        _main 00C2  
__size_of_I2C_PCF8574_Write 0024                        fsr0h 0005                        fsr1h 0007  
                      fsr0l 0004                        indf0 0000                        indf1 0001  
                      fsr1l 0006                        _putc 041D                        btemp 007E  
                      ltemp 007E                        start 0091                        ttemp 007E  
            ??_getchar_fifo 0045                        wtemp 007E                main@ad_value 0058  
            LCD_goto@column 0052               __CFG_MCLRE$ON 0000          __size_of_LCD_putch 003C  
                     ??_ISR 0073            __end_of_LCD_init 01E6            __end_of_LCD_goto 02A0  
          __end_of_LCD_puts 0459                       ?_getc 0070                       ?_main 0070  
                     _ACKEN 10B4                       _ACKDT 10B5                       _CCPR1 0291  
                     _BRG16 0CFB               __CFG_WDTE$OFF 0000                       ?_putc 0070  
                     _T1CON 0018                       _T2CON 001C                       _LATB4 086C  
                     _LATC3 0873                       _LATC4 0874                       _LATC5 0875  
           __end_of_ad_init 0543                       i1l252 0043                       i1l261 0075  
                     i1l253 0041                       i1l256 006E                       i1l264 008C  
                     i1l248 0014                       i1l257 0059          I2C_PCF8574_Write@s 004A  
                     _TMR1H 0017                       _TMR1L 0016                       _SPBRG 019B  
                     _RXPPS 0E24               _hex_to_nibble 0492                       _sData 005F  
                     main@c 005A                       ltemp0 007E                       ltemp1 0082  
                     ltemp2 0086                       ltemp3 0080                       putc@c 0071  
                     ttemp0 007E                       ttemp1 0081                       ttemp2 0084  
                     ttemp3 0087                       ttemp4 007F                       status 0003  
                     wtemp0 007E                       wtemp1 0080                       wtemp2 0082  
                     wtemp3 0084                       wtemp4 0086                       wtemp5 0088  
                     wtemp6 007F               getchar_fifo@c 0047             __initialization 0093  
               LCD_goto@row 0051         __size_of_LCD_putcmd 0047                 _system_init 03AC  
              __end_of_getc 0476                __end_of_main 0178                __end_of_putc 043C  
          __end_of_i2c_init 0527            __end_of_i2c_wait 0531            __end_of_i2c_stop 054E  
    __size_of_nibble_to_hex 0012                      ??_getc 0070                      ??_main 0056  
                    ??_putc 0070              __CFG_PLLEN$OFF 0000              ?_hex_to_nibble 0070  
         __end_of_LCD_putch 0323                      _ADCON0 009D                      _ADCON1 009E  
                    _ADCON2 009F                      _CCP1M0 1498                      _CCP1IE 048A  
                    _CCP1IF 008A                      _ADRESH 009C                      _ADRESL 009B  
                    _CCPR1H 0292                      _CCPR1L 0291                      _ANSELA 018C  
                    _ANSELB 018D                      _ANSELC 018E                      _RC1REG 0199  
                    _RA4PPS 0E94                      _RA5PPS 0E95                      _RC2PPS 0EA2  
                    _RB5PPS 0E9D                      _RC4PPS 0EA4                      _RB6PPS 0E9E  
                    i1l1676 0474                      i1l1918 001D                      i1l1928 0030  
                    i1l1964 008A                      _OSCCON 0099                      _TMR1GE 00CF  
                    _TMR0IE 005D                      _TMR0IF 005A                      _TMR0CS 04AD  
                    _TMR1IF 0088                      _TX1REG 019A                      _SSP1IF 008B  
                    _TRISA0 0460                      _TRISA2 0462                      _TRISC0 0470  
                    _TRISA4 0464                      _TRISC1 0471                      _TRISA5 0465  
                    _TRISC2 0472                      _TRISB4 046C                      _TRISC3 0473  
                    _TRISB5 046D                      _TRISC4 0474                      _TRISB6 046E  
                    _TRISC5 0475                      _SSPBUF 0211          __size_of_i2c_start 0005  
                    _TXREG1 019A          __size_of_i2c_write 000F            __end_of_delay_ms 04C8  
          __end_of_cog_init 04DD                      _dcc_hi 1004                      _dcc_lo 1000  
                    ___wmul 0476                      _mm1_hi 100C                      _mm2_hi 1014  
                    _mm1_lo 1008                      _mm2_lo 1010                ?_timer0_init 0070  
              ?_timer1_init 0070              __p_slx_xx_text 1020                   ??_ad_init 0045  
         LCD_putcmd@cmdtype 004C                      _mfx_hi 101C                      _mfx_lo 1018  
         LCD_putcmd@lcddata 0050                      _slx_xx 1020              _slx_xx_absaddr 1020  
              __pdataCOMMON 007A        __end_of_getchar_fifo 0381            __end_of_pps_init 03F9  
              hex_to_byte@c 004D                hex_to_byte@n 004E               _nibble_to_hex 04DD  
      __size_of_hex_to_byte 0032     __end_of__initialization 00BE                   ?_LCD_init 0070  
                 ?_LCD_goto 0051                   ?_LCD_puts 0050                LCD_init@addr 0052  
              LCD_goto@addr 0054              __pcstackCOMMON 0070                __pidataBANK0 0553  
            LCD_putcmd@addr 004F              LCD_putcmd@data 004B            ??_command_parser 004F  
           ??_hex_to_nibble 0045           __end_of_i2c_start 0553                   LCD_puts@i 0053  
                 LCD_puts@s 0050           __end_of_i2c_write 051D                ??_LCD_putcmd 004D  
            ?_nibble_to_hex 0070                  __pbssBANK0 0020                  __pbssBANK1 00A0  
                 ?_i2c_init 0070                   ?_i2c_wait 0070                LCD_puts@addr 0055  
                 ?_i2c_stop 0070                  ??_LCD_init 0051                  ??_LCD_goto 0053  
                ??_LCD_puts 0052                  __pmaintext 00C2          __end_of_LCD_putcmd 02E7  
                   ?___wmul 0045                  __pintentry 0004                     _CM1CON0 0111  
                   _CM1CON1 0112                     _CCP1CON 0293                     _CM2CON0 0113  
                   _CM2CON1 0114                     _COG1DBF 0696                     _COG1DBR 0695  
                   _COG1FIS 069B                     _COG1PHF 0692                     _COG1PHR 0691  
                   _COG1RIS 0699                     _COG1STR 069F          __size_of_uart_init 000F  
                 ?_delay_ms 0045                     _SSP1ADD 0212                   ?_cog_init 0070  
                   _PPSLOCK 0E0F                  ??_i2c_init 0045                  ??_i2c_wait 0045  
                ??_i2c_stop 0045                ?_system_init 0070                   ?_pps_init 0070  
           __size_of___wmul 001C                     _ad_init 053A       __size_of_getchar_fifo 002C  
      __size_of_timer0_init 0009        __size_of_timer1_init 0010                     __ptext1 04FF  
                   __ptext2 04EF                     __ptext3 0531                     __ptext4 03AC  
                   __ptext5 03D4                     __ptext6 04DD                     __ptext7 051D  
                   __ptext8 01E6                     __ptext9 0381                __size_of_ISR 008D  
                ??_delay_ms 0047               putchar_fifo@c 0048             ??_nibble_to_hex 0045  
                ??_cog_init 0045                     _rx_fifo 00A0                     _tx_fifo 0023  
                   clrloop0 0544                  delay_ms@ms 0045        end_of_initialization 00BE  
                 _LCD_putch 02E7           __end_of_uart_init 050E            putchar_fifo@head 0049  
          putchar_fifo@fifo 0045                _getchar_fifo 0355                  ??_pps_init 0045  
    I2C_PCF8574_Write@dummy 0048      I2C_PCF8574_Write@value 0046                __pstringtext 1024  
                 _SSPDATPPS 0E21                   _SSPCLKPPS 0E20            __CFG_FOSC$INTOSC 0000  
             i2c_write@data 0045                  _pulse_high 007A                  ?_LCD_putch 004B  
            nibble_to_hex@c 0046           __size_of_LCD_init 006E           __size_of_LCD_goto 004E  
         __size_of_LCD_puts 001D              _timer0_counter 0079              __end_of_dcc_hi 1008  
            __end_of_dcc_lo 1004              __end_of___wmul 0492              __end_of_mm1_hi 1010  
            __end_of_mm2_hi 1018              __end_of_mm1_lo 100C              __end_of_mm2_lo 1014  
             __pidataCOMMON 0557              __end_of_mfx_hi 1020              __end_of_mfx_lo 101C  
            __end_of_slx_xx 1024         start_initialization 0093                 __end_of_ISR 0091  
       nibble_to_hex@nibble 0047                   _i2c_start 054E                   _i2c_write 050E  
             ??_hex_to_byte 004A               ?_putchar_fifo 0045           __size_of_i2c_init 000A  
         __size_of_i2c_wait 000A           __size_of_i2c_stop 0005                    ??___wmul 0049  
               __pdataBANK0 005D        __size_of_system_init 0028                 __pbssCOMMON 0076  
     __end_of_hex_to_nibble 04AD               LCD_putch@addr 004E                   ___latbits 0002  
             LCD_putch@data 004B               __pcstackBANK0 0045                  ?_i2c_start 0070  
            ??_putchar_fifo 0046                  ?_i2c_write 0070                   _adc_sense 0020  
         __size_of_delay_ms 001B           __size_of_cog_init 0015                 ??_LCD_putch 004C  
       __end_of_hex_to_byte 0355              _dcc_hi_absaddr 1004                    ?_ad_init 0070  
         __size_of_pps_init 0025             command_parser@c 0051                    _CLC1SEL0 0F12  
                  _CLC1SEL1 0F13                    _COG1ASD0 069D                    _COG1ASD1 069E  
                  _COG1BLKF 0694                    _COG1CON0 0697                    _COG1CON1 0698  
                  _COG1BLKR 0693                    _COG1FSIM 069C                    _COG1RSIM 069A  
   __size_of_command_parser 006C              ___wmul@product 0049                   delay_ms@u 0047  
                  _LCD_init 0178                    _LCD_goto 0252                   clear_ram0 0543  
                  _LCD_puts 043C              _dcc_lo_absaddr 1000       I2C_PCF8574_Write@addr 0049  
                 _uart_init 04FF                    _SSP1CON1 0215                    _SSP1CON2 0216  
                  _SSP1CON3 0217               ??_timer0_init 0045               ??_timer1_init 0045  
                  _SSP1STAT 0214           ___wmul@multiplier 0045                   _pulse_low 005D  
            __p_dcc_hi_text 1004                 ??_i2c_start 0045                 ??_i2c_write 0045  
            __p_dcc_lo_text 1000       __end_of_nibble_to_hex 04EF                 _hex_to_byte 0323  
                  _i2c_init 051D                    _i2c_wait 0527                    _i2c_stop 0549  
            __p_mm1_hi_text 100C              __p_mm2_hi_text 1014              __p_mm1_lo_text 1008  
            __p_mm2_lo_text 1010              _mfx_hi_absaddr 101C        __end_of_putchar_fifo 03AC  
                ?_uart_init 0070            __size_of_ad_init 0009                    _adc_poti 0076  
       __end_of_timer0_init 053A         __end_of_timer1_init 04FF                    _delay_ms 04AD  
                  _cog_init 04C8                    __ptext10 0323                    __ptext11 0492  
                  __ptext20 02A0                    __ptext12 0355                    __ptext21 04AD  
                  __ptext13 04C8                    __ptext22 03F9                    __ptext14 053A  
                  __ptext23 050E                    __ptext15 0476                    __ptext24 0549  
                  __ptext16 043C                    __ptext25 054E                    __ptext17 02E7  
                  __ptext26 0527                    __ptext18 0178                    __ptext19 0252  
                  __ptext28 041D                    __ptext29 0459                    _complete 0022  
             __size_of_getc 001D               __size_of_main 00B6               __size_of_putc 001F  
         _I2C_PCF8574_Write 03F9              _mfx_lo_absaddr 1018                    getc@tail 0071  
        ?_I2C_PCF8574_Write 0046                    _pps_init 03D4                    int$flags 007E  
           hex_to_byte@fifo 004C              _mm1_hi_absaddr 100C                    main@temp 005C  
       ??_I2C_PCF8574_Write 0047                  _LCD_putcmd 02A0              _command_parser 01E6  
            _mm2_hi_absaddr 1014                    intlevel1 0000   __end_of_I2C_PCF8574_Write 041D  
         __CFG_CLKOUTEN$OFF 0000              _mm1_lo_absaddr 1008               ??_system_init 0045  
               ??_uart_init 0045              hex_to_nibble@c 0045                    putc@head 0072  
               _timer0_init 0531                 _timer1_init 04EF      __end_of_command_parser 0252  
            _mm2_lo_absaddr 1010       __size_of_putchar_fifo 002B               ?_getchar_fifo 0070  
    __size_of_hex_to_nibble 001B  
