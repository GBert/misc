<HTML>
<HEAD>
<TITLE>I/O Funktionen f&uuml; die Treiber der Clients</TITLE>
</HEAD>
<BODY>
<H1>I/O Funktionen f&uuml;r die Treiber der Clients</H1>
<P>
<P>
<H2>Bibliothek</H2>
<P>
<TABLE BORDER="1">
<TR><TH>Projekt</TH><TD>libs/io_fkts</TD></TR>
<TR><TH>Library</TH><TD>-</TD></TR>
<TR><TH>Includedatei</TH><TD>io.h</TD></TR>
</TABLE>
<P>
<H2>Definitionen</H2>
<P>
<PRE>#define IOFKT_INVALID_FD -1

typedef struct {
   void *private;
   int (*GetFd)(void *private);
   BOOL (*Open)(void *private);
   void (*Close)(void *private);
   BOOL (*Read)(void *private, int fd, BOOL PendingData,
                MrCs2CanDataType *CanMsg);
   BOOL (*Write)(void *private, int ReceiverSocket, MrCs2CanDataType *CanMsg);
} IoFktStruct;</PRE>
<P>
<H2>Beschreibung</H2>
<P>
Jeder Treiber mu&szlig; eine Initfunktion haben, die die <VAR>IoFktStruct</VAR>
mit den Funktionspointern f&uuml;llt. Die einzelnen Felder der Struktur sind
dabei wie folgt zu benutzen:
<P>
<TABLE BORDER=1">
<TR><TH>Feld</TH><TD>Beschreibung</TD>
<TR><TD>Open()</TD><TD>Die <VAR>Open</VAR> Funktion wird als erste Funktion
aufgerufen, um den Treiber zu &ouml;ffnen. Hier kann die Verbindung zu einem
Server aufgebaut werden. Oder selbst einen Socket f&uuml;r einen Dienst
ge&ouml;ffnet werden.</TD></TR>
<TR><TD>Close()</TD><TD>Die <VAR>Close</VAR> Funktion wird zum Ende aufgerufen
und kann die Sockets wieder schlie&szlig;en.</TD></TR>
<TR><TD>GetFd()</TD><TD>Diese Funktion liefert der Reihe nach jeden Socket, den
der Treiber benutzt. Nach dem letzten Socket liefet der n&auml;chste Aufruf den
Wer <VAR>IOFKT_INVALID_FD</VAR> als Indikator, da&szlig; der letzte Socket
geliefert wurde. Der danach n&auml;chste Aufruf f&auml;ngt wieder mit dem
ersten Socket an. Damit kann z.B. der allgemeine Teil alle Sockets f&uuml;r
den Aufruf von <VAR>select()</VAR> ermitteln.</TD></TR>
<TR><TD>Read()</TD><TD>Diese Funktion wird aufgerufen, wenn auf einem Socket
Daten gelesen werden k&ouml;nnen. Die Funktion hat folgende Parameter:<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>private</TD><TD>Zeiger auf private Daten des Treibers (s.u.)</TD></TR>
<TR><TD>fd</TD><TD>Socket bzw. Filedescriptor, der Daten zum Lesen liefern
kann.</TD></TR>
<TR><TD>PendingData</TD><TD>Wird auf <VAR>TRUE</VAR> gesetzt, wenn der
vorherige Aufruf Daten zu&uuml;ckgeliefert hat und der weitere Aufruf noch
m&ouml;glicherweise nicht gelesen Daten ohne erneute aufruf von select()
liefern soll. Siehe dazu die Benutzung im <VAR>common</VAR> Teil</TD></TR>
<TR><TD>CanMsg</TD><TD>Struktur f&uuml;r eine CAN Nachricht, die Anhand der
vorliegenden Daten passend gef&uuml;llt werden mu&szlig;</TD></TR>
<TR><TH>Returnwert:</TH><TD>TRUE, wenn die Struktur f&uuml;r eine CAN Nachricht
gef&uuml;llt wurde, deren Inhalt also g&uuml;ltig ist.</TD></TR>
</TABLE>
</TD></TR>
<TR><TD>Write()</TD><TD>Diese Funktion wird aufgerufen, wenn aus dem System
verschickt werden sollen. Die Funktion hat folgende Parameter:<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>private</TD><TD>Zeiger auf private Daten des Treibers (s.u.)</TD></TR>
<TR><TD>ReceiverSocket</TD><TD>Wenn die Message eine Antwort ist, kann dieser
Parameter den Sender der Anforderung enthalten. Dann werden die Daten nur
versendet, wenn dies der (oder einer der) eigene Socket ist. Ansonsten hat der
Parameter den Wert <VAR>MR_IPC_SOCKET_ALL</VAR>. Damit ist es z.B. m&ouml;glich,
die Dateien nur &uuml;ber die Schnittstelle zu senden, von der sie angefordert
wurden und damit den CAN Bus nicht zu belasten.</TD></TR>
<TR><TD>CanMsg</TD><TD>Struktur mit der zu versendenden CAN Nachricht</TD></TR>
<TR><TH>Returnwert:</TH><TD>TRUE, die Daten versendet wurden.</TD></TR>
</TABLE>
</TD></TR>
<TR><TD>private</TD><TD>Dies ist der Zeiger auf private Daten, der von der
Initfunktion des Treibers angelegt wurde.</TD></TR>
</TABLE>
</BODY>
</HTML>
