<HTML>
<HEAD>
<TITLE>Kommunikation von/zur drehscheibe</TITLE>
</HEAD>
<BODY>
<H1>Kommunikation von/zur drehscheibe</H1>
<P>
<H2>Bibliothek</H2>
<P>
<TABLE BORDER="1">
<TR><TH>Projekt</TH><TD>libs/mr_ipc</TD></TR>
<TR><TH>Library</TH><TD>libmr_ipc.a</TD></TR>
<TR><TH>Includedatei</TH><TD>mr_ipc.h</TD></TR>
</TABLE>
<P>
<P>
<H2>Definitionen</H2>
<P>
<H3>Konstanten</H3>
<P>
<H4>Konstanten f&uuml;r den Returncode der Funktion MrIpcSend()</H4>
<P>
<PRE>/* return values for function MrIpcSend() */
#define MR_IPC_RCV_ERROR  -1
#define MR_IPC_RCV_CLOSED 0
#define MR_IPC_RCV_OK     1</PRE>
<P>
<H4>Konstanten f&uuml;r Broadcast als Ziel-/Sendersocket</H4>
<P>
<PRE>#define MR_IPC_SOCKET_ALL -1</PRE>
<P>
<H3>Datentypen</H3>
<P>
<H4>Datentypen f&uuml;r einige Wertebereiche</H4>
<P>
<PRE>typedef enum { Off, On } SwitchType;
typedef enum { Forward, Backward } DirectionType;
typedef enum { Left, Right } PositionType;</PRE>
<P>
<H4>Datentyp f&uuml;r die Kommandos von/zur drehscheibe</H4>
<P>
<PRE>/* return values for function MrIpcCmdGetCmd() and Command field */
typedef enum {
   MrIpcCmdNull,                /* empty command */
   MrIpcCmdRun,                 /* system start/stop command */
   MrIpcCmdTrackProto,          /* system Gleis Protokoll */
   MrIpcCmdLocomotiveSpeed,     /* command to set speed of a locomotive */
   MrIpcCmdLocomotiveDirection, /* command to set direction of a locomotive */
   MrIpcCmdLocomotiveFunction,  /* command to set function of a locomotive */
   MrIpcCmdAccSwitch,           /* command to switch accesoires */
   MrIpcCmdRequestMember,       /* command to request CAN member */
   MrIpcCmdMember,              /* command to announce member */
   MrIpcCmdRequestLocName,      /* command to request loc name from MS2 */
   MrIpcCmdRequestLocInfo,      /* command to request loc info from MS2 */
   MrIpcCmdRequestFile,         /* command to request a .cs2 file from CS2 */
   MrIpcCmdCfgHeader,           /* command with header of cfg data */
   MrIpcCmdCfgZHeader,          /* command with header of z-packed cfg data */
   MrIpcCmdCfgData,             /* command with data of cfg data */
   MrIpcCmdSystemStatusVal,     /* command to set systam status cfg val */
   MrIpcCmdCanBootldrGeb,       /* command can bootloader gebunden */
   MrIpcCmdStatusRequest,       /* command request status */
   MrIpcCmdStatusSize,          /* command with number of packets in status */
   MrIpcCmdStatusData           /* command with status data */
} MrIpcCommandValue;</PRE>
<P>
<H4>Datentyp f&uuml;r Kommandoparameter als Werte</H4>
<P>
<PRE>typedef struct {
   unsigned long Lp1;
   unsigned int Ip1;
   unsigned int Ip2;
} IntDatas;</PRE>
<P>
<H4>Datentyp f&uuml;r Kommandoparameter als CAN Daten</H4>
<P>
<PRE>typedef struct {
   unsigned char Dlc;
   unsigned char Data[2 * MR_CS2_NUM_CAN_BYTES + 1];
} RawDatas;</PRE>
<P>
<H4>Datentype f&uuml;r ein Kommando von/zur drehscheibe</H4>
<P>
<PRE>typedef struct {
   MrIpcCommandValue Command;
   int SenderSocket;
   int ReceiverSocket;
   unsigned int CanResponse;
   unsigned int CanHash;
   unsigned int CanCommand;
   unsigned int CanPrio;
   union {
      IntDatas Ints;
      RawDatas Raws;
   } Parms;
} MrIpcCmdType;</PRE>
<P>
<H3>Makros</H3>
<P>
<H4>Makros, um Felder im Kommando zu setzen</H4>
<P>
<PRE>#define MrIpcSetCommand(Dat,c)        (Dat)->Command=htons(c)
#define MrIpcSetSenderSocket(Dat,v)   (Dat)->SenderSocket=v
#define MrIpcSetReceiverSocket(Dat,v) (Dat)->ReceiverSocket=v
#define MrIpcSetCanResponse(Dat,v)    (Dat)->CanResponse=htons(v)
#define MrIpcSetCanHash(Dat,v)        (Dat)->CanHash=htons(v)
#define MrIpcSetCanCommand(Dat,v)     (Dat)->CanCommand=htons(v)
#define MrIpcSetCanPrio(Dat,v)        (Dat)->CanPrio=htons(v)
#define MrIpcSetIntLp1(Dat,v)         (Dat)->Parms.Ints.Lp1=(unsigned long)htonl(v)
#define MrIpcSetIntIp1(Dat,v)         (Dat)->Parms.Ints.Ip1=htons(v)
#define MrIpcSetIntIp2(Dat,v)         (Dat)->Parms.Ints.Ip2=htons(v)
#define MrIpcSetRawDlc(Dat,v)         (Dat)->Parms.Raws.Dlc=v
#define MrIpcSetRawDataI(Dat,i,v)     (Dat)->Parms.Raws.Data[i]=v</PRE>
<P>
<H4>Makros, um Felder aus dem Kommando zu lesen</H4>
<P>
<PRE>#define MrIpcGetCommand(Dat)        ntohs((Dat)->Command)
#define MrIpcGetSenderSocket(Dat)   (Dat)->SenderSocket
#define MrIpcGetReceiverSocket(Dat) (Dat)->ReceiverSocket
#define MrIpcGetCanResponse(Dat)    ntohs((Dat)->CanResponse)
#define MrIpcGetCanHash(Dat)        ntohs((Dat)->CanHash)
#define MrIpcGetCanCommand(Dat)     ntohs((Dat)->CanCommand)
#define MrIpcGetCanPrio(Dat)        ntohs((Dat)->CanPrio)
#define MrIpcGetIntLp1(Dat)         (unsigned long)ntohl((Dat)->Parms.Ints.Lp1)
#define MrIpcGetIntIp1(Dat)         ntohs((Dat)->Parms.Ints.Ip1)
#define MrIpcGetIntIp2(Dat)         ntohs((Dat)->Parms.Ints.Ip2)
#define MrIpcGetRawDlc(Dat)         (Dat)->Parms.Raws.Dlc
#define MrIpcGetRawData(Dat)        (Dat)->Parms.Raws.Data
#define MrIpcGetRawDataI(Dat,i)     (Dat)->Parms.Raws.Data[i]</PRE>
<P>
<H4>Makros um Fuunktionen auf andere zu mappen</H4>
<P>
<PRE>#define MrIpcClose(socket) close(socket)
#define MrIpcCalcHash(Data,Uid) MrIpcSetCanHash(Data,MrCs2CalcHash(Uid))</PRE>
<P>
<H3>Funktionen</H3>
<P>
<H4>Funktionen f&uuml;r Verbindung und Daten&uuml;bertragung</H4>
<P>
<PRE>MrIpcCmdType *MrIpcCreate(void);
void MrIpcDestroy(MrIpcCmdType *Data);
void MrIpcInit(MrIpcCmdType *Data);
void MrIpcExit(MrIpcCmdType *Data);
int MrIpcConnect(char *Address, int Port);
int MrIpcConnectIf(char *Interface, int Port);
int MrIpcStartServer(char *Adress, int Port);
int MrIpcStartServerIf(char *Interface, int Port);
int MrIpcAccept(int ServerSock);
int MrIpcSend(int socket, MrIpcCmdType *Data);
int MrIpcRecv(int socket, MrIpcCmdType *Data);</PRE>
<P>
<H4>Funktionen zum Codieren/Decodieren Kommando nach CAN Message</H4>
<P>
<PRE>void MrIpcEncodeFromCan(MrIpcCmdType *Data, MrCs2CanDataType *CanMsg);
void MrIpcDecodeToCan(MrIpcCmdType *Data, MrCs2CanDataType *CanMsg);</PRE>
<P>
<H4>Funktionen zum Codieren der Kommando Parameter</H4>
<P>
<PRE>void MrIpcCmdSetNull(MrIpcCmdType *Data, unsigned char Dlc,
                     unsigned char *CanData);
void MrIpcCmdSetRun(MrIpcCmdType *Data, SwitchType Switch);
void MrIpcCmdSetTrackProto(MrIpcCmdType *Data, unsigned Protokoll);
void MrIpcCmdSetLocomotiveSpeed(MrIpcCmdType *Data, unsigned long Addr,
                                unsigned Speed);
void MrIpcCmdSetLocomotiveDir(MrIpcCmdType *Data, unsigned long Addr, DirectionType Direction);
void MrIpcCmdSetLocomotiveFkt(MrIpcCmdType *Data, unsigned long Addr,
                              unsigned Function, SwitchType Switch);
void MrIpcCmdSetAccPos(MrIpcCmdType *Data, unsigned long Addr,
                       PositionType Position, int Current);
void MrIpcCmdSetRequest(MrIpcCmdType *Data);
void MrIpcCmdSetRequestMember(MrIpcCmdType *Data);
void MrIpcCmdSetMember(MrIpcCmdType *Data, unsigned long Addr,
                       unsigned Version, unsigned Type);
void MrIpcCmdSetReqestLocname(MrIpcCmdType *Data, unsigned StartIdx,
                              unsigned EndIdx);
void MrIpcCmdSetReqestLocinfo(MrIpcCmdType *Data, char *Locname);
void MrIpcCmdSetQuery(MrIpcCmdType *Data, unsigned char Dlc, char *Name);
void MrIpcCmdSetCfgHeader(MrIpcCmdType *Data, unsigned long Length,
                          unsigned Crc);
void MrIpcCmdSetCfgZHeader(MrIpcCmdType *Data, unsigned long Length,
                           unsigned Crc);
void MrIpcCmdSetCfgData(MrIpcCmdType *Data, char *Buf);
void MrIpcCmdSetSystemStatusVal(MrIpcCmdType *Data, unsigned long Addr,
                                unsigned int Channel, unsigned int Value);
void MrIpcCmdSetCanBootldr(MrIpcCmdType *Data, unsigned Dlc,
                           unsigned char *CanData);
void MrIpcCmdSetStatusRequest(MrIpcCmdType *Data, unsigned long Addr,
                              unsigned int Index);
void MrIpcCmdSetStatusPos(MrIpcCmdType *Data, unsigned long Addr,
                          unsigned int Index, unsigned int NumPackets);
void MrIpcCmdSetStatusData(MrIpcCmdType *Data, unsigned char *Buf);</PRE>
<P>
<H4>Funktionen zum Decodieren der Kommando Parameter</H4>
<P>
<PRE>void MrIpcCmdGetNull(MrIpcCmdType *Data, unsigned char *Dlc, char *CanData);
void MrIpcCmdGetRun(MrIpcCmdType *Data, SwitchType *Switch);
void MrIpcCmdGetTrackProto(MrIpcCmdType *Data, unsigned *Protokoll);
void MrIpcCmdGetLocomotiveDir(MrIpcCmdType *Data, unsigned long *Addr,
                              DirectionType *Direction);
void MrIpcCmdGetLocomotiveSpeed(MrIpcCmdType *Data, unsigned long *Addr,
                                unsigned *Speed);
void MrIpcCmdGetLocomotiveFkt(MrIpcCmdType *Data, unsigned long *Addr,
                              unsigned *Function, SwitchType *Switch);
void MrIpcCmdGetAccPos(MrIpcCmdType *Data, unsigned long *Addr,
                       PositionType *Position, int *Current);
#define MrIpcCmdGetRequestMember(Data)
void MrIpcCmdGetMember(MrIpcCmdType *Data, unsigned long *Addr,
                       unsigned *Version, unsigned *Type);
void MrIpcCmdGetReqestLocname(MrIpcCmdType *Data, unsigned *StartIdx,
                              unsigned *EndIdx);
void MrIpcCmdGetReqestLocinfo(MrIpcCmdType *Data, char *Locinfo);
void MrIpcCmdGetQuery(MrIpcCmdType *Data, char *Name);
void MrIpcCmdGetCfgHeader(MrIpcCmdType *Data, unsigned long *Length,
                          unsigned *Crc);
void MrIpcCmdGetCfgZHeader(MrIpcCmdType *Data, unsigned long *Length,
                           unsigned *Crc);
void MrIpcCmdGetCfgData(MrIpcCmdType *Data, char *Buf);
void MrIpcCmdGetSystemStatusVal(MrIpcCmdType *Data, unsigned long *Addr, unsigned int *Channel, unsigned int *Value);
void MrIpcCmdGetCanBootldr(MrIpcCmdType *Data, unsigned *Dlc,
                           char *CanData);
void MrIpcCmdGetStatusRequest(MrIpcCmdType *Data, unsigned long *Addr,
                              unsigned int *Index);
void MrIpcCmdGetStatusPos(MrIpcCmdType *Data, unsigned long *Addr,
                          unsigned int *Index, unsigned int *NumPackets);
void MrIpcCmdGetStatusData(MrIpcCmdType *Data, unsigned char *Buf);</PRE>
<P>
<H2>Beschreibung</H2>
<P>
Die Bibliothek <VAR>mr_ipc</VAR> fa&szlig;t Datentypen und Funktionen
zusammen, die f&uuml;r die Kommunikation der Clients mit der
<VAR>drehscheibe</VAR> n&ouml;tig sind. Dies umfa&szlig;t zum einen den
Datentyp, der zwischen den Programmen &uuml;bertragen wird, als auch
Funktionen, um eine Verbbindung zu dem Server zu &ouml;ffnen und Daten zu
&uuml;bertragen. Der Name leitet sich von <B>I</B>nter <B>P</B>rocess
<B>C</B>ommunication ab. Das Protokoll orientiert sich an den CAN Nachrichten
von M&auml;rklin, da das Verteilen der M&auml;rklin CAN Nachrichten der
Haupteinsatzzweck ist. Ein universelles und herstellerunabh&auml;ngies
Protkoll l&auml;&szlig;t sich wegen unterschiedlicher Konzepte und
M&ouml;glichkeiten nur schwer definieren. Einige CAN Nachrichten haben keine
Entsprechnung im IPC Protokoll. Diese Nachrichten werden "roh" als CAN Frame
&uuml;bertragen.
<P>
F&uuml;r die Initialisierung, Aufbau einer Verbindung zur
<VAR>drehscheibe</VAR> und Versenden/Empfangen von Nachrichten gibt es die
folgenden Funktionen:
<P>
<TABLE BORDER=1">
<TR><TH>Funktion</TH><TD>Beschreibung</TD>
<TR><TD>MrIpcCreate()</TD><TD>Die <VAR>ConfigCreate</VAR> Funktion wird
als erste Funktion aufgerufen, um die Struktur anzulegen.</TD></TR>
<TR><TD>MrIpcDestroy()</TD><TD>Die <VAR>MrIpcDestroy</VAR> Funktion wird als
letzte Funktion aufgerufen und gibt die Struktur wieder frei.</TD></TR>
<TR><TD>MrIpcInit()</TD><TD>Die <VAR>ConfigInit</VAR> Funktion initialisiert
die internen Variablen.</TD></TR>
<TR><TD>MrIpcExit()</TD><TD>Die <VAR>MrIpcExit</VAR> Funktion ist das
Gegenst&uuml;ck zur <VAR>MrIpcInit</VAR> Funktion und beendet die Arbeit mit
dem IPC Modul.</TD></TR>
<TR><TD>MrIpcConnect()</TD><TD>Diese Funktion stellt eine Verbindung zur
<VAR>drehscheibe</VAR> her.<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>Address</TD><TD>IP Adresse zur <VAR>drehscheibe</VAR></TD></TR>
<TR><TD>Port</TD><TD>Portnummer der <VAR>drehscheibe</VAR></TD></TR>
<TR><TH>Returnwert:</TH><TD>Socket</TD></TR>
</TABLE></TD></TR>
<TR><TD>MrIpcConnectIf()</TD><TD>Diese Funktion stellt eine Verbindung zur
<VAR>drehscheibe</VAR> her.<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>Interface</TD><TD>Interface zur <VAR>drehscheibe</VAR></TD></TR>
<TR><TD>Port</TD><TD>Portnummer der <VAR>drehscheibe</VAR></TD></TR>
<TR><TH>Returnwert:</TH><TD>Socket</TD></TR>
</TABLE></TD></TR>
<TR><TD>MrIpcSend()</TD><TD>Diese Funktion versendet ein IPC Paket<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>socket</TD><TD>Socket zur <VAR>drehscheibe</VAR></TD></TR>
<TR><TD>Data</TD><TD>zu versendendes Paket</TD></TR>
<TR><TH>Returnwert:</TH><TD>Fehler oder OK (MR_IPC_RCV_OK,
MR_IPC_RCV_ERROR)</TD></TR>
</TABLE></TD></TR>
<TR><TD>MrIpcRecv()</TD><TD>Diese Funktion empf&auml;ngt ein IPC Paket<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>socket</TD><TD>Socket zur <VAR>drehscheibe</VAR></TD></TR>
<TR><TD>Data</TD><TD>zu versendendes Paket</TD></TR>
<TR><TH>Returnwert:</TH><TD>Fehler oder OK (MR_IPC_RCV_OK,
MR_IPC_RCV_ERROR)</TD></TR>
</TABLE></TD></TR>
</TABLE>
<P>
F&uuml;r das Codieren/Decodieren zwischen der IPC Nachricht und der Struktur
<VAR>MrCs2CanDataType</VAR>, die eine CAN Nachricht und die Informationen der
CAN ID enth&auml;lt, gibt es direkt 2 Funktionen:
<P>
<TABLE BORDER=1">
<TR><TH>Funktion</TH><TD>Beschreibung</TD>
<TR><TD>MrIpcEncodeFromCan()</TD><TD>Diese Funktion codiert die CanMsg in ein
IPC Paket.<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>Data</TD><TD>IPC Paket</TD></TR>
<TR><TD>CanMsg</TD><TD>zu codierende CAN Message</TD></TR>
</TABLE></TD></TR>
<TR><TD>MrIpcDecodeToCan()</TD><TD>Diese Funktion decodiert das IPC Paket in
eine CanMsg.<BR>
<TABLE BORDER="1">
<TR><TH>Parameter</TH><TH>Bedeutung</TH></TR>
<TR><TD>Data</TD><TD>IPC Paket</TD></TR>
<TR><TD>CanMsg</TD><TD>CAN Message f&uuml; decodiertes IPC Paket</TD></TR>
</TABLE></TD></TR>
</TABLE>
<P>
Zus&auml;tzlich gibt es noch Funktionen, die jeweils f&uuml;r eine spezielle
CAN Nachricht die Parameter in dem IPC Paket setzen bzw. aus dem IPC Paket
auslesen.
<P>
<VAR>MrIpcCmdSetXXX<VAR> setzt die Parameter f&uuml;r eine CAN Nachricht.
Zu&auml;tzlich m&uuml;ssen noch die anderen Felder des IPC Pakets gesetzt
werden. Das kann dann wie folgt aussehen:
<PRE>MrIpcInit(&Cmd);
MrIpcSetSenderSocket(&Cmd, MR_IPC_SOCKET_ALL);
MrIpcSetReceiverSocket(&Cmd, MR_IPC_SOCKET_ALL);
MrIpcSetCanResponse(&Cmd, 0);
MrIpcCalcHash(&Cmd, ZentraleGetUid(Data));
MrIpcSetCanCommand(&Cmd, MR_CS2_CMD_PING);
MrIpcSetCanPrio(&Cmd, MR_CS2_PRIO_2);
MrIpcCmdSetRequestMember(&Cmd);
MrIpcSend(ZentraleGetClientSock(Data), &Cmd);</PRE>
<P>
<VAR>MrIpcCmdGetXXX<VAR> liest die Parameter f&uuml;r eine CAN Nachricht aus
dem IPC Paket.
</BODY>
</HTML>
