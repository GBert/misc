ringb.c:    ring->buf_len = len;
ringb.c:    ring->buf = buf;
ringb.c:    ring->idx_r = 0;
ringb.c:    ring->idx_w = 0;
ringb.c:    if (ring->idx_r != ring->idx_w) {
ringb.c:	rval = ring->buf[ring->idx_r];
ringb.c:	ring->idx_r = (ring->idx_r + 1) % ring->buf_len;
ringb.c:    if (((ring->idx_w - ring->idx_r) % ring->buf_len) >= 0) {
ringb.c:	int rval = ring->buf[ring->idx_r];
ringb.c:	ring->idx_r = (ring->idx_r + 1) % ring->buf_len;
ringb.c:    unsigned int next = (ring->idx_w + 1) % ring->buf_len;
ringb.c:    if (next != ring->idx_r) {
ringb.c:	ring->buf[ring->idx_w] = c;
ringb.c:	ring->idx_w = next;
ringb.c:    if (((ring->idx_w - ring->idx_r) % ring->buf_len) == 0) {
ringb.c:    ring->buf[ring->idx_w] = c;
ringb.c:    ring->idx_w = (ring->idx_w + 1) % ring->buf_len;
ringb.c:    ring->idx_r = 0;
ringb.c:    ring->idx_w = 0;
ringb.c:    return ((unsigned int)(ring->idx_w - ring->idx_r) % ring->buf_len);
