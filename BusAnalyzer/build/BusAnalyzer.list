
build/BusAnalyzer.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <main>:
/******************************************************************************
 * Function definitions
 *****************************************************************************/

int main (void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	af00      	add	r7, sp, #0
    /* Basic RCC and PLL setup */
    SystemInit();
 8000110:	f002 fd64 	bl	8002bdc <SystemInit>

    /* Use 0 bits for preemption priority and 4 bits for sub-priority,
     * this shall disable interrupt nesting */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8000114:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8000118:	f005 fb1c 	bl	8005754 <NVIC_PriorityGroupConfig>

    Time_initialize();
 800011c:	f001 f940 	bl	80013a0 <Time_initialize>
	Communication_initialize();
 8000120:	f002 fbb2 	bl	8002888 <Communication_initialize>

	for(;;)
	{
		/* Do host communication (process commands, provide packets) */
		Communication_doBackground();
 8000124:	f002 fbf2 	bl	800290c <Communication_doBackground>
	}
 8000128:	e7fc      	b.n	8000124 <main+0x18>
 800012a:	bf00      	nop

0800012c <Interrupt_restore>:
 * Function definitions
 *****************************************************************************/

/** Globally enables interrupts if they were enabled */
static inline void Interrupt_restore(InterruptStatus_t status)
{
 800012c:	b580      	push	{r7, lr}
 800012e:	b082      	sub	sp, #8
 8000130:	af00      	add	r7, sp, #0
 8000132:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status & 0x01);
 8000134:	687b      	ldr	r3, [r7, #4]
 8000136:	f003 0301 	and.w	r3, r3, #1
 800013a:	4618      	mov	r0, r3
 800013c:	f002 fc52 	bl	80029e4 <__set_PRIMASK>
}
 8000140:	3708      	adds	r7, #8
 8000142:	46bd      	mov	sp, r7
 8000144:	bd80      	pop	{r7, pc}
 8000146:	bf00      	nop

08000148 <Interrupt_saveAndDisable>:

/** Globally disables interrupts if they are not already disabled */
static inline InterruptStatus_t Interrupt_saveAndDisable(void)
{
 8000148:	b580      	push	{r7, lr}
 800014a:	b082      	sub	sp, #8
 800014c:	af00      	add	r7, sp, #0
	InterruptStatus_t status;

    status = __get_PRIMASK();
 800014e:	f002 fc39 	bl	80029c4 <__get_PRIMASK>
 8000152:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status | 0x01);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f043 0301 	orr.w	r3, r3, #1
 800015a:	4618      	mov	r0, r3
 800015c:	f002 fc42 	bl	80029e4 <__set_PRIMASK>

    return status;
 8000160:	687b      	ldr	r3, [r7, #4]
}
 8000162:	4618      	mov	r0, r3
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop

0800016c <DefaultCanCbState>:

/******************************************************************************
 * @brief Default CAN state changed call-back function.
 *****************************************************************************/
static void DefaultCanCbState(CanState_t state)
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
    (void)state;
}
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800017e:	4770      	bx	lr

08000180 <DefaultCanCbError>:

/******************************************************************************
 * @brief Default CAN error detected call-back function.
 *****************************************************************************/
static void DefaultCanCbError(CanError_t error)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
    (void)error;
}
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000192:	4770      	bx	lr

08000194 <DefaultCanCbRxMsg>:

/******************************************************************************
 * @brief Default CAN receive message event call-back function.
 *****************************************************************************/
static void DefaultCanCbRxMsg(const CanRxMsg* pMsg)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
    (void)pMsg;
}
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop

080001a8 <DefaultCanCbTxMsg>:

/******************************************************************************
 * @brief Default CAN transmit message event call-back function.
 *****************************************************************************/
static void DefaultCanCbTxMsg(const CanTxMsg* pMsg, uint8_t isQueued)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	460b      	mov	r3, r1
 80001b2:	70fb      	strb	r3, [r7, #3]
    (void)pMsg;
    (void)isQueued;
}
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop

080001c0 <CalculateBitTiming>:
 * @param pCanInitParams: The returned bit timing parameters.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
static uint8_t CalculateBitTiming(uint32_t baudRate, CAN_InitTypeDef* pCanInitParams)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b09b      	sub	sp, #108	; 0x6c
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
    const uint32_t tseg1Max = 16;
 80001ca:	2310      	movs	r3, #16
 80001cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    const uint32_t tseg2Min = 1;
 80001ce:	2301      	movs	r3, #1
 80001d0:	64bb      	str	r3, [r7, #72]	; 0x48
    const uint32_t tseg2Max = 8;
 80001d2:	2308      	movs	r3, #8
 80001d4:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t sjwMax = 4;
 80001d6:	2304      	movs	r3, #4
 80001d8:	643b      	str	r3, [r7, #64]	; 0x40
    const uint32_t brpMin = 1;
 80001da:	2301      	movs	r3, #1
 80001dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t brpMax = 512;
 80001de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001e2:	63bb      	str	r3, [r7, #56]	; 0x38
    const uint32_t baudRateDeviation = baudRate >> 7; /* BaudRate / 128 => around 1 percent deviation */
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	09db      	lsrs	r3, r3, #7
 80001e8:	637b      	str	r3, [r7, #52]	; 0x34
    const uint32_t samplePointDesired = 192; /* 0.75 * 256 (scale to allow usage of fixed point arithmetic) */
 80001ea:	23c0      	movs	r3, #192	; 0xc0
 80001ec:	633b      	str	r3, [r7, #48]	; 0x30
    const uint32_t samplePointDeviation = 38;  /* 0.15 * 256 (scale to allow usage of fixed point arithmetic) */
 80001ee:	2326      	movs	r3, #38	; 0x26
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t solutionFound = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint32_t lastBaudRateError = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	663b      	str	r3, [r7, #96]	; 0x60
    uint32_t lastSamplePointError = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t brp;
    uint32_t tseg1;
    uint32_t tseg2;

    for (tseg2 = tseg2Min; tseg2 <= tseg2Max; tseg2++)
 8000200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000202:	653b      	str	r3, [r7, #80]	; 0x50
 8000204:	e0a0      	b.n	8000348 <CalculateBitTiming+0x188>
    {
        /* TSEG1 must be at least as large as TSEG2 in order to reach a sample point > 0.5 */
        for (tseg1 = tseg2; tseg1 <= tseg1Max; tseg1++)
 8000206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000208:	657b      	str	r3, [r7, #84]	; 0x54
 800020a:	e095      	b.n	8000338 <CalculateBitTiming+0x178>
        {
            uint32_t numTq = tseg1 + tseg2 + 1; /* Number of time quanta per CAN bit */
 800020c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800020e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000210:	4413      	add	r3, r2
 8000212:	3301      	adds	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t brpEstimate = SystemFrequency_APB1Clk / (numTq * baudRate);
 8000216:	f645 3370 	movw	r3, #23408	; 0x5b70
 800021a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000222:	6879      	ldr	r1, [r7, #4]
 8000224:	fb01 f303 	mul.w	r3, r1, r3
 8000228:	fbb2 f3f3 	udiv	r3, r2, r3
 800022c:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t brpLowerLimit = (brpEstimate > brpMin) ? (brpEstimate - 1) : brpMin;
 800022e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000232:	429a      	cmp	r2, r3
 8000234:	d902      	bls.n	800023c <CalculateBitTiming+0x7c>
 8000236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000238:	3b01      	subs	r3, #1
 800023a:	e000      	b.n	800023e <CalculateBitTiming+0x7e>
 800023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800023e:	623b      	str	r3, [r7, #32]
            uint32_t brpUpperLimit = (brpEstimate < brpMax) ? (brpEstimate + 1) : brpMax;
 8000240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000244:	429a      	cmp	r2, r3
 8000246:	d202      	bcs.n	800024e <CalculateBitTiming+0x8e>
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	3301      	adds	r3, #1
 800024c:	e000      	b.n	8000250 <CalculateBitTiming+0x90>
 800024e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000250:	61fb      	str	r3, [r7, #28]

            /* Only useful BRPs within a certain range are tested */
            for (brp = brpLowerLimit; brp <= brpUpperLimit; brp++)
 8000252:	6a3b      	ldr	r3, [r7, #32]
 8000254:	65bb      	str	r3, [r7, #88]	; 0x58
 8000256:	e068      	b.n	800032a <CalculateBitTiming+0x16a>
            {
                uint32_t calcBaudRate = SystemFrequency_APB1Clk / (numTq * brp);
 8000258:	f645 3370 	movw	r3, #23408	; 0x5b70
 800025c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000264:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000266:	fb01 f303 	mul.w	r3, r1, r3
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	61bb      	str	r3, [r7, #24]
                uint32_t baudRateError = (calcBaudRate > baudRate) ? (calcBaudRate - baudRate)
                                                                   : (baudRate - calcBaudRate);
 8000270:	69ba      	ldr	r2, [r7, #24]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d903      	bls.n	8000280 <CalculateBitTiming+0xc0>
 8000278:	69ba      	ldr	r2, [r7, #24]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	e002      	b.n	8000286 <CalculateBitTiming+0xc6>
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	1ad3      	subs	r3, r2, r3

            /* Only useful BRPs within a certain range are tested */
            for (brp = brpLowerLimit; brp <= brpUpperLimit; brp++)
            {
                uint32_t calcBaudRate = SystemFrequency_APB1Clk / (numTq * brp);
                uint32_t baudRateError = (calcBaudRate > baudRate) ? (calcBaudRate - baudRate)
 8000286:	617b      	str	r3, [r7, #20]
                                                                   : (baudRate - calcBaudRate);

                if (baudRateError <= baudRateDeviation)
 8000288:	697a      	ldr	r2, [r7, #20]
 800028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800028c:	429a      	cmp	r2, r3
 800028e:	d849      	bhi.n	8000324 <CalculateBitTiming+0x164>
                {
                    uint32_t samplePoint = ((tseg1 + 1) << 8) / numTq; /* SP * 256 (scale to allow usage of fixed point arithmetic) */
 8000290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000292:	3301      	adds	r3, #1
 8000294:	021a      	lsls	r2, r3, #8
 8000296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000298:	fbb2 f3f3 	udiv	r3, r2, r3
 800029c:	613b      	str	r3, [r7, #16]
                    uint32_t samplePointError = (samplePoint > samplePointDesired) ? (samplePoint - samplePointDesired)
                                                                                   : samplePointDesired - samplePoint;
 800029e:	693a      	ldr	r2, [r7, #16]
 80002a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d903      	bls.n	80002ae <CalculateBitTiming+0xee>
 80002a6:	693a      	ldr	r2, [r7, #16]
 80002a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	e002      	b.n	80002b4 <CalculateBitTiming+0xf4>
 80002ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	1ad3      	subs	r3, r2, r3
                                                                   : (baudRate - calcBaudRate);

                if (baudRateError <= baudRateDeviation)
                {
                    uint32_t samplePoint = ((tseg1 + 1) << 8) / numTq; /* SP * 256 (scale to allow usage of fixed point arithmetic) */
                    uint32_t samplePointError = (samplePoint > samplePointDesired) ? (samplePoint - samplePointDesired)
 80002b4:	60fb      	str	r3, [r7, #12]
                                                                                   : samplePointDesired - samplePoint;

                    if (samplePointError <= samplePointDeviation)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d832      	bhi.n	8000324 <CalculateBitTiming+0x164>
                    {
                        if (   (0 != solutionFound)
 80002be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d008      	beq.n	80002d8 <CalculateBitTiming+0x118>
                            && ((samplePointError > lastSamplePointError) || (baudRateError > lastBaudRateError)))
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d803      	bhi.n	80002d6 <CalculateBitTiming+0x116>
 80002ce:	697a      	ldr	r2, [r7, #20]
 80002d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d900      	bls.n	80002d8 <CalculateBitTiming+0x118>
                        {
                            /* New solution is not better than old one */
                            continue;
 80002d6:	e025      	b.n	8000324 <CalculateBitTiming+0x164>
                        }

                        solutionFound = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

                        /* New or better solution found */
                        pCanInitParams->CAN_Prescaler = (uint16_t)brp;
 80002de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	801a      	strh	r2, [r3, #0]
                        pCanInitParams->CAN_BS1 = (uint8_t)(tseg1 - 1);
 80002e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	3b01      	subs	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	711a      	strb	r2, [r3, #4]
                        pCanInitParams->CAN_BS2 = (uint8_t)(tseg2 - 1);
 80002f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	3b01      	subs	r3, #1
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	715a      	strb	r2, [r3, #5]
                        pCanInitParams->CAN_SJW = (tseg2 <= sjwMax) ? (tseg2 - 1) : (sjwMax - 1);
 80002fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000302:	429a      	cmp	r2, r3
 8000304:	d804      	bhi.n	8000310 <CalculateBitTiming+0x150>
 8000306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000308:	b2db      	uxtb	r3, r3
 800030a:	3b01      	subs	r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	e003      	b.n	8000318 <CalculateBitTiming+0x158>
 8000310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000312:	b2db      	uxtb	r3, r3
 8000314:	3b01      	subs	r3, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	683a      	ldr	r2, [r7, #0]
 800031a:	70d3      	strb	r3, [r2, #3]
                        lastBaudRateError = baudRateError;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	663b      	str	r3, [r7, #96]	; 0x60
                        lastSamplePointError = samplePointError;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	65fb      	str	r3, [r7, #92]	; 0x5c
            uint32_t brpEstimate = SystemFrequency_APB1Clk / (numTq * baudRate);
            uint32_t brpLowerLimit = (brpEstimate > brpMin) ? (brpEstimate - 1) : brpMin;
            uint32_t brpUpperLimit = (brpEstimate < brpMax) ? (brpEstimate + 1) : brpMax;

            /* Only useful BRPs within a certain range are tested */
            for (brp = brpLowerLimit; brp <= brpUpperLimit; brp++)
 8000324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000326:	3301      	adds	r3, #1
 8000328:	65bb      	str	r3, [r7, #88]	; 0x58
 800032a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	429a      	cmp	r2, r3
 8000330:	d992      	bls.n	8000258 <CalculateBitTiming+0x98>
    uint32_t tseg2;

    for (tseg2 = tseg2Min; tseg2 <= tseg2Max; tseg2++)
    {
        /* TSEG1 must be at least as large as TSEG2 in order to reach a sample point > 0.5 */
        for (tseg1 = tseg2; tseg1 <= tseg1Max; tseg1++)
 8000332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000334:	3301      	adds	r3, #1
 8000336:	657b      	str	r3, [r7, #84]	; 0x54
 8000338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800033a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800033c:	429a      	cmp	r2, r3
 800033e:	f67f af65 	bls.w	800020c <CalculateBitTiming+0x4c>
    uint32_t lastSamplePointError = 0;
    uint32_t brp;
    uint32_t tseg1;
    uint32_t tseg2;

    for (tseg2 = tseg2Min; tseg2 <= tseg2Max; tseg2++)
 8000342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000344:	3301      	adds	r3, #1
 8000346:	653b      	str	r3, [r7, #80]	; 0x50
 8000348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800034a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800034c:	429a      	cmp	r2, r3
 800034e:	f67f af5a 	bls.w	8000206 <CalculateBitTiming+0x46>
                }
            }
        }
    }

    return (0 != solutionFound) ? 0 : 1;
 8000352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000356:	2b00      	cmp	r3, #0
 8000358:	bf14      	ite	ne
 800035a:	2300      	movne	r3, #0
 800035c:	2301      	moveq	r3, #1
 800035e:	b2db      	uxtb	r3, r3
}
 8000360:	4618      	mov	r0, r3
 8000362:	376c      	adds	r7, #108	; 0x6c
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <Can_initialize>:
 * @param singleShotMode: Indicates if single-shot mode is to be used.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
uint8_t Can_initialize(uint32_t baudRate, uint8_t silentMode, uint8_t singleShotMode, uint8_t busOffRecoveryMode)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08e      	sub	sp, #56	; 0x38
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	70f9      	strb	r1, [r7, #3]
 8000376:	70ba      	strb	r2, [r7, #2]
 8000378:	707b      	strb	r3, [r7, #1]
    CAN_FilterInitTypeDef canFilterInitParams;
    InterruptStatus_t status;
    uint32_t i;

    /* Enable clock for CAN peripheral */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 800037a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800037e:	2101      	movs	r1, #1
 8000380:	f003 fbe2 	bl	8003b48 <RCC_APB1PeriphClockCmd>

    /* Enable clock for GPIO used by CAN */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8000384:	2005      	movs	r0, #5
 8000386:	2101      	movs	r1, #1
 8000388:	f003 fbb6 	bl	8003af8 <RCC_APB2PeriphClockCmd>

    /* Configure CANRX (PA.11) */
    ioInitParams.GPIO_Pin = GPIO_Pin_11;
 800038c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000390:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 8000392:	2303      	movs	r3, #3
 8000394:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    ioInitParams.GPIO_Mode = GPIO_Mode_IPU;
 8000398:	2348      	movs	r3, #72	; 0x48
 800039a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(GPIOA, &ioInitParams);
 800039e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80003aa:	4619      	mov	r1, r3
 80003ac:	f002 fdbe 	bl	8002f2c <GPIO_Init>

    /* Configure CANTX (PA.12) */
    ioInitParams.GPIO_Pin = GPIO_Pin_12;
 80003b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 80003b6:	2303      	movs	r3, #3
 80003b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    ioInitParams.GPIO_Mode = GPIO_Mode_AF_PP;
 80003bc:	2318      	movs	r3, #24
 80003be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(GPIOA, &ioInitParams);
 80003c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80003ce:	4619      	mov	r1, r3
 80003d0:	f002 fdac 	bl	8002f2c <GPIO_Init>

    CAN_StructInit(&canInitParams);
 80003d4:	f107 0320 	add.w	r3, r7, #32
 80003d8:	4618      	mov	r0, r3
 80003da:	f004 fae7 	bl	80049ac <CAN_StructInit>
    canInitParams.CAN_Mode = (0 != silentMode) ? CAN_Mode_Silent : CAN_Mode_Normal;
 80003de:	78fb      	ldrb	r3, [r7, #3]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <Can_initialize+0x7c>
 80003e4:	2302      	movs	r3, #2
 80003e6:	e000      	b.n	80003ea <Can_initialize+0x7e>
 80003e8:	2300      	movs	r3, #0
 80003ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    canInitParams.CAN_NART = (0 != singleShotMode) ? ENABLE : DISABLE;
 80003ee:	78bb      	ldrb	r3, [r7, #2]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2300      	moveq	r3, #0
 80003f6:	2301      	movne	r3, #1
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    canInitParams.CAN_ABOM = (0 != busOffRecoveryMode) ? ENABLE : DISABLE;
 80003fe:	787b      	ldrb	r3, [r7, #1]
 8000400:	2b00      	cmp	r3, #0
 8000402:	bf0c      	ite	eq
 8000404:	2300      	moveq	r3, #0
 8000406:	2301      	movne	r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (0 != CalculateBitTiming(baudRate, &canInitParams))
 800040e:	f107 0320 	add.w	r3, r7, #32
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	4619      	mov	r1, r3
 8000416:	f7ff fed3 	bl	80001c0 <CalculateBitTiming>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <Can_initialize+0xb8>
    {
        return 1;
 8000420:	2301      	movs	r3, #1
 8000422:	e09e      	b.n	8000562 <Can_initialize+0x1f6>
    }

    /* Begin of critical section, no CAN interrupts shall fire unless the
     * initialization has been completed. */
    status = Interrupt_saveAndDisable();
 8000424:	f7ff fe90 	bl	8000148 <Interrupt_saveAndDisable>
 8000428:	6338      	str	r0, [r7, #48]	; 0x30

    CAN_Init(CAN1, &canInitParams);
 800042a:	f107 0320 	add.w	r3, r7, #32
 800042e:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000432:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000436:	4619      	mov	r1, r3
 8000438:	f004 f8ee 	bl	8004618 <CAN_Init>

    /* Enable CAN transmit mailbox empty interrupt */
    intInitParams.NVIC_IRQChannel = USB_HP_CAN1_TX_IRQn;
 800043c:	2313      	movs	r3, #19
 800043e:	773b      	strb	r3, [r7, #28]
    intInitParams.NVIC_IRQChannelCmd = ENABLE;
 8000440:	2301      	movs	r3, #1
 8000442:	77fb      	strb	r3, [r7, #31]
    intInitParams.NVIC_IRQChannelPreemptionPriority = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	777b      	strb	r3, [r7, #29]
    intInitParams.NVIC_IRQChannelSubPriority = 1;
 8000448:	2301      	movs	r3, #1
 800044a:	77bb      	strb	r3, [r7, #30]
    NVIC_Init(&intInitParams);
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4618      	mov	r0, r3
 8000452:	f005 f993 	bl	800577c <NVIC_Init>
    CAN_ITConfig(CAN1, CAN_IT_TME, ENABLE);
 8000456:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 800045a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800045e:	2101      	movs	r1, #1
 8000460:	2201      	movs	r2, #1
 8000462:	f004 fb13 	bl	8004a8c <CAN_ITConfig>

    /* Enable CAN receive FIFO0 interrupt */
    intInitParams.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8000466:	2314      	movs	r3, #20
 8000468:	773b      	strb	r3, [r7, #28]
    intInitParams.NVIC_IRQChannelCmd = ENABLE;
 800046a:	2301      	movs	r3, #1
 800046c:	77fb      	strb	r3, [r7, #31]
    intInitParams.NVIC_IRQChannelPreemptionPriority = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	777b      	strb	r3, [r7, #29]
    intInitParams.NVIC_IRQChannelSubPriority = 2;
 8000472:	2302      	movs	r3, #2
 8000474:	77bb      	strb	r3, [r7, #30]
    NVIC_Init(&intInitParams);
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	4618      	mov	r0, r3
 800047c:	f005 f97e 	bl	800577c <NVIC_Init>
    CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
 8000480:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000484:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000488:	2102      	movs	r1, #2
 800048a:	2201      	movs	r2, #1
 800048c:	f004 fafe 	bl	8004a8c <CAN_ITConfig>

    /* Enable CAN status change interrupts */
    intInitParams.NVIC_IRQChannel = CAN1_SCE_IRQn;
 8000490:	2316      	movs	r3, #22
 8000492:	773b      	strb	r3, [r7, #28]
    intInitParams.NVIC_IRQChannelCmd = ENABLE;
 8000494:	2301      	movs	r3, #1
 8000496:	77fb      	strb	r3, [r7, #31]
    intInitParams.NVIC_IRQChannelPreemptionPriority = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	777b      	strb	r3, [r7, #29]
    intInitParams.NVIC_IRQChannelSubPriority = 4;
 800049c:	2304      	movs	r3, #4
 800049e:	77bb      	strb	r3, [r7, #30]
    NVIC_Init(&intInitParams);
 80004a0:	f107 031c 	add.w	r3, r7, #28
 80004a4:	4618      	mov	r0, r3
 80004a6:	f005 f969 	bl	800577c <NVIC_Init>
    CAN_ITConfig(CAN1, CAN_IT_EWG | CAN_IT_EPV | CAN_IT_LEC | CAN_IT_ERR, ENABLE);
 80004aa:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 80004ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004b2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80004b6:	2201      	movs	r2, #1
 80004b8:	f004 fae8 	bl	8004a8c <CAN_ITConfig>

    /* Configure a single filter that lets any CAN frame pass and assign this
     * filter to FIFO0. FIFO1 is not used. */
    canFilterInitParams.CAN_FilterIdHigh = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
    canFilterInitParams.CAN_FilterIdLow = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	81fb      	strh	r3, [r7, #14]
    canFilterInitParams.CAN_FilterMaskIdHigh = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	823b      	strh	r3, [r7, #16]
    canFilterInitParams.CAN_FilterMaskIdLow = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	827b      	strh	r3, [r7, #18]
    canFilterInitParams.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	82bb      	strh	r3, [r7, #20]
    canFilterInitParams.CAN_FilterNumber = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	75bb      	strb	r3, [r7, #22]
    canFilterInitParams.CAN_FilterMode = CAN_FilterMode_IdMask;
 80004d4:	2300      	movs	r3, #0
 80004d6:	75fb      	strb	r3, [r7, #23]
    canFilterInitParams.CAN_FilterScale = CAN_FilterScale_32bit;
 80004d8:	2301      	movs	r3, #1
 80004da:	763b      	strb	r3, [r7, #24]
    canFilterInitParams.CAN_FilterActivation = ENABLE;
 80004dc:	2301      	movs	r3, #1
 80004de:	767b      	strb	r3, [r7, #25]
    CAN_FilterInit(&canFilterInitParams);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 f969 	bl	80047bc <CAN_FilterInit>

    g_CanState = CanState_Init;
 80004ea:	f240 0367 	movw	r3, #103	; 0x67
 80004ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
 80004fa:	e00f      	b.n	800051c <Can_initialize+0x1b0>
    {
        g_TransmitTasks[i].IsUsed = 0;
 80004fc:	f240 0268 	movw	r2, #104	; 0x68
 8000500:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000506:	460b      	mov	r3, r1
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	440b      	add	r3, r1
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4413      	add	r3, r2
 8000510:	3328      	adds	r3, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	711a      	strb	r2, [r3, #4]
    canFilterInitParams.CAN_FilterActivation = ENABLE;
    CAN_FilterInit(&canFilterInitParams);

    g_CanState = CanState_Init;

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000518:	3301      	adds	r3, #1
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
 800051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800051e:	2b3f      	cmp	r3, #63	; 0x3f
 8000520:	d9ec      	bls.n	80004fc <Can_initialize+0x190>
    {
        g_TransmitTasks[i].IsUsed = 0;
    }

    g_TransmitQueue.LastTriggerTimeUs = 0;
 8000522:	f640 4370 	movw	r3, #3184	; 0xc70
 8000526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800052a:	f04f 0000 	mov.w	r0, #0
 800052e:	f04f 0100 	mov.w	r1, #0
 8000532:	e9c3 0100 	strd	r0, r1, [r3]
    g_TransmitQueue.ReadIndex = 0;
 8000536:	f640 4370 	movw	r3, #3184	; 0xc70
 800053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    g_TransmitQueue.WriteIndex = 0;
 8000542:	f640 4370 	movw	r3, #3184	; 0xc70
 8000546:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]

    g_LastProcessedTransmitTask = 0;
 800054e:	f640 4368 	movw	r3, #3176	; 0xc68
 8000552:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]

    /* End of critical section */
    Interrupt_restore(status);
 800055a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800055c:	f7ff fde6 	bl	800012c <Interrupt_restore>

    return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	3738      	adds	r7, #56	; 0x38
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop

0800056c <Can_deinitialize>:

/******************************************************************************
 * @brief Disables the CAN interface.
 *****************************************************************************/
void Can_deinitialize(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    CAN_DeInit(CAN1);
 8000570:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000574:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000578:	f004 f82a 	bl	80045d0 <CAN_DeInit>
}
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop

08000580 <Can_connectCbState>:
 * @brief Connects call-back to CAN status change event.
 *
 * @param pCb: The call-back function to be connected to the event.
 *****************************************************************************/
void Can_connectCbState(CanCbState_t pCb)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    g_pCbStateCan = pCb;
 8000588:	f240 0300 	movw	r3, #0
 800058c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Can_connectCbError>:
 * @brief Connects call-back to CAN error event.
 *
 * @param pCb: The call-back function to be connected to the event.
 *****************************************************************************/
void Can_connectCbError(CanCbError_t pCb)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    g_pCbErrorCan = pCb;
 80005a8:	f240 0304 	movw	r3, #4
 80005ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	601a      	str	r2, [r3, #0]
}
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Can_connectCbRxMsg>:
 * @brief Connects call-back to CAN receive event.
 *
 * @param pCb: The call-back function to be connected to the event.
 *****************************************************************************/
void Can_connectCbRxMsg(CanCbRxMsg_t pCb)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    g_pCbRxMsgCan = pCb;
 80005c8:	f240 0308 	movw	r3, #8
 80005cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Can_connectCbTxMsg>:
 * @brief Connects call-back to CAN transmit event.
 *
 * @param pCb: The call-back function to be connected to the event.
 *****************************************************************************/
void Can_connectCbTxMsg(CanCbTxMsg_t pCb)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    g_pCbTxMsgCan = pCb;
 80005e8:	f240 030c 	movw	r3, #12
 80005ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <TransmitMessageDequeue>:
 * @param pTxMsg: The returned message to be transmitted.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t TransmitMessageDequeue(void)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
    const uint64_t currentTimeUs = Time_getUs();;
 8000606:	f000 fef3 	bl	80013f0 <Time_getUs>
 800060a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    QueuedTxMsg_t* pQueuedTxMsg;
    uint8_t mailbox;

    if (g_TransmitQueue.WriteIndex == g_TransmitQueue.ReadIndex)
 800060e:	f640 4370 	movw	r3, #3184	; 0xc70
 8000612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	f640 4370 	movw	r3, #3184	; 0xc70
 800061c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <TransmitMessageDequeue+0x2a>
    {
        /* Nothing to be transmitted */
        return 1;
 8000626:	2301      	movs	r3, #1
 8000628:	e064      	b.n	80006f4 <TransmitMessageDequeue+0xf4>
    }

    pQueuedTxMsg = &g_TransmitQueue.QueuedMessages[g_TransmitQueue.ReadIndex];
 800062a:	f640 4370 	movw	r3, #3184	; 0xc70
 800062e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	015b      	lsls	r3, r3, #5
 8000636:	f103 0210 	add.w	r2, r3, #16
 800063a:	f640 4370 	movw	r3, #3184	; 0xc70
 800063e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000642:	4413      	add	r3, r2
 8000644:	607b      	str	r3, [r7, #4]

    if (   (0 != pQueuedTxMsg->DeltaTime)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800064c:	ea52 0103 	orrs.w	r1, r2, r3
 8000650:	d013      	beq.n	800067a <TransmitMessageDequeue+0x7a>
        && (pQueuedTxMsg->DeltaTime > (currentTimeUs - g_TransmitQueue.LastTriggerTimeUs)))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000658:	f640 4370 	movw	r3, #3184	; 0xc70
 800065c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000664:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000668:	1aa2      	subs	r2, r4, r2
 800066a:	eb65 0303 	sbc.w	r3, r5, r3
 800066e:	428b      	cmp	r3, r1
 8000670:	bf08      	it	eq
 8000672:	4282      	cmpeq	r2, r0
 8000674:	d201      	bcs.n	800067a <TransmitMessageDequeue+0x7a>
    {
        return 1;
 8000676:	2301      	movs	r3, #1
 8000678:	e03c      	b.n	80006f4 <TransmitMessageDequeue+0xf4>
    }

    mailbox = CAN_Transmit(CAN1, &pQueuedTxMsg->TxMsg);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000680:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000684:	4619      	mov	r1, r3
 8000686:	f004 fa1f 	bl	8004ac8 <CAN_Transmit>
 800068a:	4603      	mov	r3, r0
 800068c:	70fb      	strb	r3, [r7, #3]

    if (mailbox == CAN_NO_MB)
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d101      	bne.n	8000698 <TransmitMessageDequeue+0x98>
    {
        /* No empty mailboxes available */
        return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e02d      	b.n	80006f4 <TransmitMessageDequeue+0xf4>
    }

    g_TransmitQueue.LastTriggerTimeUs = currentTimeUs;
 8000698:	f640 4370 	movw	r3, #3184	; 0xc70
 800069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006a4:	e9c3 0100 	strd	r0, r1, [r3]
    g_TransmitQueue.ReadIndex = (g_TransmitQueue.ReadIndex + 1) & (MAXIMUM_NUMBER_OF_QUEUED_MESSAGES - 1);
 80006a8:	f640 4370 	movw	r3, #3184	; 0xc70
 80006ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80006b8:	f640 4370 	movw	r3, #3184	; 0xc70
 80006bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006c0:	609a      	str	r2, [r3, #8]

    g_BufferedCanTxMsgs[mailbox] = pQueuedTxMsg->TxMsg;
 80006c2:	78f9      	ldrb	r1, [r7, #3]
 80006c4:	f240 0228 	movw	r2, #40	; 0x28
 80006c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80006cc:	460b      	mov	r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	441a      	add	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4614      	mov	r4, r2
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	6023      	str	r3, [r4, #0]
    g_BufferedCanTxMsgIsQueued[mailbox] = 1;
 80006e4:	78fa      	ldrb	r2, [r7, #3]
 80006e6:	f240 0364 	movw	r3, #100	; 0x64
 80006ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ee:	2101      	movs	r1, #1
 80006f0:	5499      	strb	r1, [r3, r2]

    return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}

080006fc <Can_transmitQueued>:
 *                   transmit message.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
uint8_t Can_transmitQueued(CanTxMsg* pTxMsg, uint64_t deltaTime)
{
 80006fc:	b4b0      	push	{r4, r5, r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	e9c7 2300 	strd	r2, r3, [r7]
    const uint32_t space = (  (g_TransmitQueue.ReadIndex - g_TransmitQueue.WriteIndex - 1)
 8000708:	f640 4370 	movw	r3, #3184	; 0xc70
 800070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	f640 4370 	movw	r3, #3184	; 0xc70
 8000716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000724:	617b      	str	r3, [r7, #20]
                            & (MAXIMUM_NUMBER_OF_QUEUED_MESSAGES - 1));

    if (0 == space)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <Can_transmitQueued+0x34>
    {
        return 1;
 800072c:	2301      	movs	r3, #1
 800072e:	e032      	b.n	8000796 <Can_transmitQueued+0x9a>
    }

    g_TransmitQueue.QueuedMessages[g_TransmitQueue.WriteIndex].TxMsg = *pTxMsg;
 8000730:	f640 4370 	movw	r3, #3184	; 0xc70
 8000734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	f640 4370 	movw	r3, #3184	; 0xc70
 800073e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000742:	0152      	lsls	r2, r2, #5
 8000744:	4413      	add	r3, r2
 8000746:	f103 0210 	add.w	r2, r3, #16
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4614      	mov	r4, r2
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	682b      	ldr	r3, [r5, #0]
 8000756:	6023      	str	r3, [r4, #0]
    g_TransmitQueue.QueuedMessages[g_TransmitQueue.WriteIndex].DeltaTime = deltaTime;
 8000758:	f640 4370 	movw	r3, #3184	; 0xc70
 800075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	f640 4370 	movw	r3, #3184	; 0xc70
 8000766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800076a:	0152      	lsls	r2, r2, #5
 800076c:	4413      	add	r3, r2
 800076e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 2300 	strd	r2, r3, [r1]
    g_TransmitQueue.WriteIndex = (g_TransmitQueue.WriteIndex + 1) & (MAXIMUM_NUMBER_OF_QUEUED_MESSAGES - 1);
 800077a:	f640 4370 	movw	r3, #3184	; 0xc70
 800077e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800078a:	f640 4370 	movw	r3, #3184	; 0xc70
 800078e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000792:	60da      	str	r2, [r3, #12]

    return 0;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bcb0      	pop	{r4, r5, r7}
 800079e:	4770      	bx	lr

080007a0 <Can_addTransmitTask>:
 * @param taskId: An unique transmit task identifier.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
uint8_t Can_addTransmitTask(CanTxMsg* pTxMsg, uint64_t cycleTime, uint32_t taskId)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	e9c7 2300 	strd	r2, r3, [r7]
    uint32_t i;
    const uint64_t currentTimeUs = Time_getUs();
 80007ac:	f000 fe20 	bl	80013f0 <Time_getUs>
 80007b0:	e9c7 0104 	strd	r0, r1, [r7, #16]

    /* Check if task already exists, if, alter its parameters */
    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	e053      	b.n	8000862 <Can_addTransmitTask+0xc2>
    {
        if (   (taskId != g_TransmitTasks[i].TaskId)
 80007ba:	f240 0268 	movw	r2, #104	; 0x68
 80007be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007c2:	69f9      	ldr	r1, [r7, #28]
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4413      	add	r3, r2
 80007ce:	3328      	adds	r3, #40	; 0x28
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d10d      	bne.n	80007f4 <Can_addTransmitTask+0x54>
            || (0 == g_TransmitTasks[i].IsUsed))
 80007d8:	f240 0268 	movw	r2, #104	; 0x68
 80007dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007e0:	69f9      	ldr	r1, [r7, #28]
 80007e2:	460b      	mov	r3, r1
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	440b      	add	r3, r1
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	3328      	adds	r3, #40	; 0x28
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d103      	bne.n	80007fc <Can_addTransmitTask+0x5c>
{
    uint32_t i;
    const uint64_t currentTimeUs = Time_getUs();

    /* Check if task already exists, if, alter its parameters */
    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	3301      	adds	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e032      	b.n	8000862 <Can_addTransmitTask+0xc2>
            || (0 == g_TransmitTasks[i].IsUsed))
        {
            continue;
        }

        g_TransmitTasks[i].TxMsg = *pTxMsg;
 80007fc:	f240 0268 	movw	r2, #104	; 0x68
 8000800:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000804:	69f9      	ldr	r1, [r7, #28]
 8000806:	460b      	mov	r3, r1
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	440b      	add	r3, r1
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	441a      	add	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4614      	mov	r4, r2
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	6023      	str	r3, [r4, #0]
        g_TransmitTasks[i].CycleTimeUs = cycleTime;
 800081e:	f240 0268 	movw	r2, #104	; 0x68
 8000822:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000826:	69f9      	ldr	r1, [r7, #28]
 8000828:	460b      	mov	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	440b      	add	r3, r1
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	4413      	add	r3, r2
 8000832:	f103 0118 	add.w	r1, r3, #24
 8000836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800083a:	e9c1 2300 	strd	r2, r3, [r1]
        g_TransmitTasks[i].LastTriggerTimeUs = currentTimeUs;
 800083e:	f240 0268 	movw	r2, #104	; 0x68
 8000842:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000846:	69f9      	ldr	r1, [r7, #28]
 8000848:	460b      	mov	r3, r1
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	440b      	add	r3, r1
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4413      	add	r3, r2
 8000852:	f103 0120 	add.w	r1, r3, #32
 8000856:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800085a:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 800085e:	2300      	movs	r3, #0
 8000860:	e05e      	b.n	8000920 <Can_addTransmitTask+0x180>
{
    uint32_t i;
    const uint64_t currentTimeUs = Time_getUs();

    /* Check if task already exists, if, alter its parameters */
    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b3f      	cmp	r3, #63	; 0x3f
 8000866:	d9a8      	bls.n	80007ba <Can_addTransmitTask+0x1a>
        g_TransmitTasks[i].LastTriggerTimeUs = currentTimeUs;
        return 0;
    }

    /* Add new task to schedule as long as there are empty tasks */
    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e011      	b.n	8000892 <Can_addTransmitTask+0xf2>
    {
        if (0 == g_TransmitTasks[i].IsUsed)
 800086e:	f240 0268 	movw	r2, #104	; 0x68
 8000872:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000876:	69f9      	ldr	r1, [r7, #28]
 8000878:	460b      	mov	r3, r1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	440b      	add	r3, r1
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4413      	add	r3, r2
 8000882:	3328      	adds	r3, #40	; 0x28
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d100      	bne.n	800088c <Can_addTransmitTask+0xec>
        {
            break;
 800088a:	e005      	b.n	8000898 <Can_addTransmitTask+0xf8>
        g_TransmitTasks[i].LastTriggerTimeUs = currentTimeUs;
        return 0;
    }

    /* Add new task to schedule as long as there are empty tasks */
    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	3301      	adds	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	2b3f      	cmp	r3, #63	; 0x3f
 8000896:	d9ea      	bls.n	800086e <Can_addTransmitTask+0xce>
        {
            break;
        }
    }

    if (MAXIMUM_NUMBER_OF_TX_TASKS == i)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	2b40      	cmp	r3, #64	; 0x40
 800089c:	d101      	bne.n	80008a2 <Can_addTransmitTask+0x102>
    {
        return 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	e03e      	b.n	8000920 <Can_addTransmitTask+0x180>
    }

    g_TransmitTasks[i].TxMsg = *pTxMsg;
 80008a2:	f240 0268 	movw	r2, #104	; 0x68
 80008a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008aa:	69f9      	ldr	r1, [r7, #28]
 80008ac:	460b      	mov	r3, r1
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	440b      	add	r3, r1
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	441a      	add	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4614      	mov	r4, r2
 80008ba:	461d      	mov	r5, r3
 80008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	6023      	str	r3, [r4, #0]
    g_TransmitTasks[i].CycleTimeUs = cycleTime;
 80008c4:	f240 0268 	movw	r2, #104	; 0x68
 80008c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008cc:	69f9      	ldr	r1, [r7, #28]
 80008ce:	460b      	mov	r3, r1
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	440b      	add	r3, r1
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	4413      	add	r3, r2
 80008d8:	f103 0118 	add.w	r1, r3, #24
 80008dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008e0:	e9c1 2300 	strd	r2, r3, [r1]
    g_TransmitTasks[i].LastTriggerTimeUs = currentTimeUs;
 80008e4:	f240 0268 	movw	r2, #104	; 0x68
 80008e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008ec:	69f9      	ldr	r1, [r7, #28]
 80008ee:	460b      	mov	r3, r1
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	440b      	add	r3, r1
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	f103 0120 	add.w	r1, r3, #32
 80008fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
    g_TransmitTasks[i].IsUsed = 1;
 8000904:	f240 0268 	movw	r2, #104	; 0x68
 8000908:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800090c:	69f9      	ldr	r1, [r7, #28]
 800090e:	460b      	mov	r3, r1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	440b      	add	r3, r1
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	4413      	add	r3, r2
 8000918:	3328      	adds	r3, #40	; 0x28
 800091a:	2201      	movs	r2, #1
 800091c:	711a      	strb	r2, [r3, #4]

    return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bdb0      	pop	{r4, r5, r7, pc}

08000928 <Can_removeTransmitTask>:
 * @param taskId: Task identifier for the task to be removed.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
uint8_t Can_removeTransmitTask(uint32_t taskId)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e020      	b.n	8000978 <Can_removeTransmitTask+0x50>
    {
        if (   (0 != g_TransmitTasks[i].IsUsed)
 8000936:	f240 0268 	movw	r2, #104	; 0x68
 800093a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	460b      	mov	r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	440b      	add	r3, r1
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4413      	add	r3, r2
 800094a:	3328      	adds	r3, #40	; 0x28
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00f      	beq.n	8000972 <Can_removeTransmitTask+0x4a>
            && (taskId == g_TransmitTasks[i].TaskId))
 8000952:	f240 0268 	movw	r2, #104	; 0x68
 8000956:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800095a:	68f9      	ldr	r1, [r7, #12]
 800095c:	460b      	mov	r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	440b      	add	r3, r1
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	4413      	add	r3, r2
 8000966:	3328      	adds	r3, #40	; 0x28
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	d100      	bne.n	8000972 <Can_removeTransmitTask+0x4a>
        {
            break;
 8000970:	e005      	b.n	800097e <Can_removeTransmitTask+0x56>
 *****************************************************************************/
uint8_t Can_removeTransmitTask(uint32_t taskId)
{
    uint32_t i;

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b3f      	cmp	r3, #63	; 0x3f
 800097c:	d9db      	bls.n	8000936 <Can_removeTransmitTask+0xe>
        {
            break;
        }
    }

    if (MAXIMUM_NUMBER_OF_TX_TASKS == i)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b40      	cmp	r3, #64	; 0x40
 8000982:	d101      	bne.n	8000988 <Can_removeTransmitTask+0x60>
    {
        return 1;
 8000984:	2301      	movs	r3, #1
 8000986:	e00d      	b.n	80009a4 <Can_removeTransmitTask+0x7c>
    }

    g_TransmitTasks[i].IsUsed = 0;
 8000988:	f240 0268 	movw	r2, #104	; 0x68
 800098c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000990:	68f9      	ldr	r1, [r7, #12]
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4413      	add	r3, r2
 800099c:	3328      	adds	r3, #40	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	711a      	strb	r2, [r3, #4]

    return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <ProcessTransmitTaskSchedule>:

/******************************************************************************
 * @brief Processes the CAN transmit task schedule (triggers messages).
 *****************************************************************************/
static void ProcessTransmitTaskSchedule(void)
{
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
    const uint64_t currentTimeUs = Time_getUs();
 80009b6:	f000 fd1b 	bl	80013f0 <Time_getUs>
 80009ba:	e9c7 0104 	strd	r0, r1, [r7, #16]
    uint64_t elapsedTimeUs;
    uint32_t index;
    uint32_t i;
    uint8_t mailbox;

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	e0c3      	b.n	8000b4c <ProcessTransmitTaskSchedule+0x19c>
    {
        index = (g_LastProcessedTransmitTask + i) & (MAXIMUM_NUMBER_OF_TX_TASKS - 1);
 80009c4:	f640 4368 	movw	r3, #3176	; 0xc68
 80009c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4413      	add	r3, r2
 80009d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009d6:	61fb      	str	r3, [r7, #28]

        if (0 == g_TransmitTasks[index].IsUsed)
 80009d8:	f240 0268 	movw	r2, #104	; 0x68
 80009dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009e0:	69f9      	ldr	r1, [r7, #28]
 80009e2:	460b      	mov	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	440b      	add	r3, r1
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	3328      	adds	r3, #40	; 0x28
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d100      	bne.n	80009f6 <ProcessTransmitTaskSchedule+0x46>
        {
            continue;
 80009f4:	e0a7      	b.n	8000b46 <ProcessTransmitTaskSchedule+0x196>
        }

        elapsedTimeUs = currentTimeUs - g_TransmitTasks[index].LastTriggerTimeUs;
 80009f6:	f240 0268 	movw	r2, #104	; 0x68
 80009fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009fe:	69f9      	ldr	r1, [r7, #28]
 8000a00:	460b      	mov	r3, r1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	440b      	add	r3, r1
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	4413      	add	r3, r2
 8000a0a:	3320      	adds	r3, #32
 8000a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a14:	1a82      	subs	r2, r0, r2
 8000a16:	eb61 0303 	sbc.w	r3, r1, r3
 8000a1a:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (elapsedTimeUs < g_TransmitTasks[index].CycleTimeUs)
 8000a1e:	f240 0268 	movw	r2, #104	; 0x68
 8000a22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a26:	69f9      	ldr	r1, [r7, #28]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	440b      	add	r3, r1
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	4413      	add	r3, r2
 8000a32:	3318      	adds	r3, #24
 8000a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	d200      	bcs.n	8000a46 <ProcessTransmitTaskSchedule+0x96>
        {
            continue;
 8000a44:	e07f      	b.n	8000b46 <ProcessTransmitTaskSchedule+0x196>
        }

        mailbox = CAN_Transmit(CAN1, &g_TransmitTasks[index].TxMsg);
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	f240 0268 	movw	r2, #104	; 0x68
 8000a54:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a58:	4413      	add	r3, r2
 8000a5a:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000a5e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000a62:	4619      	mov	r1, r3
 8000a64:	f004 f830 	bl	8004ac8 <CAN_Transmit>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	71fb      	strb	r3, [r7, #7]

        if (mailbox == CAN_NO_MB)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d100      	bne.n	8000a74 <ProcessTransmitTaskSchedule+0xc4>
        {
            /* No empty mailboxes available */
            break;
 8000a72:	e06f      	b.n	8000b54 <ProcessTransmitTaskSchedule+0x1a4>
        }

        g_BufferedCanTxMsgs[mailbox] = g_TransmitTasks[index].TxMsg;
 8000a74:	79f9      	ldrb	r1, [r7, #7]
 8000a76:	f240 0228 	movw	r2, #40	; 0x28
 8000a7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a7e:	460b      	mov	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	18d0      	adds	r0, r2, r3
 8000a88:	f240 0268 	movw	r2, #104	; 0x68
 8000a8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a90:	69f9      	ldr	r1, [r7, #28]
 8000a92:	460b      	mov	r3, r1
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	440b      	add	r3, r1
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	461d      	mov	r5, r3
 8000aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	6023      	str	r3, [r4, #0]
        g_BufferedCanTxMsgIsQueued[mailbox] = 0;
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	f240 0364 	movw	r3, #100	; 0x64
 8000aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	5499      	strb	r1, [r3, r2]

        if (0 == g_TransmitTasks[index].CycleTimeUs)
 8000ab6:	f240 0268 	movw	r2, #104	; 0x68
 8000aba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000abe:	69f9      	ldr	r1, [r7, #28]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	440b      	add	r3, r1
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	4413      	add	r3, r2
 8000aca:	3318      	adds	r3, #24
 8000acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad0:	ea52 0103 	orrs.w	r1, r2, r3
 8000ad4:	d10d      	bne.n	8000af2 <ProcessTransmitTaskSchedule+0x142>
        {
            g_TransmitTasks[index].IsUsed = 0;
 8000ad6:	f240 0268 	movw	r2, #104	; 0x68
 8000ada:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ade:	69f9      	ldr	r1, [r7, #28]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	440b      	add	r3, r1
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	4413      	add	r3, r2
 8000aea:	3328      	adds	r3, #40	; 0x28
 8000aec:	2200      	movs	r2, #0
 8000aee:	711a      	strb	r2, [r3, #4]
 8000af0:	e029      	b.n	8000b46 <ProcessTransmitTaskSchedule+0x196>
        }
        else
        {
            g_TransmitTasks[index].LastTriggerTimeUs += g_TransmitTasks[index].CycleTimeUs;
 8000af2:	f240 0268 	movw	r2, #104	; 0x68
 8000af6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000afa:	69f9      	ldr	r1, [r7, #28]
 8000afc:	460b      	mov	r3, r1
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	440b      	add	r3, r1
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	4413      	add	r3, r2
 8000b06:	3320      	adds	r3, #32
 8000b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b0c:	f240 0268 	movw	r2, #104	; 0x68
 8000b10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b14:	69fc      	ldr	r4, [r7, #28]
 8000b16:	4623      	mov	r3, r4
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4423      	add	r3, r4
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4413      	add	r3, r2
 8000b20:	3318      	adds	r3, #24
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	1880      	adds	r0, r0, r2
 8000b28:	eb41 0103 	adc.w	r1, r1, r3
 8000b2c:	f240 0268 	movw	r2, #104	; 0x68
 8000b30:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b34:	69fc      	ldr	r4, [r7, #28]
 8000b36:	4623      	mov	r3, r4
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4423      	add	r3, r4
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	4413      	add	r3, r2
 8000b40:	3320      	adds	r3, #32
 8000b42:	e9c3 0100 	strd	r0, r1, [r3]
    uint64_t elapsedTimeUs;
    uint32_t index;
    uint32_t i;
    uint8_t mailbox;

    for (i = 0; i < MAXIMUM_NUMBER_OF_TX_TASKS; i++)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b50:	f67f af38 	bls.w	80009c4 <ProcessTransmitTaskSchedule+0x14>
        {
            g_TransmitTasks[index].LastTriggerTimeUs += g_TransmitTasks[index].CycleTimeUs;
        }
    }

    g_LastProcessedTransmitTask = index;
 8000b54:	f640 4368 	movw	r3, #3176	; 0xc68
 8000b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bdb0      	pop	{r4, r5, r7, pc}
 8000b66:	bf00      	nop

08000b68 <ProcessTransmitQueue>:

/******************************************************************************
 * @brief Processes the CAN transmit queue.
 *****************************************************************************/
static void ProcessTransmitQueue(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    while (0 == TransmitMessageDequeue());
 8000b6c:	bf00      	nop
 8000b6e:	f7ff fd47 	bl	8000600 <TransmitMessageDequeue>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0fa      	beq.n	8000b6e <ProcessTransmitQueue+0x6>
}
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop

08000b7c <CheckBusState>:
 * @brief Updates the bus state (intended to be called from background). The
 *        CAN controller does not provide interrupts for all state transitions
 *        (e.g. init => active, passive => active, bus-off => active).
 *****************************************************************************/
static void CheckBusState(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
    CanState_t state;
    uint32_t errorStatusRegister;
    InterruptStatus_t status;

    /* Begin of critical section */
    status = Interrupt_saveAndDisable();
 8000b82:	f7ff fae1 	bl	8000148 <Interrupt_saveAndDisable>
 8000b86:	60b8      	str	r0, [r7, #8]

    /* Check whether CAN state has changed */
    errorStatusRegister = CAN1->ESR;
 8000b88:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000b8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	607b      	str	r3, [r7, #4]

    if (errorStatusRegister & CAN_FLAG_BOF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <CheckBusState+0x28>
    {
        state = CanState_BusOff;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e011      	b.n	8000bc8 <CheckBusState+0x4c>
    }
    else if (errorStatusRegister & CAN_FLAG_EPV)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <CheckBusState+0x38>
    {
        state = CanState_Passive;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e009      	b.n	8000bc8 <CheckBusState+0x4c>
    }
    else if (errorStatusRegister & CAN_FLAG_EWG)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <CheckBusState+0x48>
    {
        state = CanState_Warning;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e001      	b.n	8000bc8 <CheckBusState+0x4c>
    }
    else
    {
        state = CanState_Active;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
    }

    if (state != g_CanState)
 8000bc8:	f240 0367 	movw	r3, #103	; 0x67
 8000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d00d      	beq.n	8000bf4 <CheckBusState+0x78>
    {
        g_CanState = state;
 8000bd8:	f240 0367 	movw	r3, #103	; 0x67
 8000bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	701a      	strb	r2, [r3, #0]

        /* Notify status event listener */
        g_pCbStateCan(state);
 8000be4:	f240 0300 	movw	r3, #0
 8000be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4798      	blx	r3
    }

    /* End of critical section */
    Interrupt_restore(status);
 8000bf4:	68b8      	ldr	r0, [r7, #8]
 8000bf6:	f7ff fa99 	bl	800012c <Interrupt_restore>
}
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Can_doBackground>:
 * @brief Background worker for CAN
 *
 * @note ISR-safety must be ensured by the caller.
 *****************************************************************************/
void Can_doBackground(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    CheckBusState();
 8000c04:	f7ff ffba 	bl	8000b7c <CheckBusState>

    ProcessTransmitTaskSchedule();
 8000c08:	f7ff fed2 	bl	80009b0 <ProcessTransmitTaskSchedule>

    ProcessTransmitQueue();
 8000c0c:	f7ff ffac 	bl	8000b68 <ProcessTransmitQueue>
}
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop

08000c14 <USB_HP_CAN1_TX_IRQHandler>:

/******************************************************************************
 * @brief Interrupt service routine for CAN transmit mailbox empty events.
 *****************************************************************************/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
    const uint32_t tsrRqcp0 = 0x00000001UL; /* Transmit status register: Request completed mailbox0 */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
    const uint32_t tsrRqcp1 = 0x00000100UL; /* Transmit status register: Request completed mailbox1 */
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	617b      	str	r3, [r7, #20]
    const uint32_t tsrRqcp2 = 0x00010000UL; /* Transmit status register: Request completed mailbox2 */
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	613b      	str	r3, [r7, #16]
    const uint32_t tsrTxOk0 = 0x00000002UL; /* Transmit status register: Transmission OK of mailbox0 */
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
    const uint32_t tsrTxOk1 = 0x00000200UL; /* Transmit status register: Transmission OK of mailbox1 */
 8000c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c32:	60bb      	str	r3, [r7, #8]
    const uint32_t tsrTxOk2 = 0x00020000UL; /* Transmit status register: Transmission OK of mailbox2 */
 8000c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c38:	607b      	str	r3, [r7, #4]
    uint8_t mailbox = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	77fb      	strb	r3, [r7, #31]
    uint8_t txOk = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	77bb      	strb	r3, [r7, #30]

    /* Only one transmit interrupt at a time is handled. If multiple transmit
     * interrupts are pending the ISR will be called multiple times.
     * Discarded messages (single shot mode) are not provided to any event listener. */
    if (RESET != (CAN1->TSR & tsrRqcp0))
 8000c42:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000c46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d015      	beq.n	8000c80 <USB_HP_CAN1_TX_IRQHandler+0x6c>
    {
        txOk = (RESET == (CAN1->TSR & tsrTxOk0)) ? 0 : 1;
 8000c54:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000c58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf0c      	ite	eq
 8000c66:	2300      	moveq	r3, #0
 8000c68:	2301      	movne	r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	77bb      	strb	r3, [r7, #30]
        CAN1->TSR = tsrRqcp0;
 8000c6e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000c72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	609a      	str	r2, [r3, #8]
        mailbox = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	77fb      	strb	r3, [r7, #31]
 8000c7e:	e03c      	b.n	8000cfa <USB_HP_CAN1_TX_IRQHandler+0xe6>
    }
    else if (RESET != (CAN1->TSR & tsrRqcp1))
 8000c80:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000c84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d015      	beq.n	8000cbe <USB_HP_CAN1_TX_IRQHandler+0xaa>
    {
        txOk = (RESET == (CAN1->TSR & tsrTxOk1)) ? 0 : 1;
 8000c92:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000c96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	77bb      	strb	r3, [r7, #30]
        CAN1->TSR = tsrRqcp1;
 8000cac:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000cb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	609a      	str	r2, [r3, #8]
        mailbox = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	77fb      	strb	r3, [r7, #31]
 8000cbc:	e01d      	b.n	8000cfa <USB_HP_CAN1_TX_IRQHandler+0xe6>
    }
    else if (RESET != (CAN1->TSR & tsrRqcp2))
 8000cbe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000cc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d014      	beq.n	8000cfa <USB_HP_CAN1_TX_IRQHandler+0xe6>
    {
        txOk = (RESET == (CAN1->TSR & tsrTxOk2)) ? 0 : 1;
 8000cd0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000cd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	77bb      	strb	r3, [r7, #30]
        CAN1->TSR = tsrRqcp2;
 8000cea:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000cee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	609a      	str	r2, [r3, #8]
        mailbox = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	77fb      	strb	r3, [r7, #31]
    }

    if (0 != txOk)
 8000cfa:	7fbb      	ldrb	r3, [r7, #30]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d017      	beq.n	8000d30 <USB_HP_CAN1_TX_IRQHandler+0x11c>
    {
        /* Notify transmit event listener */
        g_pCbTxMsgCan(&g_BufferedCanTxMsgs[mailbox], g_BufferedCanTxMsgIsQueued[mailbox]);
 8000d00:	f240 030c 	movw	r3, #12
 8000d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d08:	681c      	ldr	r4, [r3, #0]
 8000d0a:	7ffa      	ldrb	r2, [r7, #31]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	f240 0228 	movw	r2, #40	; 0x28
 8000d18:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d1c:	441a      	add	r2, r3
 8000d1e:	7ff9      	ldrb	r1, [r7, #31]
 8000d20:	f240 0364 	movw	r3, #100	; 0x64
 8000d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d28:	5c5b      	ldrb	r3, [r3, r1]
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	47a0      	blx	r4
    }
}
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop

08000d38 <CAN1_SCE_IRQHandler>:

/******************************************************************************
 * @brief Interrupt service routine for CAN status changed and error events.
 *****************************************************************************/
void CAN1_SCE_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
    const uint32_t msrErri = 0x00000004; /* Master status register: Error interrupt */
 8000d3e:	2304      	movs	r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
    const uint32_t errorBitMask = 0x07;
 8000d42:	2307      	movs	r3, #7
 8000d44:	60bb      	str	r3, [r7, #8]
    const uint32_t errorBitsPosition = 4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	607b      	str	r3, [r7, #4]
    CanError_t error;

    CheckBusState();
 8000d4a:	f7ff ff17 	bl	8000b7c <CheckBusState>

    if (RESET != (CAN1->MSR & msrErri))
 8000d4e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000d52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d01a      	beq.n	8000d96 <CAN1_SCE_IRQHandler+0x5e>
    {
        error = (CanError_t)((CAN1->ESR >> errorBitsPosition) & errorBitMask);
 8000d60:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000d64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4013      	ands	r3, r2
 8000d78:	70fb      	strb	r3, [r7, #3]

        /* Notify error event listener */
        g_pCbErrorCan(error);
 8000d7a:	f240 0304 	movw	r3, #4
 8000d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	4610      	mov	r0, r2
 8000d88:	4798      	blx	r3

        /* Clear pending interrupt (w1c) */
        CAN1->MSR = msrErri;
 8000d8a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000d8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	605a      	str	r2, [r3, #4]
    }
}
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <USB_LP_CAN1_RX0_IRQHandler>:

/******************************************************************************
 * @brief Interrupt service routine for CAN receive FIFO0 events.
 *****************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
    CanRxMsg RxMsg;

    CAN_Receive(CAN1, CAN_FIFO0, &RxMsg);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000da8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000dac:	2100      	movs	r1, #0
 8000dae:	461a      	mov	r2, r3
 8000db0:	f004 f83a 	bl	8004e28 <CAN_Receive>
    CAN_FIFORelease(CAN1, CAN_FIFO0);
 8000db4:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8000db8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f003 fff7 	bl	8004db0 <CAN_FIFORelease>

    /* Notify receive event listener */
    g_pCbRxMsgCan(&RxMsg);
 8000dc2:	f240 0308 	movw	r3, #8
 8000dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1d3a      	adds	r2, r7, #4
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4798      	blx	r3
}
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <Lin_initialize>:
 * @param baudRate: The baud rate to be configured.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
uint8_t Lin_initialize(uint32_t baudRate)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    /* Just to temporarily omit compiler warning (unused parameter) */
    baudRate = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
    return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <Lin_deinitialize>:

/******************************************************************************
 * @brief Disables the LIN interface
 *****************************************************************************/
void Lin_deinitialize(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
}
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <Lin_removeTransmitTask>:
 * @param taskId: Task identifier for the task to be removed.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
uint8_t Lin_removeTransmitTask(uint32_t taskId)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	(void)taskId;
    return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <Lin_doBackground>:
 * @brief Background worker for LIN
 *
 * @note ISR-safety must be ensured by the caller.
 *****************************************************************************/
void Lin_doBackground(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
}
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <Interrupt_restore>:
 * Function definitions
 *****************************************************************************/

/** Globally enables interrupts if they were enabled */
static inline void Interrupt_restore(InterruptStatus_t status)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status & 0x01);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fdd6 	bl	80029e4 <__set_PRIMASK>
}
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop

08000e40 <Interrupt_saveAndDisable>:

/** Globally disables interrupts if they are not already disabled */
static inline InterruptStatus_t Interrupt_saveAndDisable(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	InterruptStatus_t status;

    status = __get_PRIMASK();
 8000e46:	f001 fdbd 	bl	80029c4 <__get_PRIMASK>
 8000e4a:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status | 0x01);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fdc6 	bl	80029e4 <__set_PRIMASK>

    return status;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <DefaultUsartCbRxData>:

/******************************************************************************
 * @brief Default Serial data available call-back function.
 *****************************************************************************/
static void DefaultUsartCbRxData(const uint8_t* pData, uint32_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    (void)pData;
    (void)length;
}
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <Usart_initialize>:

/******************************************************************************
 * @brief Initializes USART2 hardware peripheral.
 *****************************************************************************/
void Usart_initialize(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b092      	sub	sp, #72	; 0x48
 8000e7c:	af00      	add	r7, sp, #0
    USART_InitTypeDef uartInitParams;
    NVIC_InitTypeDef intInitParams;
    DMA_InitTypeDef dmaInitParams;

    /* Enable clock for USART2 peripheral */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e82:	2101      	movs	r1, #1
 8000e84:	f002 fe60 	bl	8003b48 <RCC_APB1PeriphClockCmd>

    /* Enable clock for GPIO used by USART2 */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	f002 fe34 	bl	8003af8 <RCC_APB2PeriphClockCmd>

    /* Configure USART2_TX (PA.2) as alternate function push-pull */
    ioInitParams.GPIO_Pin = GPIO_Pin_2;
 8000e90:	2304      	movs	r3, #4
 8000e92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ioInitParams.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e9c:	2318      	movs	r3, #24
 8000e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    GPIO_Init(GPIOA, &ioInitParams);
 8000ea2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000eaa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f002 f83c 	bl	8002f2c <GPIO_Init>

    /* Configure USART2_RX (PA.3) as input floating */
    ioInitParams.GPIO_Pin = GPIO_Pin_3;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ioInitParams.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    GPIO_Init(GPIOA, &ioInitParams);
 8000ec6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ece:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f002 f82a 	bl	8002f2c <GPIO_Init>

    /* Configure USART2_CTS (PA.0) as input floating */
    ioInitParams.GPIO_Pin = GPIO_Pin_0;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ioInitParams.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    GPIO_Init(GPIOA, &ioInitParams);
 8000eea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ef2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f002 f818 	bl	8002f2c <GPIO_Init>

    /* Configure USART2_RTS (PA.1) as alternate function push-pull */
    ioInitParams.GPIO_Pin = GPIO_Pin_1;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ioInitParams.GPIO_Speed = GPIO_Speed_50MHz;
 8000f02:	2303      	movs	r3, #3
 8000f04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ioInitParams.GPIO_Mode = GPIO_Mode_AF_PP;
 8000f08:	2318      	movs	r3, #24
 8000f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    GPIO_Init(GPIOA, &ioInitParams);
 8000f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f16:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f002 f806 	bl	8002f2c <GPIO_Init>

    /* Initialize USART peripheral (8N1) */
    USART_StructInit(&uartInitParams);
 8000f20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 f82d 	bl	8003f84 <USART_StructInit>
    uartInitParams.USART_BaudRate = USART_BAUD_RATE;
 8000f2a:	f245 5310 	movw	r3, #21776	; 0x5510
 8000f2e:	f2c0 0322 	movt	r3, #34	; 0x22
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
    uartInitParams.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS | USART_HardwareFlowControl_CTS;
 8000f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    uartInitParams.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uartInitParams.USART_Parity = USART_Parity_No;
 8000f40:	2300      	movs	r3, #0
 8000f42:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uartInitParams.USART_StopBits = USART_StopBits_1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	877b      	strh	r3, [r7, #58]	; 0x3a
    uartInitParams.USART_WordLength = USART_WordLength_8b;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	873b      	strh	r3, [r7, #56]	; 0x38
    USART_Init(USART2, &uartInitParams);
 8000f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f50:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f54:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f002 ff7d 	bl	8003e58 <USART_Init>
    USART_Cmd(USART2, ENABLE);
 8000f5e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f62:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f66:	2101      	movs	r1, #1
 8000f68:	f003 f868 	bl	800403c <USART_Cmd>

    /* Enable clock for DMA1 */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f002 fd9a 	bl	8003aa8 <RCC_AHBPeriphClockCmd>

    /* Do basic (fixed) configuration of transmit DMA */
    dmaInitParams.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR;
 8000f74:	f244 4304 	movw	r3, #17412	; 0x4404
 8000f78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f7c:	607b      	str	r3, [r7, #4]
    dmaInitParams.DMA_MemoryBaseAddr = (uint32_t)g_SerialDataTxBuffer;
 8000f7e:	f241 4388 	movw	r3, #5256	; 0x1488
 8000f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f86:	60bb      	str	r3, [r7, #8]
    dmaInitParams.DMA_DIR = DMA_DIR_PeripheralDST;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	60fb      	str	r3, [r7, #12]
    dmaInitParams.DMA_BufferSize = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
    dmaInitParams.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
    dmaInitParams.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	61bb      	str	r3, [r7, #24]
    dmaInitParams.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    dmaInitParams.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    dmaInitParams.DMA_Mode = DMA_Mode_Normal;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    dmaInitParams.DMA_Priority = DMA_Priority_Medium;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmaInitParams.DMA_M2M = DMA_M2M_Disable;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c

    DMA_Init(USART_TX_DMA_CHANNEL, &dmaInitParams);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2080      	movs	r0, #128	; 0x80
 8000fb2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f004 fa94 	bl	80054e4 <DMA_Init>

    /* Do basic (fixed) configuration of receive DMA */
    dmaInitParams.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR;
 8000fbc:	f244 4304 	movw	r3, #17412	; 0x4404
 8000fc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fc4:	607b      	str	r3, [r7, #4]
    dmaInitParams.DMA_MemoryBaseAddr = (uint32_t)g_SerialDataRxBuffer;
 8000fc6:	f241 43c8 	movw	r3, #5320	; 0x14c8
 8000fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fce:	60bb      	str	r3, [r7, #8]
    dmaInitParams.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
    dmaInitParams.DMA_BufferSize = USART_BUFFER_SIZE;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	613b      	str	r3, [r7, #16]
    dmaInitParams.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    dmaInitParams.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	61bb      	str	r3, [r7, #24]
    dmaInitParams.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    dmaInitParams.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
    dmaInitParams.DMA_Mode = DMA_Mode_Circular;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    dmaInitParams.DMA_Priority = DMA_Priority_Medium;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmaInitParams.DMA_M2M = DMA_M2M_Disable;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

    DMA_Init(USART_RX_DMA_CHANNEL, &dmaInitParams);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	206c      	movs	r0, #108	; 0x6c
 8000ffa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ffe:	4619      	mov	r1, r3
 8001000:	f004 fa70 	bl	80054e4 <DMA_Init>
    DMA_Cmd(USART_RX_DMA_CHANNEL, ENABLE);
 8001004:	206c      	movs	r0, #108	; 0x6c
 8001006:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800100a:	2101      	movs	r1, #1
 800100c:	f004 fad2 	bl	80055b4 <DMA_Cmd>

    /* Enable DMA interrupts */
    DMA_ITConfig(USART_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 8001010:	2080      	movs	r0, #128	; 0x80
 8001012:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001016:	2102      	movs	r1, #2
 8001018:	2201      	movs	r2, #1
 800101a:	f004 fae7 	bl	80055ec <DMA_ITConfig>
    DMA_ITConfig(USART_RX_DMA_CHANNEL, DMA_IT_TC | DMA_IT_HT, ENABLE);
 800101e:	206c      	movs	r0, #108	; 0x6c
 8001020:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001024:	2106      	movs	r1, #6
 8001026:	2201      	movs	r2, #1
 8001028:	f004 fae0 	bl	80055ec <DMA_ITConfig>

    /* Advise USART2 to use DMA */
    USART_DMACmd(USART2, USART_DMAReq_Tx | USART_DMAReq_Rx, ENABLE);
 800102c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001030:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001034:	21c0      	movs	r1, #192	; 0xc0
 8001036:	2201      	movs	r2, #1
 8001038:	f003 f868 	bl	800410c <USART_DMACmd>

    /* Enable DMA1_Channel6 interrupt */
    intInitParams.NVIC_IRQChannel = DMA1_Channel6_IRQn;
 800103c:	2310      	movs	r3, #16
 800103e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    intInitParams.NVIC_IRQChannelCmd = ENABLE;
 8001042:	2301      	movs	r3, #1
 8001044:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    intInitParams.NVIC_IRQChannelPreemptionPriority = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    intInitParams.NVIC_IRQChannelSubPriority = 14;
 800104e:	230e      	movs	r3, #14
 8001050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    NVIC_Init(&intInitParams);
 8001054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fb8f 	bl	800577c <NVIC_Init>

    /* Enable DMA1_Channel7 interrupt */
    intInitParams.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 800105e:	2311      	movs	r3, #17
 8001060:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    intInitParams.NVIC_IRQChannelCmd = ENABLE;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    intInitParams.NVIC_IRQChannelPreemptionPriority = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    intInitParams.NVIC_IRQChannelSubPriority = 15;
 8001070:	230f      	movs	r3, #15
 8001072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    NVIC_Init(&intInitParams);
 8001076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fb7e 	bl	800577c <NVIC_Init>
}
 8001080:	3748      	adds	r7, #72	; 0x48
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop

08001088 <Usart_connectCbRxData>:
 * @brief Connects call-back to serial data received event.
 *
 * @param pCb: The call-back function to be connected to the event.
 *****************************************************************************/
void Usart_connectCbRxData(UsartCbRxData pCb)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    g_pCbSerialData = pCb;
 8001090:	f240 0310 	movw	r3, #16
 8001094:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <Usart_doBackground>:
/******************************************************************************
 * @brief Background worker for serial communication, immediately processes
 *        any received data.
 *****************************************************************************/
void Usart_doBackground(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
    uint32_t rxIndex;
    int32_t length;
    InterruptStatus_t status;

    /* Begin of critical section */
    status = Interrupt_saveAndDisable();
 80010ae:	f7ff fec7 	bl	8000e40 <Interrupt_saveAndDisable>
 80010b2:	60f8      	str	r0, [r7, #12]

    rxIndex = USART_BUFFER_SIZE - USART_RX_DMA_CHANNEL->CNDTR;
 80010b4:	236c      	movs	r3, #108	; 0x6c
 80010b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80010c0:	60bb      	str	r3, [r7, #8]

    length = (int32_t)rxIndex - (int32_t)g_SerialDataRxIndex;
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f241 4384 	movw	r3, #5252	; 0x1484
 80010c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	607b      	str	r3, [r7, #4]

    if (0 < length)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd18      	ble.n	800110a <Usart_doBackground+0x62>
    {
        /* Data available and no wrap around */
        g_pCbSerialData(&g_SerialDataRxBuffer[g_SerialDataRxIndex], (uint32_t)length);
 80010d8:	f240 0310 	movw	r3, #16
 80010dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f241 4384 	movw	r3, #5252	; 0x1484
 80010e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	f241 43c8 	movw	r3, #5320	; 0x14c8
 80010f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f4:	4419      	add	r1, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4619      	mov	r1, r3
 80010fc:	4790      	blx	r2
        g_SerialDataRxIndex = rxIndex;
 80010fe:	f241 4384 	movw	r3, #5252	; 0x1484
 8001102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	601a      	str	r2, [r3, #0]
    }

    /* End of critical section */
    Interrupt_restore(status);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff fe8a 	bl	8000e24 <Interrupt_restore>
}
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop

08001118 <Usart_transmit>:
 * @param length: Number of data bytes to be transmitted
 *
 * @retval The number of bytes transmitted.
 *****************************************************************************/
uint32_t Usart_transmit(uint8_t* pData, uint32_t length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    uint32_t i;
    InterruptStatus_t status;

    /* Begin of critical section */
    status = Interrupt_saveAndDisable();
 8001122:	f7ff fe8d 	bl	8000e40 <Interrupt_saveAndDisable>
 8001126:	60b8      	str	r0, [r7, #8]

    if (0 != g_SerialDataTxPending)
 8001128:	f241 4380 	movw	r3, #5248	; 0x1480
 800112c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <Usart_transmit+0x28>
    {
        /* End of critical section */
    	Interrupt_restore(status);
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f7ff fe74 	bl	8000e24 <Interrupt_restore>
        return 0;
 800113c:	2300      	movs	r3, #0
 800113e:	e034      	b.n	80011aa <Usart_transmit+0x92>
    }

    length = (length > USART_BUFFER_SIZE) ? USART_BUFFER_SIZE
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b40      	cmp	r3, #64	; 0x40
 8001144:	bf28      	it	cs
 8001146:	2340      	movcs	r3, #64	; 0x40
 8001148:	603b      	str	r3, [r7, #0]
                                                 : length;

    /* Copy data in dedicated transmit buffer */
    for (i = 0; i < length; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e00d      	b.n	800116c <Usart_transmit+0x54>
    {
        g_SerialDataTxBuffer[i] = pData[i];
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	f241 4388 	movw	r3, #5256	; 0x1488
 800115c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001160:	68f9      	ldr	r1, [r7, #12]
 8001162:	440b      	add	r3, r1
 8001164:	701a      	strb	r2, [r3, #0]

    length = (length > USART_BUFFER_SIZE) ? USART_BUFFER_SIZE
                                                 : length;

    /* Copy data in dedicated transmit buffer */
    for (i = 0; i < length; i++)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3ed      	bcc.n	8001150 <Usart_transmit+0x38>
    {
        g_SerialDataTxBuffer[i] = pData[i];
    }

    DMA_Cmd(USART_TX_DMA_CHANNEL, DISABLE);
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800117a:	2100      	movs	r1, #0
 800117c:	f004 fa1a 	bl	80055b4 <DMA_Cmd>
    USART_TX_DMA_CHANNEL->CNDTR = length;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	605a      	str	r2, [r3, #4]
    DMA_Cmd(USART_TX_DMA_CHANNEL, ENABLE);
 800118a:	2080      	movs	r0, #128	; 0x80
 800118c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001190:	2101      	movs	r1, #1
 8001192:	f004 fa0f 	bl	80055b4 <DMA_Cmd>

    g_SerialDataTxPending = 1;
 8001196:	f241 4380 	movw	r3, #5248	; 0x1480
 800119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

    /* End of critical section */
    Interrupt_restore(status);
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f7ff fe3e 	bl	8000e24 <Interrupt_restore>

    return length;
 80011a8:	683b      	ldr	r3, [r7, #0]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop

080011b4 <DMA1_Channel7_IRQHandler>:

/******************************************************************************
 * @brief Interrupt service routine for USART2 DMA TX.
 *****************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    if (SET == DMA_GetITStatus(DMA1_FLAG_TC7))
 80011b8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011bc:	f004 fa86 	bl	80056cc <DMA_GetITStatus>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d109      	bne.n	80011da <DMA1_Channel7_IRQHandler+0x26>
    {
        /* Transfer complete interrupt */
        g_SerialDataTxPending = 0;
 80011c6:	f241 4380 	movw	r3, #5248	; 0x1480
 80011ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
        DMA_ClearITPendingBit(DMA1_FLAG_TC7);
 80011d2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011d6:	f004 faa3 	bl	8005720 <DMA_ClearITPendingBit>
    }
}
 80011da:	bd80      	pop	{r7, pc}

080011dc <DMA1_Channel6_IRQHandler>:

/******************************************************************************
 * @brief Interrupt service routine for USART2 DMA RX.
 *****************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    uint32_t rxIndex;
    int32_t length;

    if (SET == DMA_GetITStatus(DMA1_FLAG_HT6))
 80011e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80011e6:	f004 fa71 	bl	80056cc <DMA_GetITStatus>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d103      	bne.n	80011f8 <DMA1_Channel6_IRQHandler+0x1c>
    {
        /* Half transfer interrupt */
        DMA_ClearITPendingBit(DMA1_FLAG_HT6);
 80011f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80011f4:	f004 fa94 	bl	8005720 <DMA_ClearITPendingBit>
    }

    if (SET == DMA_GetITStatus(DMA1_FLAG_TC6))
 80011f8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011fc:	f004 fa66 	bl	80056cc <DMA_GetITStatus>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d103      	bne.n	800120e <DMA1_Channel6_IRQHandler+0x32>
    {
        /* Transfer complete interrupt */
        DMA_ClearITPendingBit(DMA1_FLAG_TC6);
 8001206:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800120a:	f004 fa89 	bl	8005720 <DMA_ClearITPendingBit>
    }

    rxIndex = USART_BUFFER_SIZE - USART_RX_DMA_CHANNEL->CNDTR;
 800120e:	236c      	movs	r3, #108	; 0x6c
 8001210:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800121a:	607b      	str	r3, [r7, #4]

    length = (int32_t)rxIndex - (int32_t)g_SerialDataRxIndex;
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	f241 4384 	movw	r3, #5252	; 0x1484
 8001222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	603b      	str	r3, [r7, #0]

    if (0 < length)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd13      	ble.n	800125a <DMA1_Channel6_IRQHandler+0x7e>
    {
        /* Data available and no wrap around */
        g_pCbSerialData(&g_SerialDataRxBuffer[g_SerialDataRxIndex], (uint32_t)length);
 8001232:	f240 0310 	movw	r3, #16
 8001236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f241 4384 	movw	r3, #5252	; 0x1484
 8001240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	f241 43c8 	movw	r3, #5320	; 0x14c8
 800124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800124e:	4419      	add	r1, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4608      	mov	r0, r1
 8001254:	4619      	mov	r1, r3
 8001256:	4790      	blx	r2
 8001258:	e023      	b.n	80012a2 <DMA1_Channel6_IRQHandler+0xc6>
    }
    else
    {
        /* Data available and wrap around */
        g_pCbSerialData(&g_SerialDataRxBuffer[g_SerialDataRxIndex],
 800125a:	f240 0310 	movw	r3, #16
 800125e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f241 4384 	movw	r3, #5252	; 0x1484
 8001268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	f241 43c8 	movw	r3, #5320	; 0x14c8
 8001272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001276:	4419      	add	r1, r3
 8001278:	f241 4384 	movw	r3, #5252	; 0x1484
 800127c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001286:	4608      	mov	r0, r1
 8001288:	4619      	mov	r1, r3
 800128a:	4790      	blx	r2
                        USART_BUFFER_SIZE - g_SerialDataRxIndex);
        g_pCbSerialData(&g_SerialDataRxBuffer[0], rxIndex);
 800128c:	f240 0310 	movw	r3, #16
 8001290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f241 40c8 	movw	r0, #5320	; 0x14c8
 800129a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4798      	blx	r3
    }

    g_SerialDataRxIndex = rxIndex;
 80012a2:	f241 4384 	movw	r3, #5252	; 0x1484
 80012a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt. \n
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da0e      	bge.n	80012e6 <NVIC_SetPriority+0x32>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80012c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80012cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	f002 020f 	and.w	r2, r2, #15
 80012d6:	1f11      	subs	r1, r2, #4
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
 80012e4:	e00c      	b.n	8001300 <NVIC_SetPriority+0x4c>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts      */
 80012e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80012ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80012ee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131a:	d301      	bcc.n	8001320 <SysTick_Config+0x14>
 800131c:	2301      	movs	r3, #1
 800131e:	e01a      	b.n	8001356 <SysTick_Config+0x4a>

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
 8001320:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001324:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800132e:	3a01      	subs	r2, #1
 8001330:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
 8001332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001336:	210f      	movs	r1, #15
 8001338:	f7ff ffbc 	bl	80012b4 <NVIC_SetPriority>
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 800133c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001340:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 8001348:	f24e 0310 	movw	r3, #57360	; 0xe010
 800134c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
  return (0);                                                                            /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <Interrupt_restore>:
 * Function definitions
 *****************************************************************************/

/** Globally enables interrupts if they were enabled */
static inline void Interrupt_restore(InterruptStatus_t status)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status & 0x01);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fb38 	bl	80029e4 <__set_PRIMASK>
}
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop

0800137c <Interrupt_saveAndDisable>:

/** Globally disables interrupts if they are not already disabled */
static inline InterruptStatus_t Interrupt_saveAndDisable(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	InterruptStatus_t status;

    status = __get_PRIMASK();
 8001382:	f001 fb1f 	bl	80029c4 <__get_PRIMASK>
 8001386:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status | 0x01);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fb28 	bl	80029e4 <__set_PRIMASK>

    return status;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop

080013a0 <Time_initialize>:

/******************************************************************************
 * @brief Initializes heart-beat LED and system clock.
 *****************************************************************************/
void Time_initialize(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Setup peripheral clock for GPIO_C (LED port) */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80013a6:	2010      	movs	r0, #16
 80013a8:	2101      	movs	r1, #1
 80013aa:	f002 fba5 	bl	8003af8 <RCC_APB2PeriphClockCmd>

    /* Configure LED Pin as output push-pull (used for heart-beat signal) */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80013b4:	2310      	movs	r3, #16
 80013b6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013b8:	2303      	movs	r3, #3
 80013ba:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013c2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80013c6:	4619      	mov	r1, r3
 80013c8:	f001 fdb0 	bl	8002f2c <GPIO_Init>

    /* Setup SysTick Timer (24 bit) for 0.125 s interrupts (4 Hz blink signal)
     * 72 MHz / DIV = 8 Hz ==> DIV = 9000000 */
    SysTick_Config(SYSTICK_RELOAD_VALUE);
 80013cc:	f645 3364 	movw	r3, #23396	; 0x5b64
 80013d0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff97 	bl	800130c <SysTick_Config>

    g_SysTickOverflowCntr = 0;
 80013de:	f241 5308 	movw	r3, #5384	; 0x1508
 80013e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
}
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Time_getUs>:

/******************************************************************************
 * @brief Calculates board time in microseconds (starting with 0 after reset).
 *****************************************************************************/
uint64_t Time_getUs(void)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
    const uint32_t ticksPerUs = SystemFrequency / 1000000UL;
 80013f6:	f645 3364 	movw	r3, #23396	; 0x5b64
 80013fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001404:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8001408:	fba3 1302 	umull	r1, r3, r3, r2
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	617b      	str	r3, [r7, #20]
    const uint64_t overflowDurationUs = 1000000UL / SYSTICK_INTERRUPT_FREQUENCY;
 8001410:	f64e 0248 	movw	r2, #59464	; 0xe848
 8001414:	f2c0 0201 	movt	r2, #1
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t ticks;
    uint32_t timeUs;
    uint32_t overflowCntr;

    /* Begin of critical section */
    status = Interrupt_saveAndDisable();
 8001420:	f7ff ffac 	bl	800137c <Interrupt_saveAndDisable>
 8001424:	6078      	str	r0, [r7, #4]

    overflowCntr = g_SysTickOverflowCntr;
 8001426:	f241 5308 	movw	r3, #5384	; 0x1508
 800142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
    ticks = SysTick->VAL;
 8001432:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001436:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	61fb      	str	r3, [r7, #28]

    /* A timer overflow between reading g_BoardTime and SysTick->VAL invalidates
     * the result. In this case an incremented g_BoardTime is used and
     * SysTick->VAL is read again to make sure to have a valid time. */
    if (0 != (SysTick->CTRL & SYSTICK_COUNTFLAG_BIT_MASK))
 800143e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001442:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <Time_getUs+0x72>
    {
        overflowCntr++;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3301      	adds	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
        ticks = SysTick->VAL;
 8001456:	f24e 0310 	movw	r3, #57360	; 0xe010
 800145a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	61fb      	str	r3, [r7, #28]
    }

    /* End of critical section */
    Interrupt_restore(status);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff7c 	bl	8001360 <Interrupt_restore>

    /* The timer counts from reload value downwards, this makes it count upwards */
    ticks = SYSTICK_RELOAD_VALUE - ticks;
 8001468:	f645 3364 	movw	r3, #23396	; 0x5b64
 800146c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	61fb      	str	r3, [r7, #28]

    /* 1 SysTick (24 bit) equals 1 / 72 MHz
     * We want the final time to be in microseconds */
    timeUs = ticks / ticksPerUs;
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	603b      	str	r3, [r7, #0]

    /* Now put ISR overflow counter (1 bit == 0.125 seconds) and time
     * (1 bit == 1 us) together */
    return ((uint64_t)timeUs + ((uint64_t)overflowCntr * overflowDurationUs));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	461a      	mov	r2, r3
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	68bc      	ldr	r4, [r7, #8]
 8001496:	fb03 f504 	mul.w	r5, r3, r4
 800149a:	68fc      	ldr	r4, [r7, #12]
 800149c:	fb02 f404 	mul.w	r4, r2, r4
 80014a0:	442c      	add	r4, r5
 80014a2:	68bd      	ldr	r5, [r7, #8]
 80014a4:	fba5 2302 	umull	r2, r3, r5, r2
 80014a8:	441c      	add	r4, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	1812      	adds	r2, r2, r0
 80014ae:	eb43 0301 	adc.w	r3, r3, r1
}
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bdb0      	pop	{r4, r5, r7, pc}

080014bc <Time_reset>:

/******************************************************************************
 * @brief Resets the board time to 0.
 *****************************************************************************/
void Time_reset(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
    InterruptStatus_t status;

    /* Begin of critical section */
    status = Interrupt_saveAndDisable();
 80014c2:	f7ff ff5b 	bl	800137c <Interrupt_saveAndDisable>
 80014c6:	6078      	str	r0, [r7, #4]

    SysTick->VAL = 0;
 80014c8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80014cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    g_SysTickOverflowCntr = 0;
 80014d4:	f241 5308 	movw	r3, #5384	; 0x1508
 80014d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

    /* End of critical section */
    Interrupt_restore(status);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff3d 	bl	8001360 <Interrupt_restore>
}
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <SysTick_Handler>:

/******************************************************************************
 * @brief Interrupt service routine for SysTick timer.
 *****************************************************************************/
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
    const uint32_t maxOverflows = 0xFFFFFFFFUL;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f6:	607b      	str	r3, [r7, #4]
    static uint8_t State = 0;

    /* Clear counter reached zero flag */
    SysTick->CTRL &= ~SYSTICK_COUNTFLAG_BIT_MASK;
 80014f8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80014fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001500:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001504:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800150e:	601a      	str	r2, [r3, #0]

    /* Toggle LED (heart-beat) */
    if (1 == State)
 8001510:	f241 530c 	movw	r3, #5388	; 0x150c
 8001514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <SysTick_Handler+0x44>
    {
        /* Turn on LD1 */
        GPIO_SetBits(GPIOC, GPIO_Pin_12);
 800151e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001522:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152a:	f001 fe1f 	bl	800316c <GPIO_SetBits>
 800152e:	e007      	b.n	8001540 <SysTick_Handler+0x54>
    }
    else
    {
        /* Turn off LD1 */
        GPIO_ResetBits(GPIOC, GPIO_Pin_12);
 8001530:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001534:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153c:	f001 fe24 	bl	8003188 <GPIO_ResetBits>
    }

    if (maxOverflows == g_SysTickOverflowCntr)
 8001540:	f241 5308 	movw	r3, #5384	; 0x1508
 8001544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d106      	bne.n	800155e <SysTick_Handler+0x72>
    {
        Communication_transmitStatusMessage(StatusMessage_Warning, "HW: Timestamp overflow (305.4 h elapsed)");
 8001550:	2001      	movs	r0, #1
 8001552:	f645 11f4 	movw	r1, #23028	; 0x59f4
 8001556:	f6c0 0100 	movt	r1, #2048	; 0x800
 800155a:	f000 fad5 	bl	8001b08 <Communication_transmitStatusMessage>
    }

    /* Toggle state and increment time */
    State ^= 1;
 800155e:	f241 530c 	movw	r3, #5388	; 0x150c
 8001562:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	f083 0301 	eor.w	r3, r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	f241 530c 	movw	r3, #5388	; 0x150c
 8001572:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001576:	701a      	strb	r2, [r3, #0]
    g_SysTickOverflowCntr++;
 8001578:	f241 5308 	movw	r3, #5384	; 0x1508
 800157c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	f241 5308 	movw	r3, #5384	; 0x1508
 8001588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Interrupt_restore>:
 * Function definitions
 *****************************************************************************/

/** Globally enables interrupts if they were enabled */
static inline void Interrupt_restore(InterruptStatus_t status)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status & 0x01);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 fa1e 	bl	80029e4 <__set_PRIMASK>
}
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <Interrupt_saveAndDisable>:

/** Globally disables interrupts if they are not already disabled */
static inline InterruptStatus_t Interrupt_saveAndDisable(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
	InterruptStatus_t status;

    status = __get_PRIMASK();
 80015b6:	f001 fa05 	bl	80029c4 <__get_PRIMASK>
 80015ba:	6078      	str	r0, [r7, #4]
    __set_PRIMASK(status | 0x01);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fa0e 	bl	80029e4 <__set_PRIMASK>

    return status;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <CalculateBufferSpace>:
 * @param pBuffer: Pointer to the buffer.
 *
 * @retval The number of free bytes inside the given buffer.
 *****************************************************************************/
static inline uint32_t CalculateBufferSpace(CommunicationBuffer_t* pBuffer)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	return ((pBuffer->ReadIndex - pBuffer->WriteIndex - 1) & (COMMUNICATON_BUFFER_SIZE - 1));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <CalculateIndex>:
 * @param offset: Offset to be used.
 *
 * @retval The modified index.
 *****************************************************************************/
static inline uint32_t CalculateIndex(uint32_t index, uint32_t offset)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	return ((index + offset) & (COMMUNICATON_BUFFER_SIZE - 1));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <AddDataToBuffer>:
 * @param length: Number of data bytes to be buffered.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t AddDataToBuffer(CommunicationBuffer_t* pBuffer, const uint8_t* pData, uint32_t length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
    const uint32_t space = CalculateBufferSpace(pBuffer);
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff ffd5 	bl	80015d4 <CalculateBufferSpace>
 800162a:	6138      	str	r0, [r7, #16]
    uint32_t i;

    if ((0 != pBuffer->Overrun) || (space < length))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <AddDataToBuffer+0x26>
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d205      	bcs.n	800164a <AddDataToBuffer+0x32>
    {
        /* Not enough room in buffer or a not handled overrun exists */
    	pBuffer->Overrun = 1;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        return 1;
 8001646:	2301      	movs	r3, #1
 8001648:	e01c      	b.n	8001684 <AddDataToBuffer+0x6c>
    }

	/* Use slow copy algorithm */
	for (i = 0; i < length; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e014      	b.n	800167a <AddDataToBuffer+0x62>
	{
		pBuffer->Data[pBuffer->WriteIndex] = pData[i];
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	440a      	add	r2, r1
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	440b      	add	r3, r1
 8001660:	721a      	strb	r2, [r3, #8]
		pBuffer->WriteIndex = CalculateIndex(pBuffer->WriteIndex, 1);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	2101      	movs	r1, #1
 800166a:	f7ff ffc5 	bl	80015f8 <CalculateIndex>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
    	pBuffer->Overrun = 1;
        return 1;
    }

	/* Use slow copy algorithm */
	for (i = 0; i < length; i++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3e6      	bcc.n	8001650 <AddDataToBuffer+0x38>
	{
		pBuffer->Data[pBuffer->WriteIndex] = pData[i];
		pBuffer->WriteIndex = CalculateIndex(pBuffer->WriteIndex, 1);
	}

    return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <CalculateCrc>:
 * @param length: Number of data bytes to be used.
 *
 * @retval The calculated CRC.
 *****************************************************************************/
static uint8_t CalculateCrc(uint8_t* pData, uint32_t length)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	for (i = 0; i < length; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	e010      	b.n	80016c2 <CalculateCrc+0x36>
	{
		crc = g_CrcTable[(uint8_t)(crc ^ pData[i])];
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4413      	add	r3, r2
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	4053      	eors	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f645 2320 	movw	r3, #23072	; 0x5a20
 80016b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	73fb      	strb	r3, [r7, #15]
static uint8_t CalculateCrc(uint8_t* pData, uint32_t length)
{
	uint8_t crc = 0;
	uint32_t i;

	for (i = 0; i < length; i++)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3301      	adds	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3ea      	bcc.n	80016a0 <CalculateCrc+0x14>
	{
		crc = g_CrcTable[(uint8_t)(crc ^ pData[i])];
	}

	return crc;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <SerializeTime>:
 *        right position inside a response packet
 *
 * @param pData: Pointer to storage for serialized time.
 *****************************************************************************/
static void SerializeTime(uint8_t* pData)
{
 80016d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016dc:	b088      	sub	sp, #32
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
	const uint32_t timeBytesOffset = 2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
	const uint64_t time = Time_getUs();
 80016e6:	f7ff fe83 	bl	80013f0 <Time_getUs>
 80016ea:	e9c7 0104 	strd	r0, r1, [r7, #16]

	pData[timeBytesOffset + 0] = (uint8_t)(time >> 0);
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	7c3a      	ldrb	r2, [r7, #16]
 80016f6:	701a      	strb	r2, [r3, #0]
	pData[timeBytesOffset + 1] = (uint8_t)(time >> 8);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	18d1      	adds	r1, r2, r3
 8001700:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001704:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8001708:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 800170c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001710:	fa5f f38a 	uxtb.w	r3, sl
 8001714:	700b      	strb	r3, [r1, #0]
	pData[timeBytesOffset + 2] = (uint8_t)(time >> 16);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3302      	adds	r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	18d1      	adds	r1, r2, r3
 800171e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001722:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001726:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
 800172a:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800172e:	fa5f f388 	uxtb.w	r3, r8
 8001732:	700b      	strb	r3, [r1, #0]
	pData[timeBytesOffset + 3] = (uint8_t)(time >> 24);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	3303      	adds	r3, #3
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	18d1      	adds	r1, r2, r3
 800173c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001740:	0e14      	lsrs	r4, r2, #24
 8001742:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001746:	0e1d      	lsrs	r5, r3, #24
 8001748:	b2e3      	uxtb	r3, r4
 800174a:	700b      	strb	r3, [r1, #0]
	pData[timeBytesOffset + 4] = (uint8_t)(time >> 32);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	18d1      	adds	r1, r2, r3
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001758:	0018      	movs	r0, r3
 800175a:	6038      	str	r0, [r7, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	783b      	ldrb	r3, [r7, #0]
 8001762:	700b      	strb	r3, [r1, #0]
}
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800176c <SerialReceiveDataAvailableCallback>:
 *
 * @note No need to ensure ISR-safety, call-backs are always invoked from
 *       within ISR-safe context (in ISR or with disabled interrupts).
 *****************************************************************************/
static void SerialReceiveDataAvailableCallback(const uint8_t* pData, uint32_t length)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	AddDataToBuffer(&g_RxBuffer, pData, length);
 8001776:	f241 5010 	movw	r0, #5392	; 0x1510
 800177a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	f7ff ff49 	bl	8001618 <AddDataToBuffer>
}
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <CanStateChangedCallback>:
 *
 * @note No need to ensure ISR-safety, call-backs are always invoked from
 *       within ISR-safe context (in ISR or with disabled interrupts).
 *****************************************************************************/
static void CanStateChangedCallback(CanState_t state)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	4601      	mov	r1, r0
 8001794:	71f9      	strb	r1, [r7, #7]
 8001796:	4669      	mov	r1, sp
 8001798:	460e      	mov	r6, r1
	const uint32_t canStateResponseLength = 9;
 800179a:	2109      	movs	r1, #9
 800179c:	6179      	str	r1, [r7, #20]
	uint8_t data[canStateResponseLength];
 800179e:	6979      	ldr	r1, [r7, #20]
 80017a0:	3901      	subs	r1, #1
 80017a2:	6139      	str	r1, [r7, #16]
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	4608      	mov	r0, r1
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	00cd      	lsls	r5, r1, #3
 80017ae:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80017b2:	00c4      	lsls	r4, r0, #3
 80017b4:	6979      	ldr	r1, [r7, #20]
 80017b6:	4608      	mov	r0, r1
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	00cb      	lsls	r3, r1, #3
 80017be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017c2:	00c2      	lsls	r2, r0, #3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3307      	adds	r3, #7
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	ebad 0d03 	sub.w	sp, sp, r3
 80017d0:	466b      	mov	r3, sp
 80017d2:	3300      	adds	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

	data[0] = (uint8_t)(g_DataStreamPreamble | canStateResponseLength);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	23a0      	movs	r3, #160	; 0xa0
 80017dc:	4313      	orrs	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(ReceiveState << g_PacketTypeByteBitOffset | Can);
 80017e4:	2303      	movs	r3, #3
 80017e6:	2204      	movs	r2, #4
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	705a      	strb	r2, [r3, #1]
	SerializeTime(data);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff6b 	bl	80016d8 <SerializeTime>
	data[7] = state;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	71da      	strb	r2, [r3, #7]
	data[8] = CalculateCrc(data, canStateResponseLength - 1);
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3b01      	subs	r3, #1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff ff3b 	bl	800168c <CalculateCrc>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	721a      	strb	r2, [r3, #8]

	AddDataToBuffer(&g_TxBuffer, data, canStateResponseLength);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f241 701c 	movw	r0, #5916	; 0x171c
 8001824:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001828:	4619      	mov	r1, r3
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	f7ff fef4 	bl	8001618 <AddDataToBuffer>
 8001830:	46b5      	mov	sp, r6
}
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001838 <CanErrorCallback>:
 *
 * @note No need to ensure ISR-safety, call-backs are always invoked from
 *       within ISR-safe context (in ISR or with disabled interrupts).
 *****************************************************************************/
static void CanErrorCallback(CanError_t error)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	4601      	mov	r1, r0
 8001840:	71f9      	strb	r1, [r7, #7]
 8001842:	4669      	mov	r1, sp
 8001844:	460e      	mov	r6, r1
	const uint32_t canErrorResponseLength = 9;
 8001846:	2109      	movs	r1, #9
 8001848:	6179      	str	r1, [r7, #20]
	uint8_t data[canErrorResponseLength];
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	3901      	subs	r1, #1
 800184e:	6139      	str	r1, [r7, #16]
 8001850:	6979      	ldr	r1, [r7, #20]
 8001852:	4608      	mov	r0, r1
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	00cd      	lsls	r5, r1, #3
 800185a:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 800185e:	00c4      	lsls	r4, r0, #3
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	4608      	mov	r0, r1
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	00cb      	lsls	r3, r1, #3
 800186a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800186e:	00c2      	lsls	r2, r0, #3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3307      	adds	r3, #7
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	ebad 0d03 	sub.w	sp, sp, r3
 800187c:	466b      	mov	r3, sp
 800187e:	3300      	adds	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]

	data[0] = (uint8_t)(g_DataStreamPreamble | canErrorResponseLength);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	23a0      	movs	r3, #160	; 0xa0
 8001888:	4313      	orrs	r3, r2
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(ReceiveError << g_PacketTypeByteBitOffset | Can);
 8001890:	2303      	movs	r3, #3
 8001892:	2205      	movs	r2, #5
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	705a      	strb	r2, [r3, #1]
	SerializeTime(data);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff15 	bl	80016d8 <SerializeTime>
	data[7] = error;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	71da      	strb	r2, [r3, #7]
	data[8] = CalculateCrc(data, canErrorResponseLength - 1);
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff fee5 	bl	800168c <CalculateCrc>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	721a      	strb	r2, [r3, #8]

	AddDataToBuffer(&g_TxBuffer, data, canErrorResponseLength);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f241 701c 	movw	r0, #5916	; 0x171c
 80018d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018d4:	4619      	mov	r1, r3
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f7ff fe9e 	bl	8001618 <AddDataToBuffer>
 80018dc:	46b5      	mov	sp, r6
}
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e4 <HandleCanMessage>:
 * @param pMsg: The message that triggered the event.
 * @param dir: The message direction (transmit, receive).
 * @param type: The response type to be used.
 *****************************************************************************/
static void HandleCanMessage(const CanRxMsg* pMsg, Direction_t dir, Response_t type)
{
 80018e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018e8:	b08d      	sub	sp, #52	; 0x34
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	460a      	mov	r2, r1
 80018f2:	70fa      	strb	r2, [r7, #3]
 80018f4:	70bb      	strb	r3, [r7, #2]
 80018f6:	466b      	mov	r3, sp
 80018f8:	461e      	mov	r6, r3
	const uint32_t canMsgResponseBaseLength = 10;
 80018fa:	230a      	movs	r3, #10
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t canMsgExtIdAdditionalBytes = 2;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
	const uint32_t identifierBytesOffset = 7;
 8001902:	2307      	movs	r3, #7
 8001904:	61fb      	str	r3, [r7, #28]
	const uint32_t canMsgResponseLength = canMsgResponseBaseLength + pMsg->DLC +
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a9b      	ldrb	r3, [r3, #10]
 800190a:	461a      	mov	r2, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	441a      	add	r2, r3
										  ((CAN_ID_EXT == pMsg->IDE) ? canMsgExtIdAdditionalBytes : 0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7a1b      	ldrb	r3, [r3, #8]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d101      	bne.n	800191c <HandleCanMessage+0x38>
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	e000      	b.n	800191e <HandleCanMessage+0x3a>
 800191c:	2300      	movs	r3, #0
static void HandleCanMessage(const CanRxMsg* pMsg, Direction_t dir, Response_t type)
{
	const uint32_t canMsgResponseBaseLength = 10;
	const uint32_t canMsgExtIdAdditionalBytes = 2;
	const uint32_t identifierBytesOffset = 7;
	const uint32_t canMsgResponseLength = canMsgResponseBaseLength + pMsg->DLC +
 800191e:	4413      	add	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
										  ((CAN_ID_EXT == pMsg->IDE) ? canMsgExtIdAdditionalBytes : 0);
	uint8_t data[canMsgResponseLength];
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	3b01      	subs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	461a      	mov	r2, r3
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001934:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001938:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	461a      	mov	r2, r3
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	00dd      	lsls	r5, r3, #3
 8001946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800194a:	00d4      	lsls	r4, r2, #3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	3307      	adds	r3, #7
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	ebad 0d03 	sub.w	sp, sp, r3
 8001958:	466b      	mov	r3, sp
 800195a:	3300      	adds	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
	uint32_t identifier;
	uint32_t i;
	uint8_t* pDataBytes;

	data[0] = (uint8_t)(g_DataStreamPreamble | canMsgResponseLength);
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	23a0      	movs	r3, #160	; 0xa0
 8001964:	4313      	orrs	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(type << g_PacketTypeByteBitOffset | Can);
 800196c:	78ba      	ldrb	r2, [r7, #2]
 800196e:	2303      	movs	r3, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	b2da      	uxtb	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	705a      	strb	r2, [r3, #1]
	SerializeTime(data);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fea7 	bl	80016d8 <SerializeTime>

	if (CAN_ID_STD == pMsg->IDE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7a1b      	ldrb	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d12a      	bne.n	80019e8 <HandleCanMessage+0x104>
	{
		identifier = pMsg->StdId;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
		identifier |= (CAN_RTR_REMOTE == pMsg->RTR) ? (1 << 14) : 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7a5b      	ldrb	r3, [r3, #9]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d102      	bne.n	80019a6 <HandleCanMessage+0xc2>
 80019a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a4:	e000      	b.n	80019a8 <HandleCanMessage+0xc4>
 80019a6:	2300      	movs	r3, #0
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
		identifier |= (Transmit == dir) ? (1 << 15) : 0;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <HandleCanMessage+0xd6>
 80019b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b8:	e000      	b.n	80019bc <HandleCanMessage+0xd8>
 80019ba:	2300      	movs	r3, #0
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
		data[identifierBytesOffset + 0] = (uint8_t)(identifier >> 8);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	440b      	add	r3, r1
 80019ce:	701a      	strb	r2, [r3, #0]
		data[identifierBytesOffset + 1] = (uint8_t)(identifier >> 0);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3301      	adds	r3, #1
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	b2d1      	uxtb	r1, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	54d1      	strb	r1, [r2, r3]
		pDataBytes = &data[identifierBytesOffset + 2];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3302      	adds	r3, #2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e6:	e03b      	b.n	8001a60 <HandleCanMessage+0x17c>
	}
	else
	{
		identifier = pMsg->ExtId;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
		identifier |= (1 << 29);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019f4:	60fb      	str	r3, [r7, #12]
		identifier |= (CAN_RTR_REMOTE == pMsg->RTR) ? (1 << 30) : 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7a5b      	ldrb	r3, [r3, #9]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d102      	bne.n	8001a04 <HandleCanMessage+0x120>
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a02:	e000      	b.n	8001a06 <HandleCanMessage+0x122>
 8001a04:	2300      	movs	r3, #0
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
		identifier |= (Transmit == dir) ? (1 << 31) : 0;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HandleCanMessage+0x134>
 8001a12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a16:	e000      	b.n	8001a1a <HandleCanMessage+0x136>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
		data[identifierBytesOffset + 0] = (uint8_t)(identifier >> 24);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	0e1b      	lsrs	r3, r3, #24
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	6939      	ldr	r1, [r7, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
		data[identifierBytesOffset + 1] = (uint8_t)(identifier >> 16);
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	0c12      	lsrs	r2, r2, #16
 8001a36:	b2d1      	uxtb	r1, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	54d1      	strb	r1, [r2, r3]
		data[identifierBytesOffset + 2] = (uint8_t)(identifier >> 8);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	0a12      	lsrs	r2, r2, #8
 8001a44:	b2d1      	uxtb	r1, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	54d1      	strb	r1, [r2, r3]
		data[identifierBytesOffset + 3] = (uint8_t)(identifier >> 0);
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	b2d1      	uxtb	r1, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	54d1      	strb	r1, [r2, r3]
		pDataBytes = &data[identifierBytesOffset + 4];
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	for (i = 0; i < pMsg->DLC; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a64:	e00c      	b.n	8001a80 <HandleCanMessage+0x19c>
	{
		*pDataBytes = pMsg->Data[i];
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	78da      	ldrb	r2, [r3, #3]
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	701a      	strb	r2, [r3, #0]
		pDataBytes++;
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	3301      	adds	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
		data[identifierBytesOffset + 2] = (uint8_t)(identifier >> 8);
		data[identifierBytesOffset + 3] = (uint8_t)(identifier >> 0);
		pDataBytes = &data[identifierBytesOffset + 4];
	}

	for (i = 0; i < pMsg->DLC; i++)
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7a9b      	ldrb	r3, [r3, #10]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8ec      	bhi.n	8001a66 <HandleCanMessage+0x182>
	{
		*pDataBytes = pMsg->Data[i];
		pDataBytes++;
	}

	data[canMsgResponseLength - 1] = CalculateCrc(data, canMsgResponseLength - 1);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1e5c      	subs	r4, r3, #1
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff fdf7 	bl	800168c <CalculateCrc>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	551a      	strb	r2, [r3, r4]

	AddDataToBuffer(&g_TxBuffer, data, canMsgResponseLength);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	f241 701c 	movw	r0, #5916	; 0x171c
 8001aac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	f7ff fdb0 	bl	8001618 <AddDataToBuffer>
 8001ab8:	46b5      	mov	sp, r6
}
 8001aba:	3734      	adds	r7, #52	; 0x34
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac2:	bf00      	nop

08001ac4 <CanReceiveMessageCallback>:
 *
 * @note No need to ensure ISR-safety, call-backs are always invoked from
 *       within ISR-safe context (in ISR or with disabled interrupts).
 *****************************************************************************/
static void CanReceiveMessageCallback(const CanRxMsg* pRxMsg)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	HandleCanMessage(pRxMsg, Receive, ReceivePacket);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f7ff ff07 	bl	80018e4 <HandleCanMessage>
}
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <CanTransmitMessageCallback>:

 * @note No need to ensure ISR-safety, call-backs are always invoked from
 *       within ISR-safe context (in ISR or with disabled interrupts).
 *****************************************************************************/
static void CanTransmitMessageCallback(const CanTxMsg* pTxMsg, uint8_t isQueued)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	const Response_t responseType = (0 == isQueued) ? ReceivePacket : ReceivePacketQueued;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <CanTransmitMessageCallback+0x16>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e000      	b.n	8001af4 <CanTransmitMessageCallback+0x18>
 8001af2:	2303      	movs	r3, #3
 8001af4:	73fb      	strb	r3, [r7, #15]

	/* Dirty HACK: The fact that CanRxMsg and CanTxMsg have essentially
	 *             the same layout is used to make a valid type-cast. */
	HandleCanMessage((CanRxMsg*)pTxMsg, Transmit, responseType);
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	2100      	movs	r1, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff fef1 	bl	80018e4 <HandleCanMessage>
}
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <Communication_transmitStatusMessage>:

/******************************************************************************
 * @brief Adds a heart-beat packet to the transmit buffer.
 *****************************************************************************/
void Communication_transmitStatusMessage(StatusMessage_t type, const char* pMessage)
{
 8001b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b0c:	b08b      	sub	sp, #44	; 0x2c
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	6039      	str	r1, [r7, #0]
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	466b      	mov	r3, sp
 8001b18:	461e      	mov	r6, r3
	const uint32_t statusMessageResponseBaseLength = 4;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t maxPacketSize = 0x1F;
 8001b1e:	231f      	movs	r3, #31
 8001b20:	623b      	str	r3, [r7, #32]
	const uint32_t maxMessageLength = maxPacketSize - statusMessageResponseBaseLength;
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]
	const uint32_t messageLength = strnlen(pMessage, maxMessageLength);
 8001b2a:	6838      	ldr	r0, [r7, #0]
 8001b2c:	69f9      	ldr	r1, [r7, #28]
 8001b2e:	f003 ff49 	bl	80059c4 <strnlen>
 8001b32:	61b8      	str	r0, [r7, #24]
	const uint32_t statusMessageResponseLength =statusMessageResponseBaseLength + messageLength;
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
	InterruptStatus_t status;
	uint8_t data[statusMessageResponseLength];
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	461a      	mov	r2, r3
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001b4e:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001b52:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	00dd      	lsls	r5, r3, #3
 8001b60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b64:	00d4      	lsls	r4, r2, #3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3307      	adds	r3, #7
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b72:	466b      	mov	r3, sp
 8001b74:	3300      	adds	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

	data[0] = g_DataStreamPreamble | statusMessageResponseLength;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	23a0      	movs	r3, #160	; 0xa0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	701a      	strb	r2, [r3, #0]
	data[1] = StatusMessage << g_PacketTypeByteBitOffset;
 8001b86:	2303      	movs	r3, #3
 8001b88:	2207      	movs	r2, #7
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	705a      	strb	r2, [r3, #1]
	data[2] = (uint8_t)type;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	709a      	strb	r2, [r3, #2]

	strncpy((char*)&data[3], pMessage, messageLength);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	f003 feda 	bl	800595c <strncpy>

	data[statusMessageResponseLength - 1] = CalculateCrc(data, statusMessageResponseLength - 1);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1e5c      	subs	r4, r3, #1
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff fd69 	bl	800168c <CalculateCrc>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	551a      	strb	r2, [r3, r4]

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8001bc2:	f7ff fcf5 	bl	80015b0 <Interrupt_saveAndDisable>
 8001bc6:	60b8      	str	r0, [r7, #8]

	AddDataToBuffer(&g_TxBuffer, data, statusMessageResponseLength);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f241 701c 	movw	r0, #5916	; 0x171c
 8001bce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	f7ff fd1f 	bl	8001618 <AddDataToBuffer>

	/* End of critical section */
	Interrupt_restore(status);
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f7ff fcda 	bl	8001594 <Interrupt_restore>
 8001be0:	46b5      	mov	sp, r6
}
 8001be2:	372c      	adds	r7, #44	; 0x2c
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bea:	bf00      	nop

08001bec <TransmitAcknowledge>:
 * @brief Adds an acknowledge packet to the transmit buffer.
 *
 * @param checksum: The checksum of the command to be acknowledged.
 *****************************************************************************/
static void TransmitAcknowledge(uint8_t checksum)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	71f9      	strb	r1, [r7, #7]
 8001bf6:	4669      	mov	r1, sp
 8001bf8:	460e      	mov	r6, r1
	const uint32_t ackResponseLength = 4;
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	6179      	str	r1, [r7, #20]
	InterruptStatus_t status;
	uint8_t data[ackResponseLength];
 8001bfe:	6979      	ldr	r1, [r7, #20]
 8001c00:	3901      	subs	r1, #1
 8001c02:	6139      	str	r1, [r7, #16]
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	4608      	mov	r0, r1
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	00cd      	lsls	r5, r1, #3
 8001c0e:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 8001c12:	00c4      	lsls	r4, r0, #3
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	4608      	mov	r0, r1
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	00cb      	lsls	r3, r1, #3
 8001c1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c22:	00c2      	lsls	r2, r0, #3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3307      	adds	r3, #7
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c30:	466b      	mov	r3, sp
 8001c32:	3300      	adds	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]

	data[0] = g_DataStreamPreamble | ackResponseLength;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	23a0      	movs	r3, #160	; 0xa0
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]
	data[1] = Acknowledge << g_PacketTypeByteBitOffset;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
	data[2] = checksum;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	709a      	strb	r2, [r3, #2]
	data[3] = CalculateCrc(data, ackResponseLength - 1);
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff fd17 	bl	800168c <CalculateCrc>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	70da      	strb	r2, [r3, #3]

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8001c66:	f7ff fca3 	bl	80015b0 <Interrupt_saveAndDisable>
 8001c6a:	60b8      	str	r0, [r7, #8]

	AddDataToBuffer(&g_TxBuffer, data, ackResponseLength);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f241 701c 	movw	r0, #5916	; 0x171c
 8001c72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001c76:	4619      	mov	r1, r3
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	f7ff fccd 	bl	8001618 <AddDataToBuffer>

	/* End of critical section */
	Interrupt_restore(status);
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f7ff fc88 	bl	8001594 <Interrupt_restore>
 8001c84:	46b5      	mov	sp, r6
}
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8c <TransmitNotAcknowledge>:
 * @brief Adds a negative acknowledge packet to the transmit buffer.
 *
 * @param checksum: The checksum of the command to be not acknowledged.
 *****************************************************************************/
static void TransmitNotAcknowledge(uint8_t checksum)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4601      	mov	r1, r0
 8001c94:	71f9      	strb	r1, [r7, #7]
 8001c96:	4669      	mov	r1, sp
 8001c98:	460e      	mov	r6, r1
	const uint32_t nackResponseLength = 4;
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	6179      	str	r1, [r7, #20]
	InterruptStatus_t status;
	uint8_t data[nackResponseLength];
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	3901      	subs	r1, #1
 8001ca2:	6139      	str	r1, [r7, #16]
 8001ca4:	6979      	ldr	r1, [r7, #20]
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	00cd      	lsls	r5, r1, #3
 8001cae:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 8001cb2:	00c4      	lsls	r4, r0, #3
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	4608      	mov	r0, r1
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	00cb      	lsls	r3, r1, #3
 8001cbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cc2:	00c2      	lsls	r2, r0, #3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3307      	adds	r3, #7
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	ebad 0d03 	sub.w	sp, sp, r3
 8001cd0:	466b      	mov	r3, sp
 8001cd2:	3300      	adds	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

	data[0] = g_DataStreamPreamble | nackResponseLength;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	23a0      	movs	r3, #160	; 0xa0
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	701a      	strb	r2, [r3, #0]
	data[1] = NotAcknowledge << g_PacketTypeByteBitOffset;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	705a      	strb	r2, [r3, #1]
	data[2] = checksum;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	709a      	strb	r2, [r3, #2]
	data[3] = CalculateCrc(data, nackResponseLength - 1);
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7ff fcc3 	bl	800168c <CalculateCrc>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	70da      	strb	r2, [r3, #3]

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8001d0e:	f7ff fc4f 	bl	80015b0 <Interrupt_saveAndDisable>
 8001d12:	60b8      	str	r0, [r7, #8]

	AddDataToBuffer(&g_TxBuffer, data, nackResponseLength);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f241 701c 	movw	r0, #5916	; 0x171c
 8001d1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001d1e:	4619      	mov	r1, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	f7ff fc79 	bl	8001618 <AddDataToBuffer>

	/* End of critical section */
	Interrupt_restore(status);
 8001d26:	68b8      	ldr	r0, [r7, #8]
 8001d28:	f7ff fc34 	bl	8001594 <Interrupt_restore>
 8001d2c:	46b5      	mov	sp, r6
}
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d34 <TransmitHeartBeat>:

/******************************************************************************
 * @brief Adds a heart-beat packet to the transmit buffer.
 *****************************************************************************/
static void TransmitHeartBeat(void)
{
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	466c      	mov	r4, sp
 8001d3c:	4626      	mov	r6, r4
	const uint32_t heartBeatResponseLength = 5;
 8001d3e:	2405      	movs	r4, #5
 8001d40:	617c      	str	r4, [r7, #20]
	const uint8_t majorVersion = 0x01;
 8001d42:	2401      	movs	r4, #1
 8001d44:	74fc      	strb	r4, [r7, #19]
	const uint8_t minorVersion = 0x00;
 8001d46:	2400      	movs	r4, #0
 8001d48:	74bc      	strb	r4, [r7, #18]
	InterruptStatus_t status;
	uint8_t data[heartBeatResponseLength];
 8001d4a:	697c      	ldr	r4, [r7, #20]
 8001d4c:	3c01      	subs	r4, #1
 8001d4e:	60fc      	str	r4, [r7, #12]
 8001d50:	697c      	ldr	r4, [r7, #20]
 8001d52:	f04f 0500 	mov.w	r5, #0
 8001d56:	00e9      	lsls	r1, r5, #3
 8001d58:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001d5c:	00e0      	lsls	r0, r4, #3
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	4608      	mov	r0, r1
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	00cb      	lsls	r3, r1, #3
 8001d68:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d6c:	00c2      	lsls	r2, r0, #3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3307      	adds	r3, #7
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	ebad 0d03 	sub.w	sp, sp, r3
 8001d7a:	466b      	mov	r3, sp
 8001d7c:	3300      	adds	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]

	data[0] = g_DataStreamPreamble | heartBeatResponseLength;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	23a0      	movs	r3, #160	; 0xa0
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	701a      	strb	r2, [r3, #0]
	data[1] = HeartBeat << g_PacketTypeByteBitOffset;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	2206      	movs	r2, #6
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	705a      	strb	r2, [r3, #1]
	data[2] = majorVersion;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	7cfa      	ldrb	r2, [r7, #19]
 8001da0:	709a      	strb	r2, [r3, #2]
	data[3] = minorVersion;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	7cba      	ldrb	r2, [r7, #18]
 8001da6:	70da      	strb	r2, [r3, #3]
	data[4] = CalculateCrc(data, heartBeatResponseLength - 1);
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7ff fc6b 	bl	800168c <CalculateCrc>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	711a      	strb	r2, [r3, #4]

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8001dbe:	f7ff fbf7 	bl	80015b0 <Interrupt_saveAndDisable>
 8001dc2:	6078      	str	r0, [r7, #4]

	AddDataToBuffer(&g_TxBuffer, data, heartBeatResponseLength);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f241 701c 	movw	r0, #5916	; 0x171c
 8001dca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001dce:	4619      	mov	r1, r3
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	f7ff fc21 	bl	8001618 <AddDataToBuffer>

	/* End of critical section */
	Interrupt_restore(status);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fbdc 	bl	8001594 <Interrupt_restore>
 8001ddc:	46b5      	mov	sp, r6
}
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de4 <ParseCommandType>:
 * @param pData: Pointer to data the packet.
 *
 * @retval The parsed CommandType.
 *****************************************************************************/
static Command_t ParseCommandType(uint8_t* pData)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	const uint32_t cmdBytePosition = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
	const uint32_t cmdByteMask = 0xF8;
 8001df0:	23f8      	movs	r3, #248	; 0xf8
 8001df2:	60bb      	str	r3, [r7, #8]

	return ((pData[cmdBytePosition] & cmdByteMask) >> g_PacketTypeByteBitOffset);
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	401a      	ands	r2, r3
 8001e02:	2303      	movs	r3, #3
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	b2db      	uxtb	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <ParseBusType>:
 * @param pData: Pointer to data the packet.
 *
 * @retval The parsed bus type.
 *****************************************************************************/
static Bus_t ParseBusType(uint8_t* pData)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	const uint32_t busTypeBytePosition = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
	const uint32_t busTypeByteMask = 0x07;
 8001e24:	2307      	movs	r3, #7
 8001e26:	60bb      	str	r3, [r7, #8]

	return (pData[busTypeBytePosition] & busTypeByteMask);
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <ParseBaudRate>:
 * @param pData: Pointer to data the packet.
 *
 * @retval The parsed baud rate.
 *****************************************************************************/
static uint32_t ParseBaudRate(uint8_t *pData)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	const uint32_t baudRateBytesPos = 2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	60fb      	str	r3, [r7, #12]
	uint32_t baudRate;

	baudRate = ((uint32_t)pData[baudRateBytesPos + 0]) << 0;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	60bb      	str	r3, [r7, #8]
	baudRate |= ((uint32_t)pData[baudRateBytesPos + 1]) << 8;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
	baudRate |= ((uint32_t)pData[baudRateBytesPos + 2]) << 16;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60bb      	str	r3, [r7, #8]
	baudRate |= ((uint32_t)pData[baudRateBytesPos + 3]) << 24;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3303      	adds	r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]

	return baudRate;
 8001e90:	68bb      	ldr	r3, [r7, #8]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <HandleNoneConfigurationCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t HandleNoneConfigurationCommand(uint32_t length)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	const uint32_t noneCmdLength = 3;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]

	if (length != noneCmdLength)
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HandleNoneConfigurationCommand+0x18>
	{
		return 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e004      	b.n	8001ec2 <HandleNoneConfigurationCommand+0x22>
	}

	Can_deinitialize();
 8001eb8:	f7fe fb58 	bl	800056c <Can_deinitialize>
	Lin_deinitialize();
 8001ebc:	f7fe ff9a 	bl	8000df4 <Lin_deinitialize>

	return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop

08001ecc <HandleCanConfigurationCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t HandleCanConfigurationCommand(uint8_t *pData, uint32_t length)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	; 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	const uint32_t canCmdLength = 8;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint32_t modeBytePosition = 6;
 8001eda:	2306      	movs	r3, #6
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
	const uint32_t ModeMask = 0x01;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t silentModeBitPos = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
	const uint32_t singleShotModeBitPos = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
	const uint32_t busOffRecoveryModeBitPos = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
	const uint32_t crcIndex = length - 1;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
	uint8_t silentMode;
	uint8_t singleShotMode;
	uint8_t busOffRecoveryMode;
	uint8_t retVal;

	if (length != canCmdLength)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HandleCanConfigurationCommand+0x34>
	{
		return 1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e03d      	b.n	8001f7c <HandleCanConfigurationCommand+0xb0>
	}

	baudRate = ParseBaudRate(pData);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff9f 	bl	8001e44 <ParseBaudRate>
 8001f06:	6138      	str	r0, [r7, #16]
	silentMode = (pData[modeBytePosition] >> silentModeBitPos) & ModeMask;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	fa42 f303 	asr.w	r3, r2, r3
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	73fb      	strb	r3, [r7, #15]
	singleShotMode = (pData[modeBytePosition] >> singleShotModeBitPos) & ModeMask;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	fa42 f303 	asr.w	r3, r2, r3
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	73bb      	strb	r3, [r7, #14]
	busOffRecoveryMode = (pData[modeBytePosition] >> busOffRecoveryModeBitPos) & ModeMask;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	fa42 f303 	asr.w	r3, r2, r3
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4013      	ands	r3, r2
 8001f54:	737b      	strb	r3, [r7, #13]

	retVal = Can_initialize(baudRate, silentMode, singleShotMode, busOffRecoveryMode);
 8001f56:	7bf9      	ldrb	r1, [r7, #15]
 8001f58:	7bba      	ldrb	r2, [r7, #14]
 8001f5a:	7b7b      	ldrb	r3, [r7, #13]
 8001f5c:	6938      	ldr	r0, [r7, #16]
 8001f5e:	f7fe fa05 	bl	800036c <Can_initialize>
 8001f62:	4603      	mov	r3, r0
 8001f64:	733b      	strb	r3, [r7, #12]

	if (0 != retVal)
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HandleCanConfigurationCommand+0xae>
	{
		/* Most likely failed to configure baud rate */
		TransmitNotAcknowledge(pData[crcIndex]);
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fe89 	bl	8001c8c <TransmitNotAcknowledge>
	}

	return retVal;
 8001f7a:	7b3b      	ldrb	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HandleLinConfigurationCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t HandleLinConfigurationCommand(uint8_t *pData, uint32_t length)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	const uint32_t linCmdLength = 7;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	60fb      	str	r3, [r7, #12]
	uint32_t baudRate;

	if (length != linCmdLength)
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <HandleLinConfigurationCommand+0x1a>
	{
		return 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <HandleLinConfigurationCommand+0x2a>
	}

	baudRate = ParseBaudRate(pData);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff50 	bl	8001e44 <ParseBaudRate>
 8001fa4:	60b8      	str	r0, [r7, #8]

	return Lin_initialize(baudRate);
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f7fe ff16 	bl	8000dd8 <Lin_initialize>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HandleConfigurationCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t HandleConfigurationCommand(uint8_t *pData, uint32_t length)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	const uint32_t crcIndex = length - 1;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
	const Bus_t busType = ParseBusType(pData);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff25 	bl	8001e18 <ParseBusType>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
	uint8_t retVal;

	Time_reset();
 8001fd2:	f7ff fa73 	bl	80014bc <Time_reset>

	switch (busType)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d009      	beq.n	8001ff0 <HandleConfigurationCommand+0x38>
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d00e      	beq.n	8001ffe <HandleConfigurationCommand+0x46>
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d113      	bne.n	800200c <HandleConfigurationCommand+0x54>
	{
		case None:
		{
			retVal = HandleNoneConfigurationCommand(length);
 8001fe4:	6838      	ldr	r0, [r7, #0]
 8001fe6:	f7ff ff5b 	bl	8001ea0 <HandleNoneConfigurationCommand>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
			break;
 8001fee:	e00f      	b.n	8002010 <HandleConfigurationCommand+0x58>
		}
		case Can:
		{
			retVal = HandleCanConfigurationCommand(pData, length);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	f7ff ff6a 	bl	8001ecc <HandleCanConfigurationCommand>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75fb      	strb	r3, [r7, #23]
			break;
 8001ffc:	e008      	b.n	8002010 <HandleConfigurationCommand+0x58>
		}
		case Lin:
		{
			retVal = HandleLinConfigurationCommand(pData, length);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	f7ff ffbf 	bl	8001f84 <HandleLinConfigurationCommand>
 8002006:	4603      	mov	r3, r0
 8002008:	75fb      	strb	r3, [r7, #23]
			break;
 800200a:	e001      	b.n	8002010 <HandleConfigurationCommand+0x58>
		}
		default:
		{
			return 1;
 800200c:	2301      	movs	r3, #1
 800200e:	e010      	b.n	8002032 <HandleConfigurationCommand+0x7a>
		}
	}

	if (0 == retVal)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HandleConfigurationCommand+0x78>
	{
		g_BusType = busType;
 8002016:	f641 1328 	movw	r3, #6440	; 0x1928
 800201a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
		TransmitAcknowledge(pData[crcIndex]);
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fdde 	bl	8001bec <TransmitAcknowledge>
	}

	return retVal;
 8002030:	7dfb      	ldrb	r3, [r7, #23]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop

0800203c <ParseTime>:
 * @param pData: Pointer to data the packet.
 *
 * @retval The parsed 64 bit timed.
 *****************************************************************************/
static uint64_t ParseTime(uint8_t* pData)
{
 800203c:	b4b0      	push	{r4, r5, r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	const uint32_t timeBytesPos = 2;
 8002044:	2102      	movs	r1, #2
 8002046:	6179      	str	r1, [r7, #20]
	uint64_t time;

	time = ((uint32_t)pData[timeBytesPos + 0]) << 0;
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	6979      	ldr	r1, [r7, #20]
 800204c:	4401      	add	r1, r0
 800204e:	7809      	ldrb	r1, [r1, #0]
 8002050:	b2c8      	uxtb	r0, r1
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	e9c7 0102 	strd	r0, r1, [r7, #8]
	time |= ((uint32_t)pData[timeBytesPos + 1]) << 8;
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	3101      	adds	r1, #1
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4401      	add	r1, r0
 8002062:	7809      	ldrb	r1, [r1, #0]
 8002064:	0209      	lsls	r1, r1, #8
 8002066:	4608      	mov	r0, r1
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002070:	ea40 0004 	orr.w	r0, r0, r4
 8002074:	ea41 0105 	orr.w	r1, r1, r5
 8002078:	e9c7 0102 	strd	r0, r1, [r7, #8]
	time |= ((uint32_t)pData[timeBytesPos + 2]) << 16;
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	3102      	adds	r1, #2
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4401      	add	r1, r0
 8002084:	7809      	ldrb	r1, [r1, #0]
 8002086:	0409      	lsls	r1, r1, #16
 8002088:	4608      	mov	r0, r1
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002092:	ea40 0004 	orr.w	r0, r0, r4
 8002096:	ea41 0105 	orr.w	r1, r1, r5
 800209a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	time |= ((uint32_t)pData[timeBytesPos + 3]) << 24;
 800209e:	6979      	ldr	r1, [r7, #20]
 80020a0:	3103      	adds	r1, #3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4401      	add	r1, r0
 80020a6:	7809      	ldrb	r1, [r1, #0]
 80020a8:	0609      	lsls	r1, r1, #24
 80020aa:	4608      	mov	r0, r1
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020b4:	ea40 0004 	orr.w	r0, r0, r4
 80020b8:	ea41 0105 	orr.w	r1, r1, r5
 80020bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
	time |= ((uint64_t)pData[timeBytesPos + 4]) << 32;
 80020c0:	6979      	ldr	r1, [r7, #20]
 80020c2:	3104      	adds	r1, #4
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4401      	add	r1, r0
 80020c8:	7809      	ldrb	r1, [r1, #0]
 80020ca:	b2c8      	uxtb	r0, r1
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	0003      	movs	r3, r0
 80020d2:	2200      	movs	r2, #0
 80020d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020d8:	ea42 0200 	orr.w	r2, r2, r0
 80020dc:	ea43 0301 	orr.w	r3, r3, r1
 80020e0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return time;
 80020e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bcb0      	pop	{r4, r5, r7}
 80020f2:	4770      	bx	lr

080020f4 <ParseCanTransmitMessage>:
 * @param pTxMsg: The returned parsed CAN message.
 *
 * @retval The number of bytes parsed.
 *****************************************************************************/
static uint32_t ParseCanTransmitMessage(uint8_t* pData, uint32_t length, uint32_t cmdBaseLength, CanTxMsg* pTxMsg)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b08f      	sub	sp, #60	; 0x3c
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
	const uint32_t identifierBytesPos = 7;
 8002102:	2307      	movs	r3, #7
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint32_t canMsgExtIdAdditionalBytes = 2;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
	const uint32_t canMaxMsgLength = 8;
 800210a:	2308      	movs	r3, #8
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t stdIdentifierMask = 0x07FF;
 800210e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002112:	623b      	str	r3, [r7, #32]
	const uint32_t extIdentifierMask = 0x1FFFFFFF;
 8002114:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002118:	61fb      	str	r3, [r7, #28]
	const uint32_t ideBitPosition = 5;
 800211a:	2305      	movs	r3, #5
 800211c:	61bb      	str	r3, [r7, #24]
	const uint32_t rtrBitPosition = 6;
 800211e:	2306      	movs	r3, #6
 8002120:	617b      	str	r3, [r7, #20]
	uint8_t* pDataBytes;
	uint8_t i;

	if (0 == (pData[identifierBytesPos] & (1 << ideBitPosition)))
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa42 f303 	asr.w	r3, r2, r3
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d139      	bne.n	80021ae <ParseCanTransmitMessage+0xba>
	{
		pTxMsg->StdId = ((uint32_t)pData[identifierBytesPos + 1] << 0);
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	3301      	adds	r3, #1
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	601a      	str	r2, [r3, #0]
		pTxMsg->StdId |= ((uint32_t)pData[identifierBytesPos] << 8);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	440b      	add	r3, r1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	431a      	orrs	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	601a      	str	r2, [r3, #0]
		pTxMsg->StdId &= stdIdentifierMask;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	401a      	ands	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	601a      	str	r2, [r3, #0]
		pTxMsg->IDE = CAN_ID_STD;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	721a      	strb	r2, [r3, #8]
		pTxMsg->RTR = (0 == (pData[identifierBytesPos] & (1 << rtrBitPosition))) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa42 f303 	asr.w	r3, r2, r3
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <ParseCanTransmitMessage+0x98>
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <ParseCanTransmitMessage+0x9a>
 800218c:	2302      	movs	r3, #2
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	7253      	strb	r3, [r2, #9]
		pTxMsg->DLC = length - cmdBaseLength;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	729a      	strb	r2, [r3, #10]
		pDataBytes = &pData[identifierBytesPos + 2];
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	3302      	adds	r3, #2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
 80021ac:	e052      	b.n	8002254 <ParseCanTransmitMessage+0x160>
	}
	else
	{
		pTxMsg->ExtId = ((uint32_t)pData[identifierBytesPos + 3] << 0);
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	3303      	adds	r3, #3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]
		pTxMsg->ExtId |= ((uint32_t)pData[identifierBytesPos + 2] << 8);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	3302      	adds	r3, #2
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	431a      	orrs	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
		pTxMsg->ExtId |= ((uint32_t)pData[identifierBytesPos + 1] << 16);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	3301      	adds	r3, #1
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	440b      	add	r3, r1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]
		pTxMsg->ExtId |= ((uint32_t)pData[identifierBytesPos + 0] << 24);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	440b      	add	r3, r1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	431a      	orrs	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]
		pTxMsg->ExtId &= extIdentifierMask;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	401a      	ands	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	605a      	str	r2, [r3, #4]
		pTxMsg->IDE = CAN_ID_EXT;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2204      	movs	r2, #4
 800220e:	721a      	strb	r2, [r3, #8]
		pTxMsg->RTR = (0 == (pData[identifierBytesPos] & (1 << rtrBitPosition))) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa42 f303 	asr.w	r3, r2, r3
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <ParseCanTransmitMessage+0x138>
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <ParseCanTransmitMessage+0x13a>
 800222c:	2302      	movs	r3, #2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	7253      	strb	r3, [r2, #9]
		pTxMsg->DLC = length - cmdBaseLength - canMsgExtIdAdditionalBytes;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	b2da      	uxtb	r2, r3
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	b2db      	uxtb	r3, r3
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	b2da      	uxtb	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	729a      	strb	r2, [r3, #10]
		pDataBytes = &pData[identifierBytesPos + 4];
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	3304      	adds	r3, #4
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (pTxMsg->DLC > canMaxMsgLength)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7a9b      	ldrb	r3, [r3, #10]
 8002258:	461a      	mov	r2, r3
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	429a      	cmp	r2, r3
 800225e:	d901      	bls.n	8002264 <ParseCanTransmitMessage+0x170>
	{
		return 0;
 8002260:	2300      	movs	r3, #0
 8002262:	e01b      	b.n	800229c <ParseCanTransmitMessage+0x1a8>
	}

	for (i = 0; i < pTxMsg->DLC; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800226a:	e00e      	b.n	800228a <ParseCanTransmitMessage+0x196>
	{
		pTxMsg->Data[i] = pDataBytes[i];
 800226c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002270:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002274:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002276:	440a      	add	r2, r1
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	440b      	add	r3, r1
 800227e:	72da      	strb	r2, [r3, #11]
	if (pTxMsg->DLC > canMaxMsgLength)
	{
		return 0;
	}

	for (i = 0; i < pTxMsg->DLC; i++)
 8002280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002284:	3301      	adds	r3, #1
 8002286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7a9b      	ldrb	r3, [r3, #10]
 800228e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002292:	429a      	cmp	r2, r3
 8002294:	d3ea      	bcc.n	800226c <ParseCanTransmitMessage+0x178>
	{
		pTxMsg->Data[i] = pDataBytes[i];
	}

	return (pDataBytes - pData);
 8002296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	373c      	adds	r7, #60	; 0x3c
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HandleTransmitQueuedCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint32_t HandleTransmitQueuedCommand(uint8_t* pData, uint32_t length)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b094      	sub	sp, #80	; 0x50
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	const uint32_t transmitQueuedCmdBaseLength = 10;
 80022b2:	230a      	movs	r3, #10
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint64_t deltaTime;
	CanTxMsg txMsg;
	uint32_t parsedBytes;

	deltaTime = ParseTime(pData);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fec0 	bl	800203c <ParseTime>
 80022bc:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	parsedBytes = ParseCanTransmitMessage(pData, length, transmitQueuedCmdBaseLength, &txMsg);
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ca:	f7ff ff13 	bl	80020f4 <ParseCanTransmitMessage>
 80022ce:	63f8      	str	r0, [r7, #60]	; 0x3c

	if (0 == parsedBytes)
 80022d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HandleTransmitQueuedCommand+0x32>
	{
		return 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e040      	b.n	800235c <HandleTransmitQueuedCommand+0xb4>
	}

	if (0 != Can_transmitQueued(&txMsg, deltaTime))
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4618      	mov	r0, r3
 80022e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022e4:	f7fe fa0a 	bl	80006fc <Can_transmitQueued>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d035      	beq.n	800235a <HandleTransmitQueuedCommand+0xb2>
	{
		static uint64_t lastTimeUs = 0;
		const uint64_t currentTimeUs = Time_getUs();
 80022ee:	f7ff f87f 	bl	80013f0 <Time_getUs>
 80022f2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
		const int64_t elapsedTimeUs = lastTimeUs - currentTimeUs;
 80022f6:	f641 1330 	movw	r3, #6448	; 0x1930
 80022fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002302:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002306:	1a82      	subs	r2, r0, r2
 8002308:	eb61 0303 	sbc.w	r3, r1, r3
 800230c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		const int64_t maxMessageRateUs = 1000000UL;
 8002310:	f244 2240 	movw	r2, #16960	; 0x4240
 8002314:	f2c0 020f 	movt	r2, #15
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c7 2308 	strd	r2, r3, [r7, #32]

		/* The message shall be emitted with a maximum rate of 1 Hz and not on
		 * each occurrence of a transmit queue overflow (which might be quiet
		 * frequent). */
		if (   (elapsedTimeUs < 0)
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002324:	2a00      	cmp	r2, #0
 8002326:	f173 0100 	sbcs.w	r1, r3, #0
 800232a:	db07      	blt.n	800233c <HandleTransmitQueuedCommand+0x94>
			|| (elapsedTimeUs > maxMessageRateUs))
 800232c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002330:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002334:	4290      	cmp	r0, r2
 8002336:	eb71 0c03 	sbcs.w	ip, r1, r3
 800233a:	da0e      	bge.n	800235a <HandleTransmitQueuedCommand+0xb2>
		{
			lastTimeUs = currentTimeUs;
 800233c:	f641 1330 	movw	r3, #6448	; 0x1930
 8002340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002344:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002348:	e9c3 0100 	strd	r0, r1, [r3]
			Communication_transmitStatusMessage(StatusMessage_Warning, "HW: Transmit data lost");
 800234c:	2001      	movs	r0, #1
 800234e:	f645 3128 	movw	r1, #23336	; 0x5b28
 8002352:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002356:	f7ff fbd7 	bl	8001b08 <Communication_transmitStatusMessage>
		}
	}

	return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3750      	adds	r7, #80	; 0x50
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ParseTaskId>:
 * @param pData: Pointer to data the packet.
 *
 * @retval The parsed TaskId.
 *****************************************************************************/
static uint32_t ParseTaskId(uint8_t *pData)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	uint32_t taskId;

	taskId = ((uint32_t)pData[0]) << 0;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
	taskId |= ((uint32_t)pData[1]) << 8;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3301      	adds	r3, #1
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
	taskId |= ((uint32_t)pData[2]) << 16;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3302      	adds	r3, #2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
	taskId |= ((uint32_t)pData[3]) << 24;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3303      	adds	r3, #3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

	return taskId;
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HandleAddCanTransmitTaskCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
static uint8_t HandleAddCanTransmitTaskCommand(uint8_t* pData, uint32_t length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b090      	sub	sp, #64	; 0x40
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
	const uint32_t crcIndex = length - 1;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
	const uint32_t addTxTaskCmdBaseLength = 14;
 80023bc:	230e      	movs	r3, #14
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t cycleTime;
	CanTxMsg txMsg;
	uint32_t taskId;
	uint32_t parsedBytes;

	cycleTime = ParseTime(pData);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fe3b 	bl	800203c <ParseTime>
 80023c6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	parsedBytes = ParseCanTransmitMessage(pData, length, addTxTaskCmdBaseLength, &txMsg);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d4:	f7ff fe8e 	bl	80020f4 <ParseCanTransmitMessage>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

	if (0 == parsedBytes)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HandleAddCanTransmitTaskCommand+0x38>
	{
		return 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e025      	b.n	8002430 <HandleAddCanTransmitTaskCommand+0x84>
	}

	taskId = ParseTaskId(&pData[parsedBytes] + txMsg.DLC);
 80023e4:	7dbb      	ldrb	r3, [r7, #22]
 80023e6:	461a      	mov	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	4413      	add	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ffb7 	bl	8002364 <ParseTaskId>
 80023f6:	6238      	str	r0, [r7, #32]

	if (0 == Can_addTransmitTask(&txMsg, cycleTime, taskId))
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	6a3a      	ldr	r2, [r7, #32]
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002406:	f7fe f9cb 	bl	80007a0 <Can_addTransmitTask>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HandleAddCanTransmitTaskCommand+0x74>
	{
		TransmitAcknowledge(pData[crcIndex]);
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fbe7 	bl	8001bec <TransmitAcknowledge>
 800241e:	e006      	b.n	800242e <HandleAddCanTransmitTaskCommand+0x82>
	}
	else
	{
		TransmitNotAcknowledge(pData[crcIndex]);
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fc2f 	bl	8001c8c <TransmitNotAcknowledge>
	}

	return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3738      	adds	r7, #56	; 0x38
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HandleAddLinTransmitTaskCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
static uint8_t HandleAddLinTransmitTaskCommand(uint8_t* pData, uint32_t length)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	/* TODO */
	(void)pData;
	(void)length;
	return 1;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HandleAddTransmitTaskCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
static uint8_t HandleAddTransmitTaskCommand(uint8_t* pData, uint32_t length)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	const Bus_t busType = ParseBusType(pData);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fcdc 	bl	8001e18 <ParseBusType>
 8002460:	4603      	mov	r3, r0
 8002462:	73bb      	strb	r3, [r7, #14]
	const uint32_t addTxTaskCmdBaseLength = 14;
 8002464:	230e      	movs	r3, #14
 8002466:	60bb      	str	r3, [r7, #8]
	uint8_t retVal;

	if (length < addTxTaskCmdBaseLength)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d201      	bcs.n	8002474 <HandleAddTransmitTaskCommand+0x24>
	{
		return 1;
 8002470:	2301      	movs	r3, #1
 8002472:	e017      	b.n	80024a4 <HandleAddTransmitTaskCommand+0x54>
	}

	switch (busType)
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <HandleAddTransmitTaskCommand+0x30>
 800247a:	2b02      	cmp	r3, #2
 800247c:	d007      	beq.n	800248e <HandleAddTransmitTaskCommand+0x3e>
 800247e:	e00d      	b.n	800249c <HandleAddTransmitTaskCommand+0x4c>
	{
		case Can: /* Intentional fall-through */
		{
			retVal = HandleAddCanTransmitTaskCommand(pData, length);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	6839      	ldr	r1, [r7, #0]
 8002484:	f7ff ff92 	bl	80023ac <HandleAddCanTransmitTaskCommand>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
			break;
 800248c:	e009      	b.n	80024a2 <HandleAddTransmitTaskCommand+0x52>
		}
		case Lin:
		{
			retVal = HandleAddLinTransmitTaskCommand(pData, length);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	f7ff ffd1 	bl	8002438 <HandleAddLinTransmitTaskCommand>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]
			break;
 800249a:	e002      	b.n	80024a2 <HandleAddTransmitTaskCommand+0x52>
		}
		default:
		{
			retVal = 1;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
			break;
 80024a0:	bf00      	nop
		}
	}

	return retVal;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HandleRemoveTransmitTaskCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed
 *****************************************************************************/
static uint8_t HandleRemoveTransmitTaskCommand(uint8_t* pData, uint32_t length)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
	const uint32_t crcIndex = length - 1;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
	const uint32_t removeTxTaskCmdLength = 7;
 80024bc:	2307      	movs	r3, #7
 80024be:	617b      	str	r3, [r7, #20]
	const uint32_t taskIdBytesPos = 2;
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
	const Bus_t busType = ParseBusType(pData);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fca7 	bl	8001e18 <ParseBusType>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
	uint32_t taskId;
	uint8_t retVal;

	if (length != removeTxTaskCmdLength)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HandleRemoveTransmitTaskCommand+0x2e>
	{
		return 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02e      	b.n	8002538 <HandleRemoveTransmitTaskCommand+0x8c>
	}

	taskId = ParseTaskId(&pData[taskIdBytesPos]);
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff3f 	bl	8002364 <ParseTaskId>
 80024e6:	60b8      	str	r0, [r7, #8]

	switch (busType)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HandleRemoveTransmitTaskCommand+0x48>
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d006      	beq.n	8002500 <HandleRemoveTransmitTaskCommand+0x54>
 80024f2:	e00b      	b.n	800250c <HandleRemoveTransmitTaskCommand+0x60>
	{
		case Can: /* Intentional fall-through */
		{
			retVal = Can_removeTransmitTask(taskId);
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7fe fa17 	bl	8000928 <Can_removeTransmitTask>
 80024fa:	4603      	mov	r3, r0
 80024fc:	77fb      	strb	r3, [r7, #31]
			break;
 80024fe:	e008      	b.n	8002512 <HandleRemoveTransmitTaskCommand+0x66>
		}
		case Lin:
		{
			retVal = Lin_removeTransmitTask(taskId);
 8002500:	68b8      	ldr	r0, [r7, #8]
 8002502:	f7fe fc7d 	bl	8000e00 <Lin_removeTransmitTask>
 8002506:	4603      	mov	r3, r0
 8002508:	77fb      	strb	r3, [r7, #31]
			break;
 800250a:	e002      	b.n	8002512 <HandleRemoveTransmitTaskCommand+0x66>
		}
		default:
		{
			retVal = 1;
 800250c:	2301      	movs	r3, #1
 800250e:	77fb      	strb	r3, [r7, #31]
			break;
 8002510:	bf00      	nop
		}
	}

	if (0 == retVal)
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HandleRemoveTransmitTaskCommand+0x7c>
	{
		TransmitAcknowledge(pData[crcIndex]);
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb63 	bl	8001bec <TransmitAcknowledge>
 8002526:	e006      	b.n	8002536 <HandleRemoveTransmitTaskCommand+0x8a>
	}
	else
	{
		TransmitNotAcknowledge(pData[crcIndex]);
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fbab 	bl	8001c8c <TransmitNotAcknowledge>
	}

	return 0;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HandleCommand>:
 * @param length: Number of bytes belonging to the command.
 *
 * @retval 0 if succeeded, 1 if failed.
 *****************************************************************************/
static uint8_t HandleCommand(uint8_t* pData, uint32_t length)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	uint8_t retVal;

	switch (ParseCommandType(pData))
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fc4a 	bl	8001de4 <ParseCommandType>
 8002550:	4603      	mov	r3, r0
 8002552:	2b03      	cmp	r3, #3
 8002554:	d826      	bhi.n	80025a4 <HandleCommand+0x64>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <HandleCommand+0x1c>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257b 	.word	0x0800257b
 8002564:	08002589 	.word	0x08002589
 8002568:	08002597 	.word	0x08002597
	{
		case Configure:
		{
			retVal = HandleConfigurationCommand(pData, length);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	f7ff fd22 	bl	8001fb8 <HandleConfigurationCommand>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
			break;
 8002578:	e017      	b.n	80025aa <HandleCommand+0x6a>
		}
		case TransmitQueued:
		{
			retVal = HandleTransmitQueuedCommand(pData, length);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	f7ff fe93 	bl	80022a8 <HandleTransmitQueuedCommand>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
			break;
 8002586:	e010      	b.n	80025aa <HandleCommand+0x6a>
		}
		case AddTransmitTask:
		{
			retVal = HandleAddTransmitTaskCommand(pData, length);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	f7ff ff60 	bl	8002450 <HandleAddTransmitTaskCommand>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
			break;
 8002594:	e009      	b.n	80025aa <HandleCommand+0x6a>
		}
		case RemoveTransmitTask:
		{
			retVal = HandleRemoveTransmitTaskCommand(pData, length);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	f7ff ff87 	bl	80024ac <HandleRemoveTransmitTaskCommand>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
			break;
 80025a2:	e002      	b.n	80025aa <HandleCommand+0x6a>
		}
		default:
		{
			retVal = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
			break;
 80025a8:	bf00      	nop
		}
	}

	return retVal;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ParseReceiveData>:
 * @brief Parses the received data for commands.
 *
 * @note This function is called from background only.
 *****************************************************************************/
static void ParseReceiveData(void)
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b08d      	sub	sp, #52	; 0x34
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	466c      	mov	r4, sp
 80025bc:	4626      	mov	r6, r4
	const uint8_t dataLengthMask = 0x1F;
 80025be:	241f      	movs	r4, #31
 80025c0:	f887 4023 	strb.w	r4, [r7, #35]	; 0x23
	const uint32_t maxPacketSize = dataLengthMask;
 80025c4:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 80025c8:	61fc      	str	r4, [r7, #28]
	InterruptStatus_t status;
	uint8_t data[maxPacketSize];
 80025ca:	69fc      	ldr	r4, [r7, #28]
 80025cc:	3c01      	subs	r4, #1
 80025ce:	61bc      	str	r4, [r7, #24]
 80025d0:	69fc      	ldr	r4, [r7, #28]
 80025d2:	f04f 0500 	mov.w	r5, #0
 80025d6:	00e9      	lsls	r1, r5, #3
 80025d8:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80025dc:	00e0      	lsls	r0, r4, #3
 80025de:	69f9      	ldr	r1, [r7, #28]
 80025e0:	4608      	mov	r0, r1
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	00cb      	lsls	r3, r1, #3
 80025e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025ec:	00c2      	lsls	r2, r0, #3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3307      	adds	r3, #7
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	ebad 0d03 	sub.w	sp, sp, r3
 80025fa:	466b      	mov	r3, sp
 80025fc:	3300      	adds	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
	uint32_t readIndex;
	uint32_t writeIndex;
	uint8_t* pData;

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8002600:	f7fe ffd6 	bl	80015b0 <Interrupt_saveAndDisable>
 8002604:	6138      	str	r0, [r7, #16]

	readIndex = g_RxBuffer.ReadIndex;
 8002606:	f241 5310 	movw	r3, #5392	; 0x1510
 800260a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
	writeIndex = g_RxBuffer.WriteIndex;
 8002612:	f241 5310 	movw	r3, #5392	; 0x1510
 8002616:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60bb      	str	r3, [r7, #8]
	space = COMMUNICATON_BUFFER_SIZE - CalculateBufferSpace(&g_RxBuffer) - 1;
 800261e:	f241 5010 	movw	r0, #5392	; 0x1510
 8002622:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002626:	f7fe ffd5 	bl	80015d4 <CalculateBufferSpace>
 800262a:	4603      	mov	r3, r0
 800262c:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002630:	3301      	adds	r3, #1
 8002632:	607b      	str	r3, [r7, #4]

	/* End of critical section */
	Interrupt_restore(status);
 8002634:	6938      	ldr	r0, [r7, #16]
 8002636:	f7fe ffad 	bl	8001594 <Interrupt_restore>

	for (i = readIndex; i != writeIndex; i = CalculateIndex(i, 1))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263e:	e079      	b.n	8002734 <ParseReceiveData+0x180>
	{
		/* Check for valid preamble */
		if ((g_RxBuffer.Data[i] & g_DataStreamPreamble) != g_DataStreamPreamble)
 8002640:	f241 5310 	movw	r3, #5392	; 0x1510
 8002644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	4413      	add	r3, r2
 800264c:	3308      	adds	r3, #8
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	23a0      	movs	r3, #160	; 0xa0
 8002652:	4013      	ands	r3, r2
 8002654:	b2da      	uxtb	r2, r3
 8002656:	23a0      	movs	r3, #160	; 0xa0
 8002658:	429a      	cmp	r2, r3
 800265a:	d000      	beq.n	800265e <ParseReceiveData+0xaa>
		{
			/* Continue searching for valid PDUs inside received data */
			continue;
 800265c:	e065      	b.n	800272a <ParseReceiveData+0x176>
		}

		length = g_RxBuffer.Data[i] & dataLengthMask;
 800265e:	f241 5310 	movw	r3, #5392	; 0x1510
 8002662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002668:	4413      	add	r3, r2
 800266a:	3308      	adds	r3, #8
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002672:	4013      	ands	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	603b      	str	r3, [r7, #0]

		/* Check if enough bytes available */
		if ((0 == length) || (space < length))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <ParseReceiveData+0xd2>
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d200      	bcs.n	8002688 <ParseReceiveData+0xd4>
		{
			/* Continue searching for valid PDUs inside received data */
			continue;
 8002686:	e050      	b.n	800272a <ParseReceiveData+0x176>
		}

		/* Check if command passes buffer end (wrap-around) */
		if ((readIndex + length) < readIndex)
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	441a      	add	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d21b      	bcs.n	80026cc <ParseReceiveData+0x118>
		{
			for (j = 0; j < length; j++)
 8002694:	2300      	movs	r3, #0
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
 8002698:	e011      	b.n	80026be <ParseReceiveData+0x10a>
			{
				data[j] = g_RxBuffer.Data[CalculateIndex(i, j)];
 800269a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800269c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269e:	f7fe ffab 	bl	80015f8 <CalculateIndex>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f241 5310 	movw	r3, #5392	; 0x1510
 80026a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ac:	4413      	add	r3, r2
 80026ae:	7a1a      	ldrb	r2, [r3, #8]
 80026b0:	6979      	ldr	r1, [r7, #20]
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	440b      	add	r3, r1
 80026b6:	701a      	strb	r2, [r3, #0]
		}

		/* Check if command passes buffer end (wrap-around) */
		if ((readIndex + length) < readIndex)
		{
			for (j = 0; j < length; j++)
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	3301      	adds	r3, #1
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3e9      	bcc.n	800269a <ParseReceiveData+0xe6>
			{
				data[j] = g_RxBuffer.Data[CalculateIndex(i, j)];
			}

			pData = data;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e008      	b.n	80026de <ParseReceiveData+0x12a>
		}
		else /* No wrap-around */
		{
			pData = &g_RxBuffer.Data[i];
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	f241 5310 	movw	r3, #5392	; 0x1510
 80026d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026da:	4413      	add	r3, r2
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* At first control checksum before parsing content */
		if (0 != CalculateCrc(pData, length))
 80026de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	f7fe ffd3 	bl	800168c <CalculateCrc>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d000      	beq.n	80026ee <ParseReceiveData+0x13a>
		{
			/* Continue searching for valid PDUs inside received data */
			continue;
 80026ec:	e01d      	b.n	800272a <ParseReceiveData+0x176>
		}

		if (0 == HandleCommand(pData, length))
 80026ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	f7ff ff25 	bl	8002540 <HandleCommand>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <ParseReceiveData+0x176>
		{
			/* Adjust read pointer by number of bytes just parsed */
			i = CalculateIndex(i, length - 1);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe ff78 	bl	80015f8 <CalculateIndex>
 8002708:	62f8      	str	r0, [r7, #44]	; 0x2c

			/* Begin of critical section */
			status = Interrupt_saveAndDisable();
 800270a:	f7fe ff51 	bl	80015b0 <Interrupt_saveAndDisable>
 800270e:	6138      	str	r0, [r7, #16]

			g_RxBuffer.ReadIndex = CalculateIndex(i, 1);
 8002710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002712:	2101      	movs	r1, #1
 8002714:	f7fe ff70 	bl	80015f8 <CalculateIndex>
 8002718:	4602      	mov	r2, r0
 800271a:	f241 5310 	movw	r3, #5392	; 0x1510
 800271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002722:	601a      	str	r2, [r3, #0]

			/* End of critical section */
			Interrupt_restore(status);
 8002724:	6938      	ldr	r0, [r7, #16]
 8002726:	f7fe ff35 	bl	8001594 <Interrupt_restore>
	space = COMMUNICATON_BUFFER_SIZE - CalculateBufferSpace(&g_RxBuffer) - 1;

	/* End of critical section */
	Interrupt_restore(status);

	for (i = readIndex; i != writeIndex; i = CalculateIndex(i, 1))
 800272a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800272c:	2101      	movs	r1, #1
 800272e:	f7fe ff63 	bl	80015f8 <CalculateIndex>
 8002732:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d181      	bne.n	8002640 <ParseReceiveData+0x8c>
 800273c:	46b5      	mov	sp, r6

			/* End of critical section */
			Interrupt_restore(status);
		}
	}
}
 800273e:	3734      	adds	r7, #52	; 0x34
 8002740:	46bd      	mov	sp, r7
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002744 <TriggerTransmitData>:
 * @brief Triggers the transmission of any data to be transmitted to the host.
 *
 * @note This function is called from background only.
 *****************************************************************************/
static void TriggerTransmitData(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
	uint32_t bytesTransmitted;
	uint32_t readIndex;
	uint32_t writeIndex;

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 800274a:	f7fe ff31 	bl	80015b0 <Interrupt_saveAndDisable>
 800274e:	6178      	str	r0, [r7, #20]

	readIndex = g_TxBuffer.ReadIndex;
 8002750:	f241 731c 	movw	r3, #5916	; 0x171c
 8002754:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	613b      	str	r3, [r7, #16]
	writeIndex = g_TxBuffer.WriteIndex;
 800275c:	f241 731c 	movw	r3, #5916	; 0x171c
 8002760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]

	/* End of critical section */
	Interrupt_restore(status);
 8002768:	6978      	ldr	r0, [r7, #20]
 800276a:	f7fe ff13 	bl	8001594 <Interrupt_restore>

	/* Check if data is available */
	if (readIndex != writeIndex)
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	429a      	cmp	r2, r3
 8002774:	d028      	beq.n	80027c8 <TriggerTransmitData+0x84>
	{
		/* If a wrap-around happened transmit only the bytes up to the end of
		 * the buffer. The next call of this function will then transmit the
		 * remaining bytes */
		length = (writeIndex > readIndex) ?
				 (writeIndex - readIndex) :
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d903      	bls.n	8002786 <TriggerTransmitData+0x42>
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	e002      	b.n	800278c <TriggerTransmitData+0x48>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
	if (readIndex != writeIndex)
	{
		/* If a wrap-around happened transmit only the bytes up to the end of
		 * the buffer. The next call of this function will then transmit the
		 * remaining bytes */
		length = (writeIndex > readIndex) ?
 800278c:	60bb      	str	r3, [r7, #8]
				 (writeIndex - readIndex) :
				 (COMMUNICATON_BUFFER_SIZE - readIndex);

		bytesTransmitted = Usart_transmit(&g_TxBuffer.Data[readIndex], length);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f103 0208 	add.w	r2, r3, #8
 8002794:	f241 731c 	movw	r3, #5916	; 0x171c
 8002798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800279c:	4413      	add	r3, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	f7fe fcb9 	bl	8001118 <Usart_transmit>
 80027a6:	6078      	str	r0, [r7, #4]

		/* Begin of critical section */
		status = Interrupt_saveAndDisable();
 80027a8:	f7fe ff02 	bl	80015b0 <Interrupt_saveAndDisable>
 80027ac:	6178      	str	r0, [r7, #20]

		g_TxBuffer.ReadIndex = CalculateIndex(readIndex, bytesTransmitted);
 80027ae:	6938      	ldr	r0, [r7, #16]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	f7fe ff21 	bl	80015f8 <CalculateIndex>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f241 731c 	movw	r3, #5916	; 0x171c
 80027bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027c0:	601a      	str	r2, [r3, #0]

		/* End of critical section */
		Interrupt_restore(status);
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7fe fee6 	bl	8001594 <Interrupt_restore>
	}
}
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <TriggerHeartBeatSignal>:
 * @brief Triggers the heart-beat signal each second.
 *
 * @note This function is called from background only.
 *****************************************************************************/
static void TriggerHeartBeatSignal(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
	static uint64_t lastTriggerTimeUs = 0;
	const int64_t heartBeatSignalIntervalUs = 1000000;
 80027d6:	f244 2240 	movw	r2, #16960	; 0x4240
 80027da:	f2c0 020f 	movt	r2, #15
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t currentTimeUs = Time_getUs();
 80027e6:	f7fe fe03 	bl	80013f0 <Time_getUs>
 80027ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int64_t elapsedTimeUs = (int64_t)currentTimeUs - (int64_t)lastTriggerTimeUs;
 80027ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f2:	f641 1338 	movw	r3, #6456	; 0x1938
 80027f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	1a82      	subs	r2, r0, r2
 8002800:	eb61 0303 	sbc.w	r3, r1, r3
 8002804:	e9c7 2300 	strd	r2, r3, [r7]

	/* Either the interval has elapsed or the time might have been reset */
	if (   (elapsedTimeUs >= heartBeatSignalIntervalUs)
 8002808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800280c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002810:	4290      	cmp	r0, r2
 8002812:	eb71 0c03 	sbcs.w	ip, r1, r3
 8002816:	da05      	bge.n	8002824 <TriggerHeartBeatSignal+0x54>
		|| (elapsedTimeUs < 0))
 8002818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800281c:	2a00      	cmp	r2, #0
 800281e:	f173 0100 	sbcs.w	r1, r3, #0
 8002822:	da09      	bge.n	8002838 <TriggerHeartBeatSignal+0x68>
	{
		TransmitHeartBeat();
 8002824:	f7ff fa86 	bl	8001d34 <TransmitHeartBeat>
		lastTriggerTimeUs = currentTimeUs;
 8002828:	f641 1338 	movw	r3, #6456	; 0x1938
 800282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002830:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002834:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop

08002840 <CheckForBufferOverrun>:
 * @param pBuffer: The buffer to be used.
 *
 * @note This function is called from background only.
 *****************************************************************************/
static void CheckForBufferOverrun(CommunicationBuffer_t* pBuffer)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	InterruptStatus_t status;

	/* Begin of critical section */
	status = Interrupt_saveAndDisable();
 8002848:	f7fe feb2 	bl	80015b0 <Interrupt_saveAndDisable>
 800284c:	60f8      	str	r0, [r7, #12]

	if (   (0 != pBuffer->Overrun)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <CheckForBufferOverrun+0x3a>
		&& (pBuffer->ReadIndex == pBuffer->WriteIndex))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d10a      	bne.n	800287a <CheckForBufferOverrun+0x3a>
	{
		pBuffer->Overrun = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		Communication_transmitStatusMessage(StatusMessage_Warning, "HW: Communication Buffer Overrun");
 800286c:	2001      	movs	r0, #1
 800286e:	f645 3140 	movw	r1, #23360	; 0x5b40
 8002872:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002876:	f7ff f947 	bl	8001b08 <Communication_transmitStatusMessage>
	}

	/* End of critical section */
	Interrupt_restore(status);
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7fe fe8a 	bl	8001594 <Interrupt_restore>
}
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop

08002888 <Communication_initialize>:

/******************************************************************************
 * @brief Initializes the board and communication.
 *****************************************************************************/
void Communication_initialize(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	g_RxBuffer.ReadIndex = 0;
 800288c:	f241 5310 	movw	r3, #5392	; 0x1510
 8002890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
	g_RxBuffer.WriteIndex = 0;
 8002898:	f241 5310 	movw	r3, #5392	; 0x1510
 800289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]

	g_TxBuffer.ReadIndex = 0;
 80028a4:	f241 731c 	movw	r3, #5916	; 0x171c
 80028a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
	g_TxBuffer.WriteIndex = 0;
 80028b0:	f241 731c 	movw	r3, #5916	; 0x171c
 80028b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]

	g_BusType = None;
 80028bc:	f641 1328 	movw	r3, #6440	; 0x1928
 80028c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]

    Usart_initialize();
 80028c8:	f7fe fad6 	bl	8000e78 <Usart_initialize>

    Usart_connectCbRxData(SerialReceiveDataAvailableCallback);
 80028cc:	f241 706d 	movw	r0, #5997	; 0x176d
 80028d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028d4:	f7fe fbd8 	bl	8001088 <Usart_connectCbRxData>

    Can_connectCbState(CanStateChangedCallback);
 80028d8:	f241 708d 	movw	r0, #6029	; 0x178d
 80028dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028e0:	f7fd fe4e 	bl	8000580 <Can_connectCbState>
    Can_connectCbError(CanErrorCallback);
 80028e4:	f641 0039 	movw	r0, #6201	; 0x1839
 80028e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028ec:	f7fd fe58 	bl	80005a0 <Can_connectCbError>
    Can_connectCbRxMsg(CanReceiveMessageCallback);
 80028f0:	f641 20c5 	movw	r0, #6853	; 0x1ac5
 80028f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028f8:	f7fd fe62 	bl	80005c0 <Can_connectCbRxMsg>
    Can_connectCbTxMsg(CanTransmitMessageCallback);
 80028fc:	f641 20dd 	movw	r0, #6877	; 0x1add
 8002900:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002904:	f7fd fe6c 	bl	80005e0 <Can_connectCbTxMsg>
}
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop

0800290c <Communication_doBackground>:
/******************************************************************************
 * @brief Polls for commands to be executed and triggers the transmission of
 *        buffered data.
 *****************************************************************************/
void Communication_doBackground(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	switch (g_BusType)
 8002910:	f641 1328 	movw	r3, #6440	; 0x1928
 8002914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d002      	beq.n	8002924 <Communication_doBackground+0x18>
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <Communication_doBackground+0x1e>
	{
		case Can: Can_doBackground(); break;
		case Lin: Lin_doBackground(); break;
		default: break;
 8002922:	e005      	b.n	8002930 <Communication_doBackground+0x24>
 *****************************************************************************/
void Communication_doBackground(void)
{
	switch (g_BusType)
	{
		case Can: Can_doBackground(); break;
 8002924:	f7fe f96c 	bl	8000c00 <Can_doBackground>
 8002928:	e002      	b.n	8002930 <Communication_doBackground+0x24>
		case Lin: Lin_doBackground(); break;
 800292a:	f7fe fa75 	bl	8000e18 <Lin_doBackground>
 800292e:	bf00      	nop
		default: break;
	}

    Usart_doBackground();
 8002930:	f7fe fbba 	bl	80010a8 <Usart_doBackground>
    ParseReceiveData();
 8002934:	f7ff fe3e 	bl	80025b4 <ParseReceiveData>
    TriggerTransmitData();
 8002938:	f7ff ff04 	bl	8002744 <TriggerTransmitData>
    TriggerHeartBeatSignal();
 800293c:	f7ff ff48 	bl	80027d0 <TriggerHeartBeatSignal>
    CheckForBufferOverrun(&g_TxBuffer);
 8002940:	f241 701c 	movw	r0, #5916	; 0x171c
 8002944:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002948:	f7ff ff7a 	bl	8002840 <CheckForBufferOverrun>
    CheckForBufferOverrun(&g_RxBuffer);
 800294c:	f241 5010 	movw	r0, #5392	; 0x1510
 8002950:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002954:	f7ff ff74 	bl	8002840 <CheckForBufferOverrun>
}
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
 800295c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
 800295e:	f3ef 8309 	mrs	r3, PSP
 8002962:	4618      	mov	r0, r3
 8002964:	4770      	bx	lr
 8002966:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8002968:	4623      	mov	r3, r4
}
 800296a:	4618      	mov	r0, r3

0800296c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
 800296c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
 800296e:	f383 8809 	msr	PSP, r3
 8002972:	4770      	bx	lr

08002974 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 8002974:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 8002976:	f3ef 8308 	mrs	r3, MSP
 800297a:	4618      	mov	r0, r3
 800297c:	4770      	bx	lr
 800297e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8002980:	4623      	mov	r3, r4
}
 8002982:	4618      	mov	r0, r3

08002984 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
 8002984:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
 8002986:	f383 8808 	msr	MSP, r3
 800298a:	4770      	bx	lr

0800298c <__get_BASEPRI>:
 * @return uint32_t BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8002996:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 800299a:	607b      	str	r3, [r7, #4]
  return(result);
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop

080029ac <__set_BASEPRI>:
 * @return none
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f383 8811 	msr	BASEPRI, r3
}
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <__get_PRIMASK>:
 *
 * Return the state of the priority mask bit from the priority mask
 * register
 */
uint32_t __get_PRIMASK(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029ce:	f3ef 8310 	mrs	r3, PRIMASK
 80029d2:	607b      	str	r3, [r7, #4]
  return(result);
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <__set_PRIMASK>:
 * @return none
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <__get_FAULTMASK>:
 * @return uint32_t FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8002a06:	f3ef 8313 	mrs	r3, FAULTMASK
 8002a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop

08002a1c <__set_FAULTMASK>:
 * @return none
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f383 8813 	msr	FAULTMASK, r3
}
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <__REV>:
 * @return uint32_t reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	ba1b      	rev	r3, r3
 8002a44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <__REV16>:
 * @return uint32_t reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	ba5b      	rev16	r3, r3
 8002a66:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <__REVSH>:
 * @return int32_t reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	badb      	revsh	r3, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <__RBIT>:
 * @return uint32_t reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <__LDREXB>:
 * @return uint8_t value of (*address)
 *
 * Exclusive LDR command
 */
uint8_t __LDREXB(uint8_t *addr)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	e8d3 3f4f 	ldrexb	r3, [r3]
 8002ad2:	73fb      	strb	r3, [r7, #15]
   return(result);
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <__LDREXH>:
 * @return uint16_t value of (*address)
 *
 * Exclusive LDR command
 */
uint16_t __LDREXH(uint16_t *addr)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	e8d3 3f5f 	ldrexh	r3, [r3]
 8002af6:	81fb      	strh	r3, [r7, #14]
   return(result);
 8002af8:	89fb      	ldrh	r3, [r7, #14]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop

08002b08 <__LDREXW>:
 * @return uint32_t value of (*address)
 *
 * Exclusive LDR command
 */
uint32_t __LDREXW(uint32_t *addr)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop

08002b2c <__STREXB>:
 * @return uint32_t successful / failed
 *
 * Exclusive STR command
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	79f9      	ldrb	r1, [r7, #7]
 8002b40:	e8c2 1f43 	strexb	r3, r1, [r2]
 8002b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <__STREXH>:
 * @return uint32_t successful / failed
 *
 * Exclusive STR command
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	88f9      	ldrh	r1, [r7, #6]
 8002b68:	e8c2 1f53 	strexh	r3, r1, [r2]
 8002b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <__STREXW>:
 * @return uint32_t successful / failed
 *
 * Exclusive STR command
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	e843 2300 	strex	r3, r2, [r3]
 8002b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b94:	68fb      	ldr	r3, [r7, #12]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <__get_CONTROL>:
 * @return uint32_t Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002bae:	f3ef 8314 	mrs	r3, CONTROL
 8002bb2:	607b      	str	r3, [r7, #4]
  return(result);
 8002bb4:	687b      	ldr	r3, [r7, #4]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <__set_CONTROL>:
 * @return none
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f383 8814 	msr	CONTROL, r3
}
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bfc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8002c10:	400b      	ands	r3, r1
 8002c12:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c58:	6852      	ldr	r2, [r2, #4]
 8002c5a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c5e:	605a      	str	r2, [r3, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c68:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c6c:	609a      	str	r2, [r3, #8]
  RCC->CFGR2 = 0x00000000;
#endif /* STM32F10X_CL */
    
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002c6e:	f000 f801 	bl	8002c74 <SetSysClock>

}
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002c78:	f000 f802 	bl	8002c80 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop

08002c80 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ca4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002caa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <SetSysClockTo72+0x4a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002cc8:	d1ed      	bne.n	8002ca6 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	e001      	b.n	8002ce6 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 8095 	bne.w	8002e18 <SetSysClockTo72+0x198>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	f042 0210 	orr.w	r2, r2, #16
 8002d04:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	f022 0203 	bic.w	r2, r2, #3
 8002d1c:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f042 0202 	orr.w	r2, r2, #2
 8002d34:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d46:	6852      	ldr	r2, [r2, #4]
 8002d48:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d5a:	6852      	ldr	r2, [r2, #4]
 8002d5c:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d74:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002d8c:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d9e:	6852      	ldr	r2, [r2, #4]
 8002da0:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8002da4:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002dbe:	bf00      	nop
 8002dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f6      	beq.n	8002dc0 <SetSysClockTo72+0x140>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002de2:	6852      	ldr	r2, [r2, #4]
 8002de4:	f022 0203 	bic.w	r2, r2, #3
 8002de8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002df6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002dfa:	6852      	ldr	r2, [r2, #4]
 8002dfc:	f042 0202 	orr.w	r2, r2, #2
 8002e00:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002e02:	bf00      	nop
 8002e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d1f6      	bne.n	8002e04 <SetSysClockTo72+0x184>
 8002e16:	e000      	b.n	8002e1a <SetSysClockTo72+0x19a>
         configuration. User can add here some code to deal with this error */    

    /* Go to infinite loop */
    while (1)
    {
    }
 8002e18:	e7fe      	b.n	8002e18 <SetSysClockTo72+0x198>
  }
}
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d108      	bne.n	8002e4c <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	f000 feab 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8002e42:	2004      	movs	r0, #4
 8002e44:	2100      	movs	r1, #0
 8002e46:	f000 fea7 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002e4a:	e060      	b.n	8002f0e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d108      	bne.n	8002e6c <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002e5a:	2008      	movs	r0, #8
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	f000 fe9b 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8002e62:	2008      	movs	r0, #8
 8002e64:	2100      	movs	r1, #0
 8002e66:	f000 fe97 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002e6a:	e050      	b.n	8002f0e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d108      	bne.n	8002e8c <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002e7a:	2010      	movs	r0, #16
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	f000 fe8b 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8002e82:	2010      	movs	r0, #16
 8002e84:	2100      	movs	r1, #0
 8002e86:	f000 fe87 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002e8a:	e040      	b.n	8002f0e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d108      	bne.n	8002eac <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8002e9a:	2020      	movs	r0, #32
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	f000 fe7b 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8002ea2:	2020      	movs	r0, #32
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f000 fe77 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002eaa:	e030      	b.n	8002f0e <GPIO_DeInit+0xea>
  }    
  else if (GPIOx == GPIOE)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002eb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d108      	bne.n	8002ecc <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8002eba:	2040      	movs	r0, #64	; 0x40
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	f000 fe6b 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8002ec2:	2040      	movs	r0, #64	; 0x40
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f000 fe67 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002eca:	e020      	b.n	8002f0e <GPIO_DeInit+0xea>
  } 
  else if (GPIOx == GPIOF)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ed2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d108      	bne.n	8002eec <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8002eda:	2080      	movs	r0, #128	; 0x80
 8002edc:	2101      	movs	r1, #1
 8002ede:	f000 fe5b 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8002ee2:	2080      	movs	r0, #128	; 0x80
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f000 fe57 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8002eea:	e010      	b.n	8002f0e <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d109      	bne.n	8002f0e <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8002efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002efe:	2101      	movs	r1, #1
 8002f00:	f000 fe4a 	bl	8003b98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8002f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f000 fe45 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	f000 fe3c 	bl	8003b98 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8002f20:	2001      	movs	r0, #1
 8002f22:	2100      	movs	r1, #0
 8002f24:	f000 fe38 	bl	8003b98 <RCC_APB2PeriphResetCmd>
}
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop

08002f2c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	78db      	ldrb	r3, [r3, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	78db      	ldrb	r3, [r3, #3]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	789b      	ldrb	r3, [r3, #2]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d044      	beq.n	8003002 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e038      	b.n	8002ff6 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d126      	bne.n	8002ff0 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	2b28      	cmp	r3, #40	; 0x28
 8002fd0:	d105      	bne.n	8002fde <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	615a      	str	r2, [r3, #20]
 8002fdc:	e008      	b.n	8002ff0 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2b48      	cmp	r3, #72	; 0x48
 8002fe4:	d104      	bne.n	8002ff0 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b07      	cmp	r3, #7
 8002ffa:	d9c3      	bls.n	8002f84 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d946      	bls.n	8003098 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e03a      	b.n	800308c <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3308      	adds	r3, #8
 800301a:	2201      	movs	r2, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	429a      	cmp	r2, r3
 8003034:	d127      	bne.n	8003086 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	43db      	mvns	r3, r3
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4013      	ands	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	78db      	ldrb	r3, [r3, #3]
 8003062:	2b28      	cmp	r3, #40	; 0x28
 8003064:	d105      	bne.n	8003072 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3308      	adds	r3, #8
 800306a:	2201      	movs	r2, #1
 800306c:	409a      	lsls	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	78db      	ldrb	r3, [r3, #3]
 8003076:	2b48      	cmp	r3, #72	; 0x48
 8003078:	d105      	bne.n	8003086 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3308      	adds	r3, #8
 800307e:	2201      	movs	r2, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3301      	adds	r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b07      	cmp	r3, #7
 8003090:	d9c1      	bls.n	8003016 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	605a      	str	r2, [r3, #4]
  }
}
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	70da      	strb	r2, [r3, #3]
}
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e001      	b.n	80030f2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	b29b      	uxth	r3, r3
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e001      	b.n	8003142 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	b29b      	uxth	r3, r3
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]
}
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8003194:	887a      	ldrh	r2, [r7, #2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	615a      	str	r2, [r3, #20]
}
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	460a      	mov	r2, r1
 80031b0:	807a      	strh	r2, [r7, #2]
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	e002      	b.n	80031c8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	615a      	str	r2, [r3, #20]
  }
}
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60da      	str	r2, [r3, #12]
}
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 80031fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]
}
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop

08003234 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	71fa      	strb	r2, [r7, #7]
 8003240:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8003246:	2300      	movs	r3, #0
 8003248:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8003264:	79bb      	ldrb	r3, [r7, #6]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 800326c:	2300      	movs	r3, #0
 800326e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 800328a:	231c      	movs	r3, #28
 800328c:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80032bc:	2300      	movs	r3, #0
 80032be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	617b      	str	r3, [r7, #20]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e0:	d10e      	bne.n	8003300 <GPIO_PinRemapConfig+0x60>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80032e8:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80032f0:	2200      	movs	r2, #0
 80032f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80032f6:	6852      	ldr	r2, [r2, #4]
 80032f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e021      	b.n	8003344 <GPIO_PinRemapConfig+0xa4>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <GPIO_PinRemapConfig+0x88>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4013      	ands	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e00d      	b.n	8003344 <GPIO_PinRemapConfig+0xa4>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0d5b      	lsrs	r3, r3, #21
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8003342:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <GPIO_PinRemapConfig+0xbc>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0d5b      	lsrs	r3, r3, #21
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }

  AFIO->MAPR = tmpreg;
 800335c:	2300      	movs	r3, #0
 800335e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	605a      	str	r2, [r3, #4]
}
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8003370:	b490      	push	{r4, r7}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	71fa      	strb	r2, [r7, #7]
 800337c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8003382:	79bb      	ldrb	r3, [r7, #6]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8003392:	2300      	movs	r3, #0
 8003394:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003398:	79ba      	ldrb	r2, [r7, #6]
 800339a:	0892      	lsrs	r2, r2, #2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	4610      	mov	r0, r2
 80033a0:	2200      	movs	r2, #0
 80033a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80033a6:	79b9      	ldrb	r1, [r7, #6]
 80033a8:	0889      	lsrs	r1, r1, #2
 80033aa:	b2c9      	uxtb	r1, r1
 80033ac:	3102      	adds	r1, #2
 80033ae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	43d2      	mvns	r2, r2
 80033b6:	4011      	ands	r1, r2
 80033b8:	1c82      	adds	r2, r0, #2
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80033be:	2300      	movs	r3, #0
 80033c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033c4:	79ba      	ldrb	r2, [r7, #6]
 80033c6:	0892      	lsrs	r2, r2, #2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	4610      	mov	r0, r2
 80033cc:	2200      	movs	r2, #0
 80033ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80033d2:	79b9      	ldrb	r1, [r7, #6]
 80033d4:	0889      	lsrs	r1, r1, #2
 80033d6:	b2c9      	uxtb	r1, r1
 80033d8:	3102      	adds	r1, #2
 80033da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80033de:	79fc      	ldrb	r4, [r7, #7]
 80033e0:	79ba      	ldrb	r2, [r7, #6]
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	fa04 f202 	lsl.w	r2, r4, r2
 80033ec:	4311      	orrs	r1, r2
 80033ee:	1c82      	adds	r2, r0, #2
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc90      	pop	{r4, r7}
 80033fa:	4770      	bx	lr

080033fc <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8003404:	23dc      	movs	r3, #220	; 0xdc
 8003406:	f2c4 2320 	movt	r3, #16928	; 0x4220
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	601a      	str	r2, [r3, #0]
}
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800341c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003420:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003428:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800343c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	2300      	movs	r3, #0
 8003448:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 800344c:	400b      	ands	r3, r1
 800344e:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800345c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003466:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800346a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800346c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003478:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003482:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800348c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003490:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003494:	6852      	ldr	r2, [r2, #4]
 8003496:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800349a:	605a      	str	r2, [r3, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800349c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034a4:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80034a8:	609a      	str	r2, [r3, #8]
  RCC->CIR = 0x00FF0000;

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#endif /* STM32F10X_CL */
}
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034d2:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80034d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ea:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d003      	beq.n	80034fc <RCC_HSEConfig+0x48>
 80034f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034f8:	d00d      	beq.n	8003516 <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80034fa:	e019      	b.n	8003530 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80034fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003500:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003508:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003512:	601a      	str	r2, [r3, #0]
      break;
 8003514:	e00c      	b.n	8003530 <RCC_HSEConfig+0x7c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8003516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800351e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003522:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800352c:	601a      	str	r2, [r3, #0]
      break;
 800352e:	bf00      	nop
      
    default:
      break;
  }
}
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop

0800353c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8003546:	2300      	movs	r3, #0
 8003548:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800354e:	2031      	movs	r0, #49	; 0x31
 8003550:	f000 fba2 	bl	8003c98 <RCC_GetFlagStatus>
 8003554:	4603      	mov	r3, r0
 8003556:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003564:	d002      	beq.n	800356c <RCC_WaitForHSEStartUp+0x30>
 8003566:	79bb      	ldrb	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800356c:	2031      	movs	r0, #49	; 0x31
 800356e:	f000 fb93 	bl	8003c98 <RCC_GetFlagStatus>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8003578:	2301      	movs	r3, #1
 800357a:	71fb      	strb	r3, [r7, #7]
 800357c:	e001      	b.n	8003582 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800357e:	2300      	movs	r3, #0
 8003580:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8003582:	79fb      	ldrb	r3, [r7, #7]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 800359a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 80035b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80035da:	2300      	movs	r3, #0
 80035dc:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop

080035f0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80035fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003602:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003610:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800361e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003622:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
}
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800363e:	2360      	movs	r3, #96	; 0x60
 8003640:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003644:	79fa      	ldrb	r2, [r7, #7]
 8003646:	601a      	str	r2, [r3, #0]
}
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8003660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003664:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800367c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
}
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8003698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	b2db      	uxtb	r3, r3
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80036c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80036dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]
}
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop

080036f4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003704:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003712:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800371c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	605a      	str	r2, [r3, #4]
}
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8003740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003744:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003752:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800375e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003762:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
}
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	71fa      	strb	r2, [r7, #7]
 8003780:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003782:	79bb      	ldrb	r3, [r7, #6]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003788:	f241 0309 	movw	r3, #4105	; 0x1009
 800378c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003790:	f241 0209 	movw	r2, #4105	; 0x1009
 8003794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	b2d1      	uxtb	r1, r2
 800379c:	79fa      	ldrb	r2, [r7, #7]
 800379e:	430a      	orrs	r2, r1
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e00f      	b.n	80037c6 <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80037a6:	f241 0309 	movw	r3, #4105	; 0x1009
 80037aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037ae:	f241 0209 	movw	r2, #4105	; 0x1009
 80037b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	b2d1      	uxtb	r1, r2
 80037ba:	79fa      	ldrb	r2, [r7, #7]
 80037bc:	43d2      	mvns	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	400a      	ands	r2, r1
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
  }
}
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80037d8:	23d8      	movs	r3, #216	; 0xd8
 80037da:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80037f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800380a:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003818:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
}
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003836:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800383a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003842:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8003846:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d002      	beq.n	800385a <RCC_LSEConfig+0x2e>
 8003854:	2b04      	cmp	r3, #4
 8003856:	d007      	beq.n	8003868 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8003858:	e00d      	b.n	8003876 <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800385a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800385e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e006      	b.n	8003876 <RCC_LSEConfig+0x4a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003868:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800386c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003870:	2205      	movs	r2, #5
 8003872:	701a      	strb	r2, [r3, #0]
      break;            
 8003874:	bf00      	nop
      
    default:
      break;      
  }
}
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800388a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800388e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003892:	79fa      	ldrb	r2, [r7, #7]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80038a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038b8:	6a11      	ldr	r1, [r2, #32]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	430a      	orrs	r2, r1
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop

080038cc <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80038d6:	f240 433c 	movw	r3, #1084	; 0x43c
 80038da:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80038de:	79fa      	ldrb	r2, [r7, #7]
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8003904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00a      	beq.n	8003930 <RCC_GetClocksFreq+0x44>
 800391a:	2b08      	cmp	r3, #8
 800391c:	d00f      	beq.n	800393e <RCC_GetClocksFreq+0x52>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14c      	bne.n	80039bc <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003928:	f2c0 037a 	movt	r3, #122	; 0x7a
 800392c:	6013      	str	r3, [r2, #0]
      break;
 800392e:	e04c      	b.n	80039ca <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003936:	f2c0 037a 	movt	r3, #122	; 0x7a
 800393a:	6013      	str	r3, [r2, #0]
      break;
 800393c:	e045      	b.n	80039ca <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800393e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800394c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800394e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003952:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	0c9b      	lsrs	r3, r3, #18
 8003962:	3302      	adds	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003972:	f2c0 033d 	movt	r3, #61	; 0x3d
 8003976:	fb03 f202 	mul.w	r2, r3, r2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e01c      	b.n	80039ba <RCC_GetClocksFreq+0xce>
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8003980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003998:	f2c0 033d 	movt	r3, #61	; 0x3d
 800399c:	fb03 f202 	mul.w	r2, r3, r2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e009      	b.n	80039ba <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80039ac:	f2c0 037a 	movt	r3, #122	; 0x7a
 80039b0:	fb03 f202 	mul.w	r2, r3, r2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80039b8:	e007      	b.n	80039ca <RCC_GetClocksFreq+0xde>
 80039ba:	e006      	b.n	80039ca <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80039c2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80039c6:	6013      	str	r3, [r2, #0]
      break;
 80039c8:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80039ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80039e0:	f240 0314 	movw	r3, #20
 80039e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	40da      	lsrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80039fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003a14:	f240 0314 	movw	r3, #20
 8003a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	40da      	lsrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a40:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	0adb      	lsrs	r3, r3, #11
 8003a46:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003a48:	f240 0314 	movw	r3, #20
 8003a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	40da      	lsrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8003a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a74:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	0b9b      	lsrs	r3, r3, #14
 8003a7a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8003a7c:	f240 0324 	movw	r3, #36	; 0x24
 8003a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	611a      	str	r2, [r3, #16]
}
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8003aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ac6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003aca:	6951      	ldr	r1, [r2, #20]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	615a      	str	r2, [r3, #20]
 8003ad2:	e00c      	b.n	8003aee <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ae4:	6951      	ldr	r1, [r2, #20]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	43d2      	mvns	r2, r2
 8003aea:	400a      	ands	r2, r1
 8003aec:	615a      	str	r2, [r3, #20]
  }
}
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b1a:	6991      	ldr	r1, [r2, #24]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	619a      	str	r2, [r3, #24]
 8003b22:	e00c      	b.n	8003b3e <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b34:	6991      	ldr	r1, [r2, #24]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	43d2      	mvns	r2, r2
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
  }
}
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b6a:	69d1      	ldr	r1, [r2, #28]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	61da      	str	r2, [r3, #28]
 8003b72:	e00c      	b.n	8003b8e <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b84:	69d1      	ldr	r1, [r2, #28]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	43d2      	mvns	r2, r2
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	61da      	str	r2, [r3, #28]
  }
}
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003bba:	68d1      	ldr	r1, [r2, #12]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e00c      	b.n	8003bde <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003bd4:	68d1      	ldr	r1, [r2, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	43d2      	mvns	r2, r2
 8003bda:	400a      	ands	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
  }
}
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c0a:	6911      	ldr	r1, [r2, #16]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	611a      	str	r2, [r3, #16]
 8003c12:	e00c      	b.n	8003c2e <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c24:	6911      	ldr	r1, [r2, #16]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	43d2      	mvns	r2, r2
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	611a      	str	r2, [r3, #16]
  }
}
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003c42:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003c46:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003c4a:	79fa      	ldrb	r2, [r7, #7]
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003c62:	234c      	movs	r3, #76	; 0x4c
 8003c64:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003c68:	79fa      	ldrb	r2, [r7, #7]
 8003c6a:	601a      	str	r2, [r3, #0]
}
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8003c82:	f241 0307 	movw	r3, #4103	; 0x1007
 8003c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c8a:	79fa      	ldrb	r2, [r7, #7]
 8003c8c:	701a      	strb	r2, [r3, #0]
}
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e00f      	b.n	8003cea <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d106      	bne.n	8003cde <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e005      	b.n	8003cea <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	74fb      	strb	r3, [r7, #19]
 8003d06:	e001      	b.n	8003d0c <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8003d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e001      	b.n	8003d6a <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8003d82:	f241 030a 	movw	r3, #4106	; 0x100a
 8003d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d8a:	79fa      	ldrb	r2, [r7, #7]
 8003d8c:	701a      	strb	r2, [r3, #0]
}
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003da6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10a      	bne.n	8003dc4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8003dae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003db2:	2101      	movs	r1, #1
 8003db4:	f7ff fef0 	bl	8003b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003db8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f7ff feeb 	bl	8003b98 <RCC_APB2PeriphResetCmd>
 8003dc2:	e046      	b.n	8003e52 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003dca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d10a      	bne.n	8003de8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003dd2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f7ff ff06 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003ddc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003de0:	2100      	movs	r1, #0
 8003de2:	f7ff ff01 	bl	8003be8 <RCC_APB1PeriphResetCmd>
 8003de6:	e034      	b.n	8003e52 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8003dee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10a      	bne.n	8003e0c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8003df6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	f7ff fef4 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8003e00:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003e04:	2100      	movs	r1, #0
 8003e06:	f7ff feef 	bl	8003be8 <RCC_APB1PeriphResetCmd>
 8003e0a:	e022      	b.n	8003e52 <USART_DeInit+0xba>
  }    
  else if (USARTx == UART4)
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8003e12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d10a      	bne.n	8003e30 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8003e1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f7ff fee2 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8003e24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f7ff fedd 	bl	8003be8 <RCC_APB1PeriphResetCmd>
 8003e2e:	e010      	b.n	8003e52 <USART_DeInit+0xba>
  }    
  else
  {
    if (USARTx == UART5)
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003e36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d109      	bne.n	8003e52 <USART_DeInit+0xba>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8003e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e42:	2101      	movs	r1, #1
 8003e44:	f7ff fed0 	bl	8003be8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003e48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f7ff fecb 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t integerdivider = 0x00;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8a1b      	ldrh	r3, [r3, #16]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8003e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e84:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8003e88:	4013      	ands	r3, r2
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	88db      	ldrh	r3, [r3, #6]
 8003e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e92:	4313      	orrs	r3, r2
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	899b      	ldrh	r3, [r3, #12]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea8:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8003eac:	4013      	ands	r3, r2
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	889a      	ldrh	r2, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	891b      	ldrh	r3, [r3, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8a9b      	ldrh	r3, [r3, #20]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8003eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003edc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	899b      	ldrh	r3, [r3, #12]
 8003ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eea:	4313      	orrs	r3, r2
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fcf6 	bl	80038ec <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d102      	bne.n	8003f14 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f12:	e001      	b.n	8003f18 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8003f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg = (integerdivider / 0x64) << 0x04;
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	f248 531f 	movw	r3, #34079	; 0x851f
 8003f36:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	623b      	str	r3, [r7, #32]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f5c:	f248 531f 	movw	r3, #34079	; 0x851f
 8003f60:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003f64:	fba3 1302 	umull	r1, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	811a      	strh	r2, [r3, #8]
}
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f92:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	220c      	movs	r2, #12
 8003faa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	819a      	strh	r2, [r3, #12]
}
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8a1b      	ldrh	r3, [r3, #16]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	889b      	ldrh	r3, [r3, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	88db      	ldrh	r3, [r3, #6]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	821a      	strh	r2, [r3, #16]
}
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	80da      	strh	r2, [r3, #6]
}
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop

0800403c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	899b      	ldrh	r3, [r3, #12]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	819a      	strh	r2, [r3, #12]
 800405e:	e007      	b.n	8004070 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	899b      	ldrh	r3, [r3, #12]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	819a      	strh	r2, [r3, #12]
  }
}
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	460a      	mov	r2, r1
 8004088:	807a      	strh	r2, [r7, #2]
 800408a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d103      	bne.n	80040ca <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	330c      	adds	r3, #12
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e009      	b.n	80040de <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d103      	bne.n	80040d8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3310      	adds	r3, #16
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e002      	b.n	80040de <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3314      	adds	r3, #20
 80040dc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80040de:	787b      	ldrb	r3, [r7, #1]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e006      	b.n	8004100 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6811      	ldr	r1, [r2, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	43d2      	mvns	r2, r2
 80040fc:	400a      	ands	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
  }
}
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	460a      	mov	r2, r1
 8004118:	807a      	strh	r2, [r7, #2]
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 800411c:	787b      	ldrb	r3, [r7, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8a9b      	ldrh	r3, [r3, #20]
 8004126:	b29a      	uxth	r2, r3
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	4313      	orrs	r3, r2
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	829a      	strh	r2, [r3, #20]
 8004132:	e009      	b.n	8004148 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8a9b      	ldrh	r3, [r3, #20]
 8004138:	b29a      	uxth	r2, r3
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	43db      	mvns	r3, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	4013      	ands	r3, r2
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	829a      	strh	r2, [r3, #20]
  }
}
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8a1b      	ldrh	r3, [r3, #16]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f023 030f 	bic.w	r3, r3, #15
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8a1b      	ldrh	r3, [r3, #16]
 8004174:	b29a      	uxth	r2, r3
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	b29b      	uxth	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	821a      	strh	r2, [r3, #16]
}
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	899b      	ldrh	r3, [r3, #12]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	899b      	ldrh	r3, [r3, #12]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	819a      	strh	r2, [r3, #12]
}
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	899b      	ldrh	r3, [r3, #12]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	819a      	strh	r2, [r3, #12]
 80041e6:	e007      	b.n	80041f8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	899b      	ldrh	r3, [r3, #12]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f023 0302 	bic.w	r3, r3, #2
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	819a      	strh	r2, [r3, #12]
  }
}
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8a1b      	ldrh	r3, [r3, #16]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8a1b      	ldrh	r3, [r3, #16]
 8004224:	b29a      	uxth	r2, r3
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	4313      	orrs	r3, r2
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	821a      	strh	r2, [r3, #16]
}
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop

0800423c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8a1b      	ldrh	r3, [r3, #16]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	821a      	strh	r2, [r3, #16]
 800425e:	e007      	b.n	8004270 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8a1b      	ldrh	r3, [r3, #16]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	821a      	strh	r2, [r3, #16]
  }
}
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	809a      	strh	r2, [r3, #4]
}
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	889b      	ldrh	r3, [r3, #4]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	b29b      	uxth	r3, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	899b      	ldrh	r3, [r3, #12]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	819a      	strh	r2, [r3, #12]
}
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8b1b      	ldrh	r3, [r3, #24]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8b1b      	ldrh	r3, [r3, #24]
 8004302:	b29a      	uxth	r2, r3
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	b29b      	uxth	r3, r3
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	b29b      	uxth	r3, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	831a      	strh	r2, [r3, #24]
}
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8b1b      	ldrh	r3, [r3, #24]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8b1b      	ldrh	r3, [r3, #24]
 8004340:	b29a      	uxth	r2, r3
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	831a      	strh	r2, [r3, #24]
}
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8a9b      	ldrh	r3, [r3, #20]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f043 0320 	orr.w	r3, r3, #32
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	829a      	strh	r2, [r3, #20]
 800437a:	e007      	b.n	800438c <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8a9b      	ldrh	r3, [r3, #20]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f023 0320 	bic.w	r3, r3, #32
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	829a      	strh	r2, [r3, #20]
  }
}
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop

08004398 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8a9b      	ldrh	r3, [r3, #20]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f043 0310 	orr.w	r3, r3, #16
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	829a      	strh	r2, [r3, #20]
 80043ba:	e007      	b.n	80043cc <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8a9b      	ldrh	r3, [r3, #20]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	829a      	strh	r2, [r3, #20]
  }
}
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8a9b      	ldrh	r3, [r3, #20]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	829a      	strh	r2, [r3, #20]
 80043fa:	e007      	b.n	800440c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8a9b      	ldrh	r3, [r3, #20]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f023 0308 	bic.w	r3, r3, #8
 8004406:	b29a      	uxth	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	829a      	strh	r2, [r3, #20]
  }
}
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8a9b      	ldrh	r3, [r3, #20]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f023 0304 	bic.w	r3, r3, #4
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8a9b      	ldrh	r3, [r3, #20]
 8004438:	b29a      	uxth	r2, r3
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	4313      	orrs	r3, r2
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	829a      	strh	r2, [r3, #20]
}
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8a9b      	ldrh	r3, [r3, #20]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f043 0302 	orr.w	r3, r3, #2
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	829a      	strh	r2, [r3, #20]
 8004472:	e007      	b.n	8004484 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8a9b      	ldrh	r3, [r3, #20]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f023 0302 	bic.w	r3, r3, #2
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	829a      	strh	r2, [r3, #20]
  }
}
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop

08004490 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e001      	b.n	80044ba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80044d4:	887b      	ldrh	r3, [r7, #2]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	801a      	strh	r2, [r3, #0]
}
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	b2db      	uxtb	r3, r3
 800450c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2201      	movs	r2, #1
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d106      	bne.n	8004534 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	899b      	ldrh	r3, [r3, #12]
 800452a:	b29b      	uxth	r3, r3
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4013      	ands	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e00f      	b.n	8004554 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d106      	bne.n	8004548 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8a1b      	ldrh	r3, [r3, #16]
 800453e:	b29b      	uxth	r3, r3
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4013      	ands	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e005      	b.n	8004554 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8a9b      	ldrh	r3, [r3, #20]
 800454c:	b29b      	uxth	r3, r3
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4013      	ands	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29b      	uxth	r3, r3
 800455a:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <USART_GetITStatus+0x9c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	74fb      	strb	r3, [r7, #19]
 8004582:	e001      	b.n	8004588 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8004588:	7cfb      	ldrb	r3, [r7, #19]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80045a4:	2300      	movs	r3, #0
 80045a6:	81fb      	strh	r3, [r7, #14]
 80045a8:	2300      	movs	r3, #0
 80045aa:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80045b2:	89fb      	ldrh	r3, [r7, #14]
 80045b4:	2201      	movs	r2, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80045bc:	89bb      	ldrh	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	801a      	strh	r2, [r3, #0]
}
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80045de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d10a      	bne.n	80045fc <CAN_DeInit+0x2c>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80045e6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80045ea:	2101      	movs	r1, #1
 80045ec:	f7ff fafc 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80045f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80045f4:	2100      	movs	r1, #0
 80045f6:	f7ff faf7 	bl	8003be8 <RCC_APB1PeriphResetCmd>
 80045fa:	e009      	b.n	8004610 <CAN_DeInit+0x40>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80045fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004600:	2101      	movs	r1, #1
 8004602:	f7ff faf1 	bl	8003be8 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8004606:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800460a:	2100      	movs	r1, #0
 800460c:	f7ff faec 	bl	8003be8 <RCC_APB1PeriphResetCmd>
  }
}
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop

08004618 <CAN_Init>:
  *   contains the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *   CANINITFAILED or CANINITOK.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CANINITFAILED;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* exit from sleep mode */
  CANx->MCR &= ~MCR_SLEEP;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0202 	bic.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= MCR_INRQ ;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & MSR_INAK) != MSR_INAK) && (wait_ack != INAK_TimeOut))
 8004642:	e002      	b.n	800464a <CAN_Init+0x32>
  {
    wait_ack++;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3301      	adds	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & MSR_INAK) != MSR_INAK) && (wait_ack != INAK_TimeOut))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <CAN_Init+0x48>
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800465c:	429a      	cmp	r2, r3
 800465e:	d1f1      	bne.n	8004644 <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* ...and check acknowledged */
  if ((CANx->MSR & MSR_INAK) != MSR_INAK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <CAN_Init+0x5a>
  {
    InitStatus = CANINITFAILED;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e09c      	b.n	80047ac <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	799b      	ldrb	r3, [r3, #6]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d106      	bne.n	8004688 <CAN_Init+0x70>
    {
      CANx->MCR |= MCR_TTCM;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e005      	b.n	8004694 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~MCR_TTCM;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	79db      	ldrb	r3, [r3, #7]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <CAN_Init+0x92>
    {
      CANx->MCR |= MCR_ABOM;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e005      	b.n	80046b6 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~MCR_ABOM;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	7a1b      	ldrb	r3, [r3, #8]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d106      	bne.n	80046cc <CAN_Init+0xb4>
    {
      CANx->MCR |= MCR_AWUM;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e005      	b.n	80046d8 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~MCR_AWUM;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 0220 	bic.w	r2, r3, #32
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	7a5b      	ldrb	r3, [r3, #9]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <CAN_Init+0xd6>
    {
      CANx->MCR |= MCR_NART;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f043 0210 	orr.w	r2, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e005      	b.n	80046fa <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~MCR_NART;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0210 	bic.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	7a9b      	ldrb	r3, [r3, #10]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d106      	bne.n	8004710 <CAN_Init+0xf8>
    {
      CANx->MCR |= MCR_RFLM;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f043 0208 	orr.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e005      	b.n	800471c <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~MCR_RFLM;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 0208 	bic.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	7adb      	ldrb	r3, [r3, #11]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d106      	bne.n	8004732 <CAN_Init+0x11a>
    {
      CANx->MCR |= MCR_TXFP;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e005      	b.n	800473e <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~MCR_TXFP;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0204 	bic.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	789b      	ldrb	r3, [r3, #2]
 8004742:	079a      	lsls	r2, r3, #30
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	791b      	ldrb	r3, [r3, #4]
 8004750:	041b      	lsls	r3, r3, #16
    {
      CANx->MCR &= ~MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
 8004752:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	795b      	ldrb	r3, [r3, #5]
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	3b01      	subs	r3, #1
      CANx->MCR &= ~MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
               ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
 8004762:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	61da      	str	r2, [r3, #28]
               ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~MCR_INRQ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 0201 	bic.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0x00;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & MSR_INAK) == MSR_INAK) && (wait_ack != INAK_TimeOut))
 8004778:	e002      	b.n	8004780 <CAN_Init+0x168>
   {
     wait_ack++;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3301      	adds	r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0x00;

   while (((CANx->MSR & MSR_INAK) == MSR_INAK) && (wait_ack != INAK_TimeOut))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <CAN_Init+0x17e>
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004792:	429a      	cmp	r2, r3
 8004794:	d1f1      	bne.n	800477a <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & MSR_INAK) == MSR_INAK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <CAN_Init+0x190>
    {
      InitStatus = CANINITFAILED;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
 80047a6:	e001      	b.n	80047ac <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CANINITOK ;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop

080047bc <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
  *   structure that contains the configuration information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)0x00000001) << CAN_FilterInitStruct->CAN_FilterNumber;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7a9b      	ldrb	r3, [r3, #10]
 80047cc:	2201      	movs	r2, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80047d4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80047d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047dc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80047e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80047e4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80047f0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80047f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047f8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80047fc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004800:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	43d2      	mvns	r2, r2
 8004808:	400a      	ands	r2, r1
 800480a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7b1b      	ldrb	r3, [r3, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d12d      	bne.n	8004872 <CAN_FilterInit+0xb6>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8004816:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800481a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800481e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004822:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004826:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	43d2      	mvns	r2, r2
 800482e:	400a      	ands	r2, r1
 8004830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004834:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004838:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	7a92      	ldrb	r2, [r2, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	88c9      	ldrh	r1, [r1, #6]
 8004844:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800484a:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800484c:	3248      	adds	r2, #72	; 0x48
 800484e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004852:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004856:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7a9b      	ldrb	r3, [r3, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	8889      	ldrh	r1, [r1, #4]
 8004862:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004868:	4301      	orrs	r1, r0
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800486a:	3348      	adds	r3, #72	; 0x48
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	6059      	str	r1, [r3, #4]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12c      	bne.n	80048d4 <CAN_FilterInit+0x118>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800487a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800487e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004882:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004886:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800488a:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	430a      	orrs	r2, r1
 8004892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004896:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800489a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	7a92      	ldrb	r2, [r2, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	8809      	ldrh	r1, [r1, #0]
 80048a6:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80048ac:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80048ae:	3248      	adds	r2, #72	; 0x48
 80048b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80048b4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80048b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7a9b      	ldrb	r3, [r3, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	8889      	ldrh	r1, [r1, #4]
 80048c4:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80048ca:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80048cc:	3348      	adds	r3, #72	; 0x48
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	6059      	str	r1, [r3, #4]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	7adb      	ldrb	r3, [r3, #11]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <CAN_FilterInit+0x140>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80048dc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80048e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048e4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80048e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80048ec:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	43d2      	mvns	r2, r2
 80048f4:	400a      	ands	r2, r1
 80048f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80048fa:	e00d      	b.n	8004918 <CAN_FilterInit+0x15c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80048fc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004900:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004904:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004908:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800490c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	430a      	orrs	r2, r1
 8004914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	891b      	ldrh	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <CAN_FilterInit+0x182>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8004920:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004924:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004928:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800492c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004930:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	43d2      	mvns	r2, r2
 8004938:	400a      	ands	r2, r1
 800493a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	891b      	ldrh	r3, [r3, #8]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10d      	bne.n	8004962 <CAN_FilterInit+0x1a6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8004946:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800494a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800494e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004952:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004956:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	430a      	orrs	r2, r1
 800495e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	7b5b      	ldrb	r3, [r3, #13]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10d      	bne.n	8004986 <CAN_FilterInit+0x1ca>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 800496a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800496e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004972:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004976:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800497a:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	430a      	orrs	r2, r1
 8004982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8004986:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800498a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800498e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004992:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004996:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <CAN_StructInit>:
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
  *   will be initialized.
  * @retval None.
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	719a      	strb	r2, [r3, #6]
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	71da      	strb	r2, [r3, #7]
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	721a      	strb	r2, [r3, #8]
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	725a      	strb	r2, [r3, #9]
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	729a      	strb	r2, [r3, #10]
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	72da      	strb	r2, [r3, #11]
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	709a      	strb	r2, [r3, #2]
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	70da      	strb	r2, [r3, #3]
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2203      	movs	r2, #3
 80049e8:	711a      	strb	r2, [r3, #4]
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	715a      	strb	r2, [r3, #5]
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	801a      	strh	r2, [r3, #0]
}
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <CAN_SlaveStartBank>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None.
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  /* enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8004a0a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a12:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a1a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8004a26:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a2e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a32:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a36:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004a3a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004a3e:	f022 020e 	bic.w	r2, r2, #14
 8004a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8004a46:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a4e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a52:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a56:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8004a5a:	79fa      	ldrb	r2, [r7, #7]
 8004a5c:	0212      	lsls	r2, r2, #8
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8004a64:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a6c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a70:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a74:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop

08004a8c <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITConfig(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <CAN_ITConfig+0x22>
  {
    /* Enable the selected CAN interrupt */
    CANx->IER |= CAN_IT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	615a      	str	r2, [r3, #20]
 8004aac:	e006      	b.n	8004abc <CAN_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected CAN interrupt */
    CANx->IER &= ~CAN_IT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	615a      	str	r2, [r3, #20]
  }
}
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <CAN_Transmit>:
  *   DLC and CAN datas.
  * @retval The number of the mailbox that is used for transmission
  *   or CAN_NO_MB if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&TSR_TME0) == TSR_TME0)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	e013      	b.n	8004b10 <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&TSR_TME1) == TSR_TME1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e00a      	b.n	8004b10 <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&TSR_TME2) == TSR_TME2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 8004b06:	2302      	movs	r3, #2
 8004b08:	73fb      	strb	r3, [r7, #15]
 8004b0a:	e001      	b.n	8004b10 <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_NO_MB;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_NO_MB)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	f000 8098 	beq.w	8004c48 <CAN_Transmit+0x180>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	3218      	adds	r2, #24
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	440a      	add	r2, r1
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	f002 0201 	and.w	r2, r2, #1
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	440b      	add	r3, r1
 8004b32:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_ID_STD)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	7a1b      	ldrb	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d113      	bne.n	8004b64 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | TxMessage->RTR);
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	3218      	adds	r2, #24
 8004b44:	0112      	lsls	r2, r2, #4
 8004b46:	440a      	add	r2, r1
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	0550      	lsls	r0, r2, #21
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	7a52      	ldrb	r2, [r2, #9]
 8004b54:	4302      	orrs	r2, r0
 8004b56:	430a      	orrs	r2, r1
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	440b      	add	r3, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e015      	b.n	8004b90 <CAN_Transmit+0xc8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId<<3) | TxMessage->IDE | 
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	3218      	adds	r2, #24
 8004b6c:	0112      	lsls	r2, r2, #4
 8004b6e:	440a      	add	r2, r1
 8004b70:	6811      	ldr	r1, [r2, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	00d0      	lsls	r0, r2, #3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	7a12      	ldrb	r2, [r2, #8]
 8004b7c:	4310      	orrs	r0, r2
                                               TxMessage->RTR);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId<<3) | TxMessage->IDE | 
 8004b82:	4302      	orrs	r2, r0
 8004b84:	430a      	orrs	r2, r1
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	3318      	adds	r3, #24
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	440b      	add	r3, r1
 8004b8e:	601a      	str	r2, [r3, #0]
                                               TxMessage->RTR);
    }
    

    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	7a9b      	ldrb	r3, [r3, #10]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	3218      	adds	r2, #24
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	440a      	add	r2, r1
 8004baa:	6852      	ldr	r2, [r2, #4]
 8004bac:	f022 020f 	bic.w	r2, r2, #15
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	440b      	add	r3, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	3218      	adds	r2, #24
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	440a      	add	r2, r1
 8004bc6:	6851      	ldr	r1, [r2, #4]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	7a92      	ldrb	r2, [r2, #10]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	440b      	add	r3, r1
 8004bd6:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	7b92      	ldrb	r2, [r2, #14]
 8004bde:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	7b52      	ldrb	r2, [r2, #13]
 8004be4:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004be6:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	7b12      	ldrb	r2, [r2, #12]
 8004bec:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8004bee:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004bf4:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c00:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	7c92      	ldrb	r2, [r2, #18]
 8004c08:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	7c52      	ldrb	r2, [r2, #17]
 8004c0e:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004c10:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	7c12      	ldrb	r2, [r2, #16]
 8004c16:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8004c18:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8004c1e:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c2a:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	3218      	adds	r2, #24
 8004c34:	0112      	lsls	r2, r2, #4
 8004c36:	440a      	add	r2, r1
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	3318      	adds	r3, #24
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	440b      	add	r3, r1
 8004c46:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <CAN_TransmitStatus>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CANTXOK if the CAN driver transmits the message, CANTXFAILED in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  /* RQCP, TXOK and TME bits */
  uint8_t state = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
  switch (TransmitMailbox)
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d022      	beq.n	8004cb4 <CAN_TransmitStatus+0x5c>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d03c      	beq.n	8004cec <CAN_TransmitStatus+0x94>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d156      	bne.n	8004d24 <CAN_TransmitStatus+0xcc>
  {
    case (0): state |= (uint8_t)((CANx->TSR & TSR_RQCP0) << 2);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TXOK0) >> 0);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TME0) >> 26);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb2:	e03a      	b.n	8004d2a <CAN_TransmitStatus+0xd2>
    case (1): state |= (uint8_t)((CANx->TSR & TSR_RQCP1) >> 6);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TXOK1) >> 8);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TME1) >> 27);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce0:	0edb      	lsrs	r3, r3, #27
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cea:	e01e      	b.n	8004d2a <CAN_TransmitStatus+0xd2>
    case (2): state |= (uint8_t)((CANx->TSR & TSR_RQCP2) >> 14);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf4:	0b9b      	lsrs	r3, r3, #14
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TXOK2) >> 16);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	73fb      	strb	r3, [r7, #15]
      state |= (uint8_t)((CANx->TSR & TSR_TME2) >> 28);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d18:	0f1b      	lsrs	r3, r3, #28
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	73fb      	strb	r3, [r7, #15]
      break;
 8004d22:	e002      	b.n	8004d2a <CAN_TransmitStatus+0xd2>
    default:
      state = CANTXFAILED;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	bf00      	nop
  }
  switch (state)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	d006      	beq.n	8004d3e <CAN_TransmitStatus+0xe6>
 8004d30:	2b07      	cmp	r3, #7
 8004d32:	d007      	beq.n	8004d44 <CAN_TransmitStatus+0xec>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d108      	bne.n	8004d4a <CAN_TransmitStatus+0xf2>
  {
      /* transmit pending  */
    case (0x0): state = CANTXPENDING;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e008      	b.n	8004d50 <CAN_TransmitStatus+0xf8>
      /* transmit failed  */
    case (0x5): state = CANTXFAILED;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
      break;
 8004d42:	e005      	b.n	8004d50 <CAN_TransmitStatus+0xf8>
      /* transmit succedeed  */
    case (0x7): state = CANTXOK;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e002      	b.n	8004d50 <CAN_TransmitStatus+0xf8>
    default:
      state = CANTXFAILED;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4e:	bf00      	nop
  }
  return state;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral. 
  * @param  Mailbox: Mailbox number.
  * @retval None.
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d00b      	beq.n	8004d8a <CAN_CancelTransmit+0x2a>
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d010      	beq.n	8004d98 <CAN_CancelTransmit+0x38>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <CAN_CancelTransmit+0x1c>
    case (1): CANx->TSR |= TSR_ABRQ1;
      break;
    case (2): CANx->TSR |= TSR_ABRQ2;
      break;
    default:
      break;
 8004d7a:	e014      	b.n	8004da6 <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (0): CANx->TSR |= TSR_ABRQ0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e00d      	b.n	8004da6 <CAN_CancelTransmit+0x46>
    case (1): CANx->TSR |= TSR_ABRQ1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
      break;
 8004d96:	e006      	b.n	8004da6 <CAN_CancelTransmit+0x46>
    case (2): CANx->TSR |= TSR_ABRQ2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
      break;
 8004da4:	bf00      	nop
    default:
      break;
  }
}
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral. 
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None.
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <CAN_FIFORelease+0x1a>
  {
    CANx->RF0R = RF0R_RFOM0;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <CAN_FIFORelease+0x20>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R = RF1R_RFOM1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	611a      	str	r2, [r3, #16]
  }
}
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e00b      	b.n	8004e18 <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d106      	bne.n	8004e14 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e001      	b.n	8004e18 <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop

08004e28 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive message which 
  *   contains CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	460b      	mov	r3, r1
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	331b      	adds	r3, #27
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	4413      	add	r3, r2
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_ID_STD)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7a1b      	ldrb	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	331b      	adds	r3, #27
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	4413      	add	r3, r2
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0d5a      	lsrs	r2, r3, #21
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e008      	b.n	8004e7c <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	331b      	adds	r3, #27
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4413      	add	r3, r2
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	08da      	lsrs	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	331b      	adds	r3, #27
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	4413      	add	r3, r2
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	331b      	adds	r3, #27
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	331b      	adds	r3, #27
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8004ec0:	7afb      	ldrb	r3, [r7, #11]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	0e1b      	lsrs	r3, r3, #24
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8004f16:	7afb      	ldrb	r3, [r7, #11]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	0e1b      	lsrs	r3, r3, #24
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  CAN_FIFORelease(CANx, FIFONumber);
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	4619      	mov	r1, r3
 8004f72:	f7ff ff1d 	bl	8004db0 <CAN_FIFORelease>
}
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <CAN_DBGFreeze>:
  * @param  NewState: new state of the CAN peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e005      	b.n	8004fa8 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	601a      	str	r2, [r3, #0]
  }
}
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <CAN_Sleep>:
  * @brief  Enters the low power mode.
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval CANSLEEPOK if sleep entered, CANSLEEPFAILED in an other case.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CANSLEEPFAILED;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~MCR_INRQ)) | MCR_SLEEP);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	f043 0202 	orr.w	r2, r3, #2
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d101      	bne.n	8004fe0 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CANSLEEPOK;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
  }
  /* At this step, sleep mode status */
   return (uint8_t)sleepstatus;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop

08004ff0 <CAN_WakeUp>:
  * @brief  Wakes the CAN up.
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval CANWAKEUPOK if sleep mode left, CANWAKEUPFAILED in an other case.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TimeOut	;
 8004ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CANWAKEUPFAILED;
 8004ffe:	2300      	movs	r3, #0
 8005000:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~MCR_SLEEP;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 0202 	bic.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800500e:	e002      	b.n	8005016 <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <CAN_WakeUp+0x38>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f3      	bne.n	8005010 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <CAN_WakeUp+0x48>
  {
   /* Sleep mode exited */
    wakeupstatus = CANWAKEUPOK;
 8005034:	2301      	movs	r3, #1
 8005036:	72fb      	strb	r3, [r7, #11]
  }
  /* At this step, sleep mode status */
  return (uint8_t)wakeupstatus;
 8005038:	7afb      	ldrb	r3, [r7, #11]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <CAN_GetFlagStatus>:
  * @param  CAN_FLAG: specifies the flag to check.
  *   This parameter can be: CAN_FLAG_EWG, CAN_FLAG_EPV or CAN_FLAG_BOF.
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FLAG(CAN_FLAG));
  /* Check the status of the specified CAN flag */
  if ((CANx->ESR & CAN_FLAG) != (uint32_t)RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <CAN_GetFlagStatus+0x20>
  {
    /* CAN_FLAG is set */
    bitstatus = SET;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	e001      	b.n	800506c <CAN_GetFlagStatus+0x24>
  }
  else
  {
    /* CAN_FLAG is reset */
    bitstatus = RESET;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <CAN_ClearFlag>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @param  CAN_FLAG: specifies the flag to clear.
  * @retval None.
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FLAG(CAN_FLAG));
  /* Clear the selected CAN flags */
  CANx->ESR &= ~CAN_FLAG;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
}
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop

080050a0 <CAN_GetITStatus>:
  *   CAN_IT_FOV1, CAN_IT_EWG, CAN_IT_EPV, 
  *   CAN_IT_BOF, CAN_IT_WKU or CAN_IT_SLK.
  * @retval The new state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d054      	beq.n	800515e <CAN_GetITStatus+0xbe>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d80d      	bhi.n	80050d4 <CAN_GetITStatus+0x34>
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d02a      	beq.n	8005112 <CAN_GetITStatus+0x72>
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d804      	bhi.n	80050ca <CAN_GetITStatus+0x2a>
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d03a      	beq.n	800513a <CAN_GetITStatus+0x9a>
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	d01b      	beq.n	8005100 <CAN_GetITStatus+0x60>
 80050c8:	e088      	b.n	80051dc <CAN_GetITStatus+0x13c>
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	d02b      	beq.n	8005126 <CAN_GetITStatus+0x86>
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d03c      	beq.n	800514c <CAN_GetITStatus+0xac>
 80050d2:	e083      	b.n	80051dc <CAN_GetITStatus+0x13c>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d8:	d05c      	beq.n	8005194 <CAN_GetITStatus+0xf4>
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d805      	bhi.n	80050ec <CAN_GetITStatus+0x4c>
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d045      	beq.n	8005170 <CAN_GetITStatus+0xd0>
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d04b      	beq.n	8005182 <CAN_GetITStatus+0xe2>
 80050ea:	e077      	b.n	80051dc <CAN_GetITStatus+0x13c>
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d06b      	beq.n	80051ca <CAN_GetITStatus+0x12a>
 80050f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f6:	d05f      	beq.n	80051b8 <CAN_GetITStatus+0x118>
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fc:	d053      	beq.n	80051a6 <CAN_GetITStatus+0x106>
 80050fe:	e06d      	b.n	80051dc <CAN_GetITStatus+0x13c>
  {
    case CAN_IT_RQCP0:
      pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP0);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	2101      	movs	r1, #1
 8005108:	f000 f8de 	bl	80052c8 <CheckITStatus>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e067      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_RQCP1:
      pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511c:	f000 f8d4 	bl	80052c8 <CheckITStatus>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e05d      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_RQCP2:
      pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005130:	f000 f8ca 	bl	80052c8 <CheckITStatus>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
      break;
 8005138:	e053      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_FF0:
      pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FULL0);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4618      	mov	r0, r3
 8005140:	2108      	movs	r1, #8
 8005142:	f000 f8c1 	bl	80052c8 <CheckITStatus>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
      break;
 800514a:	e04a      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_FOV0:
      pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FOVR0);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4618      	mov	r0, r3
 8005152:	2110      	movs	r1, #16
 8005154:	f000 f8b8 	bl	80052c8 <CheckITStatus>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e041      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_FF1:
      pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FULL1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	4618      	mov	r0, r3
 8005164:	2108      	movs	r1, #8
 8005166:	f000 f8af 	bl	80052c8 <CheckITStatus>
 800516a:	4603      	mov	r3, r0
 800516c:	73fb      	strb	r3, [r7, #15]
      break;
 800516e:	e038      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_FOV1:
      pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FOVR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4618      	mov	r0, r3
 8005176:	2110      	movs	r1, #16
 8005178:	f000 f8a6 	bl	80052c8 <CheckITStatus>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e02f      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_EWG:
      pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EWGF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	4618      	mov	r0, r3
 8005188:	2101      	movs	r1, #1
 800518a:	f000 f89d 	bl	80052c8 <CheckITStatus>
 800518e:	4603      	mov	r3, r0
 8005190:	73fb      	strb	r3, [r7, #15]
      break;
 8005192:	e026      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_EPV:
      pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EPVF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	4618      	mov	r0, r3
 800519a:	2102      	movs	r1, #2
 800519c:	f000 f894 	bl	80052c8 <CheckITStatus>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e01d      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_BOF:
      pendingbitstatus = CheckITStatus(CANx->ESR, ESR_BOFF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	4618      	mov	r0, r3
 80051ac:	2104      	movs	r1, #4
 80051ae:	f000 f88b 	bl	80052c8 <CheckITStatus>
 80051b2:	4603      	mov	r3, r0
 80051b4:	73fb      	strb	r3, [r7, #15]
      break;
 80051b6:	e014      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_SLK:
      pendingbitstatus = CheckITStatus(CANx->MSR, MSR_SLAKI);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4618      	mov	r0, r3
 80051be:	2110      	movs	r1, #16
 80051c0:	f000 f882 	bl	80052c8 <CheckITStatus>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	e00b      	b.n	80051e2 <CAN_GetITStatus+0x142>
    case CAN_IT_WKU:
      pendingbitstatus = CheckITStatus(CANx->MSR, MSR_WKUI);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	2108      	movs	r1, #8
 80051d2:	f000 f879 	bl	80052c8 <CheckITStatus>
 80051d6:	4603      	mov	r3, r0
 80051d8:	73fb      	strb	r3, [r7, #15]
      break;
 80051da:	e002      	b.n	80051e2 <CAN_GetITStatus+0x142>
    default :
      pendingbitstatus = RESET;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
      break;
 80051e0:	bf00      	nop
  }
  /* Return the CAN_IT status */
  return  pendingbitstatus;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <CAN_ClearITPendingBit>:
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @param  CAN_IT: specifies the interrupt pending bit to clear.
  * @retval None.
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d03b      	beq.n	8005274 <CAN_ClearITPendingBit+0x88>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d80d      	bhi.n	800521c <CAN_ClearITPendingBit+0x30>
 8005200:	2b06      	cmp	r3, #6
 8005202:	d025      	beq.n	8005250 <CAN_ClearITPendingBit+0x64>
 8005204:	2b06      	cmp	r3, #6
 8005206:	d804      	bhi.n	8005212 <CAN_ClearITPendingBit+0x26>
 8005208:	2b04      	cmp	r3, #4
 800520a:	d02b      	beq.n	8005264 <CAN_ClearITPendingBit+0x78>
 800520c:	2b05      	cmp	r3, #5
 800520e:	d01b      	beq.n	8005248 <CAN_ClearITPendingBit+0x5c>
      break;
    case CAN_IT_SLK:
      CANx->MSR = MSR_SLAKI;  /* rc_w1*/
      break;
    default :
      break;
 8005210:	e055      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
 8005212:	2b07      	cmp	r3, #7
 8005214:	d021      	beq.n	800525a <CAN_ClearITPendingBit+0x6e>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d028      	beq.n	800526c <CAN_ClearITPendingBit+0x80>
      break;
    case CAN_IT_SLK:
      CANx->MSR = MSR_SLAKI;  /* rc_w1*/
      break;
    default :
      break;
 800521a:	e050      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d037      	beq.n	8005292 <CAN_ClearITPendingBit+0xa6>
 8005222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005226:	d805      	bhi.n	8005234 <CAN_ClearITPendingBit+0x48>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d027      	beq.n	800527c <CAN_ClearITPendingBit+0x90>
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	d028      	beq.n	8005284 <CAN_ClearITPendingBit+0x98>
      break;
    case CAN_IT_SLK:
      CANx->MSR = MSR_SLAKI;  /* rc_w1*/
      break;
    default :
      break;
 8005232:	e044      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d039      	beq.n	80052ae <CAN_ClearITPendingBit+0xc2>
 800523a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800523e:	d03a      	beq.n	80052b6 <CAN_ClearITPendingBit+0xca>
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d02c      	beq.n	80052a0 <CAN_ClearITPendingBit+0xb4>
      break;
    case CAN_IT_SLK:
      CANx->MSR = MSR_SLAKI;  /* rc_w1*/
      break;
    default :
      break;
 8005246:	e03a      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_ITStatus(CAN_IT));
  switch (CAN_IT)
  {
    case CAN_IT_RQCP0:
      CANx->TSR = TSR_RQCP0; /* rc_w1*/
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	609a      	str	r2, [r3, #8]
      break;
 800524e:	e036      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_RQCP1:
      CANx->TSR = TSR_RQCP1; /* rc_w1*/
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e031      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_RQCP2:
      CANx->TSR = TSR_RQCP2; /* rc_w1*/
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005260:	609a      	str	r2, [r3, #8]
      break;
 8005262:	e02c      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_FF0:
      CANx->RF0R = RF0R_FULL0; /* rc_w1*/
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2208      	movs	r2, #8
 8005268:	60da      	str	r2, [r3, #12]
      break;
 800526a:	e028      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_FOV0:
      CANx->RF0R = RF0R_FOVR0; /* rc_w1*/
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2210      	movs	r2, #16
 8005270:	60da      	str	r2, [r3, #12]
      break;
 8005272:	e024      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_FF1:
      CANx->RF1R = RF1R_FULL1; /* rc_w1*/
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2208      	movs	r2, #8
 8005278:	611a      	str	r2, [r3, #16]
      break;
 800527a:	e020      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_FOV1:
      CANx->RF1R = RF1R_FOVR1; /* rc_w1*/
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2210      	movs	r2, #16
 8005280:	611a      	str	r2, [r3, #16]
      break;
 8005282:	e01c      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_EWG:
      CANx->ESR &= ~ ESR_EWGF; /* rw */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f023 0201 	bic.w	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
      break;
 8005290:	e015      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_EPV:
      CANx->ESR &= ~ ESR_EPVF; /* rw */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f023 0202 	bic.w	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]
      break;
 800529e:	e00e      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_BOF:
      CANx->ESR &= ~ ESR_BOFF; /* rw */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f023 0204 	bic.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	619a      	str	r2, [r3, #24]
      break;
 80052ac:	e007      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_WKU:
      CANx->MSR = MSR_WKUI;  /* rc_w1*/
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	605a      	str	r2, [r3, #4]
      break;
 80052b4:	e003      	b.n	80052be <CAN_ClearITPendingBit+0xd2>
    case CAN_IT_SLK:
      CANx->MSR = MSR_SLAKI;  /* rc_w1*/
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2210      	movs	r2, #16
 80052ba:	605a      	str	r2, [r3, #4]
      break;
 80052bc:	bf00      	nop
    default :
      break;
  }
}
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e001      	b.n	80052ea <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 0201 	bic.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	2308      	movs	r3, #8
 8005328:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800532c:	429a      	cmp	r2, r3
 800532e:	d10a      	bne.n	8005346 <DMA_DeInit+0x4e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8005330:	2300      	movs	r3, #0
 8005332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005336:	2200      	movs	r2, #0
 8005338:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800533c:	6852      	ldr	r2, [r2, #4]
 800533e:	f042 020f 	orr.w	r2, r2, #15
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	e0c8      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	231c      	movs	r3, #28
 800534a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800534e:	429a      	cmp	r2, r3
 8005350:	d10a      	bne.n	8005368 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8005352:	2300      	movs	r3, #0
 8005354:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005358:	2200      	movs	r2, #0
 800535a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800535e:	6852      	ldr	r2, [r2, #4]
 8005360:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	e0b7      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	2330      	movs	r3, #48	; 0x30
 800536c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005370:	429a      	cmp	r2, r3
 8005372:	d10a      	bne.n	800538a <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8005374:	2300      	movs	r3, #0
 8005376:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800537a:	2200      	movs	r2, #0
 800537c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005380:	6852      	ldr	r2, [r2, #4]
 8005382:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	e0a6      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	2344      	movs	r3, #68	; 0x44
 800538e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005392:	429a      	cmp	r2, r3
 8005394:	d10a      	bne.n	80053ac <DMA_DeInit+0xb4>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8005396:	2300      	movs	r3, #0
 8005398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800539c:	2200      	movs	r2, #0
 800539e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053a2:	6852      	ldr	r2, [r2, #4]
 80053a4:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	e095      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	2358      	movs	r3, #88	; 0x58
 80053b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d10a      	bne.n	80053ce <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053be:	2200      	movs	r2, #0
 80053c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053c4:	6852      	ldr	r2, [r2, #4]
 80053c6:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	e084      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	236c      	movs	r3, #108	; 0x6c
 80053d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10a      	bne.n	80053f0 <DMA_DeInit+0xf8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80053da:	2300      	movs	r3, #0
 80053dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053e0:	2200      	movs	r2, #0
 80053e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053e6:	6852      	ldr	r2, [r2, #4]
 80053e8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	e073      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d10a      	bne.n	8005412 <DMA_DeInit+0x11a>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005402:	2200      	movs	r2, #0
 8005404:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005408:	6852      	ldr	r2, [r2, #4]
 800540a:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e062      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800541c:	429a      	cmp	r2, r3
 800541e:	d10c      	bne.n	800543a <DMA_DeInit+0x142>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8005420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800542c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005430:	6852      	ldr	r2, [r2, #4]
 8005432:	f042 020f 	orr.w	r2, r2, #15
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e04e      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	f240 431c 	movw	r3, #1052	; 0x41c
 8005440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005444:	429a      	cmp	r2, r3
 8005446:	d10c      	bne.n	8005462 <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8005448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005454:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005458:	6852      	ldr	r2, [r2, #4]
 800545a:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	e03a      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8005468:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800546c:	429a      	cmp	r2, r3
 800546e:	d10c      	bne.n	800548a <DMA_DeInit+0x192>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8005470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800547c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	e026      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	f240 4344 	movw	r3, #1092	; 0x444
 8005490:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005494:	429a      	cmp	r2, r3
 8005496:	d10c      	bne.n	80054b2 <DMA_DeInit+0x1ba>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8005498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054a8:	6852      	ldr	r2, [r2, #4]
 80054aa:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	e012      	b.n	80054d8 <DMA_DeInit+0x1e0>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	f44f 638b 	mov.w	r3, #1112	; 0x458
 80054b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054bc:	429a      	cmp	r2, r3
 80054be:	d10b      	bne.n	80054d8 <DMA_DeInit+0x1e0>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80054c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054d0:	6852      	ldr	r2, [r2, #4]
 80054d2:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 80054d6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005512:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800551e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800552a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
}
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d006      	beq.n	80055d4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e005      	b.n	80055e0 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 0201 	bic.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
  }
}
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop

080055ec <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	e006      	b.n	800561c <DMA_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]
  }
}
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	b29b      	uxth	r3, r3
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <DMA_GetFlagStatus+0x28>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 800565e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005662:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	e004      	b.n	8005676 <DMA_GetFlagStatus+0x32>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800566c:	2300      	movs	r3, #0
 800566e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <DMA_GetFlagStatus+0x42>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e001      	b.n	800568a <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
 80056aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	e004      	b.n	80056c2 <DMA_ClearFlag+0x2a>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]
  }
}
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <DMA_GetITStatus+0x28>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80056e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	e004      	b.n	80056fe <DMA_GetITStatus+0x32>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <DMA_GetITStatus+0x42>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	e001      	b.n	8005712 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <DMA_ClearITPendingBit+0x20>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
 8005732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005736:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e004      	b.n	800574a <DMA_ClearITPendingBit+0x2a>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
 8005740:	2300      	movs	r3, #0
 8005742:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]
  }
}
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800575c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005760:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 800576a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800576e:	60da      	str	r2, [r3, #12]
}
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	230f      	movs	r3, #15
 800578e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d042      	beq.n	800581e <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005798:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800579c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f1c3 0304 	rsb	r3, r3, #4
 80057b2:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	461a      	mov	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	789b      	ldrb	r3, [r3, #2]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80057e2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80057e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	4611      	mov	r1, r2
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	440b      	add	r3, r1
 80057f6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80057fa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80057fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	0952      	lsrs	r2, r2, #5
 8005808:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	7809      	ldrb	r1, [r1, #0]
 800580e:	f001 011f 	and.w	r1, r1, #31
 8005812:	2001      	movs	r0, #1
 8005814:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800581c:	e011      	b.n	8005842 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800581e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005822:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	0952      	lsrs	r2, r2, #5
 800582c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	7809      	ldrb	r1, [r1, #0]
 8005832:	f001 011f 	and.w	r1, r1, #31
 8005836:	2001      	movs	r0, #1
 8005838:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800583c:	3220      	adds	r2, #32
 800583e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005856:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800585a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005864:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
}
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	71fa      	strb	r2, [r7, #7]
 8005884:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005886:	79bb      	ldrb	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00c      	beq.n	80058a6 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 800588c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005890:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005894:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005898:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800589c:	6911      	ldr	r1, [r2, #16]
 800589e:	79fa      	ldrb	r2, [r7, #7]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	611a      	str	r2, [r3, #16]
 80058a4:	e00c      	b.n	80058c0 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80058a6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80058aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058ae:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80058b2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80058b6:	6911      	ldr	r1, [r2, #16]
 80058b8:	79fa      	ldrb	r2, [r7, #7]
 80058ba:	43d2      	mvns	r2, r2
 80058bc:	400a      	ands	r2, r1
 80058be:	611a      	str	r2, [r3, #16]
  }
}
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d10c      	bne.n	80058f4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80058da:	f24e 0310 	movw	r3, #57360	; 0xe010
 80058de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058e2:	f24e 0210 	movw	r2, #57360	; 0xe010
 80058e6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	f042 0204 	orr.w	r2, r2, #4
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e00b      	b.n	800590c <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80058f4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80058f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058fc:	f24e 0210 	movw	r2, #57360	; 0xe010
 8005900:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	601a      	str	r2, [r3, #0]
  }
}
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop

08005918 <Reset_Handler>:
 8005918:	2100      	movs	r1, #0
 800591a:	e003      	b.n	8005924 <LoopCopyDataInit>

0800591c <CopyDataInit>:
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <LoopFillZerobss+0xc>)
 800591e:	585b      	ldr	r3, [r3, r1]
 8005920:	5043      	str	r3, [r0, r1]
 8005922:	3104      	adds	r1, #4

08005924 <LoopCopyDataInit>:
 8005924:	4808      	ldr	r0, [pc, #32]	; (8005948 <LoopFillZerobss+0x10>)
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <LoopFillZerobss+0x14>)
 8005928:	1842      	adds	r2, r0, r1
 800592a:	429a      	cmp	r2, r3
 800592c:	d3f6      	bcc.n	800591c <CopyDataInit>
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <LoopFillZerobss+0x18>)
 8005930:	e002      	b.n	8005938 <LoopFillZerobss>

08005932 <FillZerobss>:
 8005932:	2300      	movs	r3, #0
 8005934:	f842 3b04 	str.w	r3, [r2], #4

08005938 <LoopFillZerobss>:
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <LoopFillZerobss+0x1c>)
 800593a:	429a      	cmp	r2, r3
 800593c:	d3f9      	bcc.n	8005932 <FillZerobss>
 800593e:	f7fa fbe5 	bl	800010c <main>
 8005942:	4770      	bx	lr
 8005944:	08005b78 	.word	0x08005b78
 8005948:	20000000 	.word	0x20000000
 800594c:	20000028 	.word	0x20000028
 8005950:	20000028 	.word	0x20000028
 8005954:	20001940 	.word	0x20001940

08005958 <ADC1_2_IRQHandler>:
 8005958:	e7fe      	b.n	8005958 <ADC1_2_IRQHandler>
	...

0800595c <strncpy>:
 800595c:	ea40 0301 	orr.w	r3, r0, r1
 8005960:	079b      	lsls	r3, r3, #30
 8005962:	b470      	push	{r4, r5, r6}
 8005964:	d12b      	bne.n	80059be <strncpy+0x62>
 8005966:	2a03      	cmp	r2, #3
 8005968:	bf84      	itt	hi
 800596a:	460c      	movhi	r4, r1
 800596c:	4603      	movhi	r3, r0
 800596e:	d926      	bls.n	80059be <strncpy+0x62>
 8005970:	4621      	mov	r1, r4
 8005972:	f854 5b04 	ldr.w	r5, [r4], #4
 8005976:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800597a:	ea26 0605 	bic.w	r6, r6, r5
 800597e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8005982:	d105      	bne.n	8005990 <strncpy+0x34>
 8005984:	3a04      	subs	r2, #4
 8005986:	2a03      	cmp	r2, #3
 8005988:	f843 5b04 	str.w	r5, [r3], #4
 800598c:	4621      	mov	r1, r4
 800598e:	d8ef      	bhi.n	8005970 <strncpy+0x14>
 8005990:	b19a      	cbz	r2, 80059ba <strncpy+0x5e>
 8005992:	780c      	ldrb	r4, [r1, #0]
 8005994:	3a01      	subs	r2, #1
 8005996:	701c      	strb	r4, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	b13c      	cbz	r4, 80059ac <strncpy+0x50>
 800599c:	b16a      	cbz	r2, 80059ba <strncpy+0x5e>
 800599e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059a2:	3a01      	subs	r2, #1
 80059a4:	f803 4b01 	strb.w	r4, [r3], #1
 80059a8:	2c00      	cmp	r4, #0
 80059aa:	d1f7      	bne.n	800599c <strncpy+0x40>
 80059ac:	b12a      	cbz	r2, 80059ba <strncpy+0x5e>
 80059ae:	441a      	add	r2, r3
 80059b0:	2100      	movs	r1, #0
 80059b2:	f803 1b01 	strb.w	r1, [r3], #1
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d1fb      	bne.n	80059b2 <strncpy+0x56>
 80059ba:	bc70      	pop	{r4, r5, r6}
 80059bc:	4770      	bx	lr
 80059be:	4603      	mov	r3, r0
 80059c0:	e7e6      	b.n	8005990 <strncpy+0x34>
 80059c2:	bf00      	nop

080059c4 <strnlen>:
 80059c4:	b430      	push	{r4, r5}
 80059c6:	1e4d      	subs	r5, r1, #1
 80059c8:	b189      	cbz	r1, 80059ee <strnlen+0x2a>
 80059ca:	7801      	ldrb	r1, [r0, #0]
 80059cc:	b179      	cbz	r1, 80059ee <strnlen+0x2a>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	2200      	movs	r2, #0
 80059d2:	e003      	b.n	80059dc <strnlen+0x18>
 80059d4:	781c      	ldrb	r4, [r3, #0]
 80059d6:	3201      	adds	r2, #1
 80059d8:	3301      	adds	r3, #1
 80059da:	b12c      	cbz	r4, 80059e8 <strnlen+0x24>
 80059dc:	4295      	cmp	r5, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	d1f8      	bne.n	80059d4 <strnlen+0x10>
 80059e2:	1a18      	subs	r0, r3, r0
 80059e4:	bc30      	pop	{r4, r5}
 80059e6:	4770      	bx	lr
 80059e8:	1a08      	subs	r0, r1, r0
 80059ea:	bc30      	pop	{r4, r5}
 80059ec:	4770      	bx	lr
 80059ee:	4608      	mov	r0, r1
 80059f0:	e7f8      	b.n	80059e4 <strnlen+0x20>
 80059f2:	bf00      	nop
 80059f4:	203a5748 	.word	0x203a5748
 80059f8:	656d6954 	.word	0x656d6954
 80059fc:	6d617473 	.word	0x6d617473
 8005a00:	766f2070 	.word	0x766f2070
 8005a04:	6c667265 	.word	0x6c667265
 8005a08:	2820776f 	.word	0x2820776f
 8005a0c:	2e353033 	.word	0x2e353033
 8005a10:	20682034 	.word	0x20682034
 8005a14:	70616c65 	.word	0x70616c65
 8005a18:	29646573 	.word	0x29646573
 8005a1c:	00000000 	.word	0x00000000

08005a20 <g_CrcTable>:
 8005a20:	53623100 97a6f5c4 eadb88b9 2e1f4c7d     .1bS........}L..
 8005a30:	10217243 d4e5b687 a998cbfa 6d5c0f3e     Cr!.........>.\m
 8005a40:	d5e4b786 11207342 6c5d0e3f a899cafb     ....Bs .?.]l....
 8005a50:	96a7f4c5 52633001 2f1e4d7c ebda89b8     .....0cR|M./....
 8005a60:	6e5f0c3d aa9bc8f9 d7e6b584 13227140     =._n........@q".
 8005a70:	2d1c4f7e e9d88bba 94a5f6c7 50613203     ~O.-.........2aP
 8005a80:	e8d98abb 2c1d4e7f 51603302 95a4f7c6     .....N.,.3`Q....
 8005a90:	ab9ac9f8 6f5e0d3c 12237041 d6e7b485     ....<.^oAp#.....
 8005aa0:	29184b7a eddc8fbe 90a1f2c3 54653607     zK.).........6eT
 8005ab0:	6a5b0839 ae9fccfd d3e2b180 17267544     9.[j........Du&.
 8005ac0:	af9ecdfc 6b5a0938 16277445 d2e3b081     ....8.ZkEt'.....
 8005ad0:	ecdd8ebf 28194a7b 55643706 91a0f3c2     ....{J.(.7dU....
 8005ae0:	14257647 d0e1b283 ad9ccffe 69580b3a     Gv%.........:.Xi
 8005af0:	57663504 93a2f1c0 eedf8cbd 2a1b4879     .5fW........yH.*
 8005b00:	92a3f0c1 56673405 2b1a4978 efde8dbc     .....4gVxI.+....
 8005b10:	d1e0b382 15247746 68590a3b ac9dceff     ....Fw$.;.Yh....

08005b20 <g_DataStreamPreamble>:
 8005b20:	000000a0                                ....

08005b24 <g_PacketTypeByteBitOffset>:
 8005b24:	00000003 203a5748 6e617254 74696d73     ....HW: Transmit
 8005b34:	74616420 6f6c2061 00007473 203a5748      data lost..HW: 
 8005b44:	6d6d6f43 63696e75 6f697461 7542206e     Communication Bu
 8005b54:	72656666 65764f20 6e757272 00000000     ffer Overrun....

08005b64 <SystemFrequency>:
 8005b64:	044aa200                                ..J.

08005b68 <SystemFrequency_SysClk>:
 8005b68:	044aa200                                ..J.

08005b6c <SystemFrequency_AHBClk>:
 8005b6c:	044aa200                                ..J.

08005b70 <SystemFrequency_APB1Clk>:
 8005b70:	02255100                                .Q%.

08005b74 <SystemFrequency_APB2Clk>:
 8005b74:	044aa200                                ..J.
